<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>learnbyexample</title>
	<subtitle>Learn Python, Regex, Linux, Scripting, Vim, Ebooks, Self-Publishing and Interesting Tech Nuggets.</subtitle>
	<link href="https://learnbyexample.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://learnbyexample.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2025-01-09T00:00:00+00:00</updated>
	<id>https://learnbyexample.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>100 Page Python Intro book announcement</title>
		<published>2024-12-19T00:00:00+00:00</published>
		<updated>2024-12-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/100-page-python-intro-book-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/100-page-python-intro-book-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I am pleased to announce a new version of my &lt;strong&gt;100 Page Python Intro&lt;&#x2F;strong&gt; ebook. This book is a short, introductory guide for the Python programming language. This book is well suited:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As a reference material for Python beginner workshops&lt;&#x2F;li&gt;
&lt;li&gt;If you have prior experience with another programming language&lt;&#x2F;li&gt;
&lt;li&gt;If you want a complement resource after reading a Python basics book, watching a video course, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of the ebook for FREE till 02-Jan-2025. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;100pagepythonintro&#x2F;c&#x2F;YearEndSale&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;100pagepythonintro&#x2F;c&#x2F;YearEndSale&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;100pagepythonintro&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;100pagepythonintro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Two of my bundles are on sale as well:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;All 13 Books Bundle&lt;&#x2F;strong&gt; — $15 (normal price $32), learn Regular Expressions, Linux CLI tools, Python, Vim and more!
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;learnbyexample-all-books&#x2F;c&#x2F;YearEndSale&quot;&gt;Leanpub&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;YearEndSale&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Awesome Regex Bundle&lt;&#x2F;strong&gt; — $10 (normal price $20), Python, Ruby, JavaScript, BRE&#x2F;ERE, PCRE and Vim regular expressions
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;regex&#x2F;c&#x2F;YearEndSale&quot;&gt;Leanpub&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;regex&#x2F;YearEndSale&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Python version updated to &lt;strong&gt;3.13.0&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Added more exercises and you can now practice some of them using this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PythonExercises&quot;&gt;interactive TUI app&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;li&gt;Images centered for EPUB format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;aoWJzaSs0cs&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Check out my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;programming tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLTv2U3HnAL4NN2tK-59ZiNBm-o64-Yvos&quot;&gt;Vim tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;testimonials&quot;&gt;Testimonials&lt;a class=&quot;zola-anchor&quot; href=&quot;#testimonials&quot; aria-label=&quot;Anchor link for: testimonials&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#x27;s very thorough, written with care, and presented in a way that makes sense. Even as an intermediate Python programmer, I found use in this book.&lt;&#x2F;p&gt;
&lt;p&gt;— feedback by &lt;a href=&quot;https:&#x2F;&#x2F;healeycodes.com&#x2F;&quot;&gt;Andrew Healey&lt;&#x2F;a&gt; on an early draft of &amp;quot;100 Page Python Intro&amp;quot; mentioned in &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=26082464&quot;&gt;this Hacker News thread&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;interactive-tui-app&quot;&gt;Interactive TUI app&lt;a class=&quot;zola-anchor&quot; href=&quot;#interactive-tui-app&quot; aria-label=&quot;Anchor link for: interactive-tui-app&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I also wrote an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PythonExercises&quot;&gt;interactive TUI app&lt;&#x2F;a&gt; based on some of the exercises from the ebook. Reference solutions are also provided.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;PythonExercises&#x2F;python_exercises.png&quot; alt=&quot;Sample screenshot from the interactive TUI app for Python exercises&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;Numeric data types&lt;&#x2F;li&gt;
&lt;li&gt;Strings and user input&lt;&#x2F;li&gt;
&lt;li&gt;Defining functions&lt;&#x2F;li&gt;
&lt;li&gt;Control structures&lt;&#x2F;li&gt;
&lt;li&gt;Importing and creating modules&lt;&#x2F;li&gt;
&lt;li&gt;Installing modules and Virtual environments&lt;&#x2F;li&gt;
&lt;li&gt;Exception handling&lt;&#x2F;li&gt;
&lt;li&gt;Debugging&lt;&#x2F;li&gt;
&lt;li&gt;Testing&lt;&#x2F;li&gt;
&lt;li&gt;Tuple and Sequence operations&lt;&#x2F;li&gt;
&lt;li&gt;List&lt;&#x2F;li&gt;
&lt;li&gt;Mutability&lt;&#x2F;li&gt;
&lt;li&gt;Dict&lt;&#x2F;li&gt;
&lt;li&gt;Set&lt;&#x2F;li&gt;
&lt;li&gt;Text processing&lt;&#x2F;li&gt;
&lt;li&gt;Comprehensions and Generator expressions&lt;&#x2F;li&gt;
&lt;li&gt;Dealing with files&lt;&#x2F;li&gt;
&lt;li&gt;Executing external commands&lt;&#x2F;li&gt;
&lt;li&gt;Command line arguments&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;introduction.html&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;introduction.html&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&lt;&#x2F;a&gt; for programs, example files, markdown source and other details about the book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;echo &#x27;bGVhcm5ieWV4YW1wbGUubmV0QGdtYWlsLmNvbQo=&#x27; | base64 --decode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Festive offers for books on Python, Linux, Regular Expressions, Vim and more!</title>
		<published>2024-11-12T00:00:00+00:00</published>
		<updated>2024-11-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/programming-deals-2024/" type="text/html"/>
		<id>https://learnbyexample.github.io/programming-deals-2024/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;Here are some awesome deals for programming books and courses during the 2024 festive season.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;my-ebooks&quot;&gt;My ebooks&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-ebooks&quot; aria-label=&quot;Anchor link for: my-ebooks&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Offers valid till 02-Dec-2024. You can get them on Leanpub:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;learnbyexample-all-books&#x2F;c&#x2F;FestiveOffer&quot;&gt;All 13 Books bundle&lt;&#x2F;a&gt; — $15 (normal price $32), learn Regular Expressions, Linux CLI tools, Python, Vim and more!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;linux-cli-text-processing&#x2F;c&#x2F;FestiveOffer&quot;&gt;Linux CLI Text Processing bundle&lt;&#x2F;a&gt; — $10 (normal price $20), grep, sed, awk, perl and ruby one-liners, GNU coreutils, CLI computing&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;python-bundle&#x2F;c&#x2F;FestiveOffer&quot;&gt;Learn by example Python bundle&lt;&#x2F;a&gt; — $8 (normal price $15), Python introduction, Regular Expressions and Projects&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&#x2F;c&#x2F;FestiveOffer&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; — FREE (normal price $10)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can also avail these offers on Gumroad:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;FestiveOffer&quot;&gt;All 13 Books Bundle&lt;&#x2F;a&gt; — $15 (normal price $32), learn Regular Expressions, Linux CLI tools, Python, Vim and more!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;linux-cli-text-processing&#x2F;FestiveOffer&quot;&gt;Linux CLI Text Processing bundle&lt;&#x2F;a&gt; — $10 (normal price $20), grep, sed, awk, perl and ruby one-liners, GNU coreutils, CLI computing&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&#x2F;FestiveOffer&quot;&gt;Learn by example Python bundle&lt;&#x2F;a&gt; — $8 (normal price $15), Python introduction, Regular Expressions and Projects&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; — FREE (normal price $10)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;FestiveOffer&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;all_books_bundle.png&quot; alt=&quot;All books bundle&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;indie-creators&quot;&gt;Indie creators&lt;a class=&quot;zola-anchor&quot; href=&quot;#indie-creators&quot; aria-label=&quot;Anchor link for: indie-creators&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathspp.gumroad.com&#x2F;l&#x2F;all-books-bundle&#x2F;BF24&quot;&gt;7 Python books bundle&lt;&#x2F;a&gt; — 50% off&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;driscollis.gumroad.com&#x2F;&quot;&gt;Python books&lt;&#x2F;a&gt; — 35% off with &lt;code&gt;BF24&lt;&#x2F;code&gt; discount code&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;adamchainz.gumroad.com&#x2F;&quot;&gt;Ebooks on Django and Git&lt;&#x2F;a&gt; — 50% off, plus purchasing power parity if applicable
&lt;ul&gt;
&lt;li&gt;see also author&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;adamj.eu&#x2F;tech&#x2F;2024&#x2F;11&#x2F;18&#x2F;django-black-friday-deals-2024&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; for links to other Django-related deals&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thepythoncodingplace.thinkific.com&#x2F;order?ct=20aec16f-ab0e-467f-bc1b-7e98e64d47f4&quot;&gt;The Python Coding Place Membership&lt;&#x2F;a&gt; — 40% off with &lt;code&gt;black2024&lt;&#x2F;code&gt; discount code&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pythonmorsels.com&#x2F;courses&#x2F;jumpstart&#x2F;overview&#x2F;&quot;&gt;Python Jumpstart&lt;&#x2F;a&gt; — 50% launch discount
&lt;ul&gt;
&lt;li&gt;see also author&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;treyhunner.com&#x2F;2024&#x2F;11&#x2F;python-black-friday-and-cyber-monday-sales-2024&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; for links to other Python deals&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wizardzines.com&#x2F;&quot;&gt;Wizard Zines&lt;&#x2F;a&gt; — 50% off with &lt;code&gt;WIZARDPDF&lt;&#x2F;code&gt; discount code&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shrutibalasa.gumroad.com&#x2F;l&#x2F;ebooks-combo&#x2F;BLACKFRIDAY24&quot;&gt;CSS Flex and Grid + Level up with Tailwind CSS&lt;&#x2F;a&gt; — 60% off&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;everydayrailsrspec&#x2F;c&#x2F;rubyconf2024&quot;&gt;Everyday Rails Testing with RSpec&lt;&#x2F;a&gt; — 53% off&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;other-deals&quot;&gt;Other deals&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-deals&quot; aria-label=&quot;Anchor link for: other-deals&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;media.pragprog.com&#x2F;newsletters&#x2F;2024-11-20.html&quot;&gt;The Pragmatic Bookshelf&lt;&#x2F;a&gt; — 40% off on all ebooks and audio books&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mailchi.mp&#x2F;leanpub&#x2F;weekly-sale-2024-nov-bf-5388297&quot;&gt;Leanpub Black Friday Sale&lt;&#x2F;a&gt; — offers for programming books, bundles and courses&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;trungdq88&#x2F;Awesome-Black-Friday-Cyber-Monday&quot;&gt;Huge list of awesome deals&lt;&#x2F;a&gt; — tools, productivity, books, courses, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x90n&#x2F;InfoSec-Black-Friday&quot;&gt;InfoSec Hack Friday&lt;&#x2F;a&gt; — InfoSec related software&#x2F;tools&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blackfridaydeals.dev&#x2F;&quot;&gt;blackfridaydeals.dev&lt;&#x2F;a&gt; — Hottest Black Friday Deals for Developers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Interactive Python Exercises and Quiz</title>
		<published>2024-10-29T00:00:00+00:00</published>
		<updated>2024-11-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/interactive-python-exercises/" type="text/html"/>
		<id>https://learnbyexample.github.io/interactive-python-exercises/</id>
		<content type="html">&lt;p&gt;Having an interactive program that automatically loads questions and checks the solution is wonderful to have while learning a topic. This &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PythonExercises&quot;&gt;TUI app&lt;&#x2F;a&gt; has beginner to intermediate level exercises and multiple-choice questions for Python learners.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;PythonExercises&#x2F;python_exercises.png&quot; alt=&quot;Sample screenshot for Python exercises&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This app is available on PyPI as &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;pythonexercises&#x2F;&quot;&gt;pythonexercises&lt;&#x2F;a&gt;. Example installation instructions are shown below, adjust them based on your preferences and OS.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# virtual environment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; venv textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; source bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pip install pythonexercises
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# launch the app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pythonexercises
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If you are on Windows, using the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Windows_Terminal&quot;&gt;Windows Terminal&lt;&#x2F;a&gt; is recommended. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;issues&#x2F;3#issuecomment-1481488042&quot;&gt;this issue&lt;&#x2F;a&gt; for Virtual Environment commands and other details.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To run the app without having to enter the virtual environment again, add this alias to &lt;code&gt;.bashrc&lt;&#x2F;code&gt; (or equivalent):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# you&amp;#39;ll have to change the path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;pythonexercises&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;textual_apps&#x2F;bin&#x2F;pythonexercises&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an alternative to manually managing such virtual environments, you can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&lt;&#x2F;a&gt; instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pipx install pythonexercises
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pythonexercises
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As yet another alternative, you can install &lt;code&gt;textual&lt;&#x2F;code&gt; (see &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;getting_started&#x2F;&quot;&gt;Textual documentation&lt;&#x2F;a&gt; for more details), clone this repository and run the &lt;code&gt;python_exercises.py&lt;&#x2F;code&gt; file. You&#x27;ll need to install &lt;code&gt;textual[syntax]&lt;&#x2F;code&gt; to enable syntax highlighting (see &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;widgets&#x2F;text_area&#x2F;#syntax-highlighting-dependencies&quot;&gt;documentation&lt;&#x2F;a&gt; for more details).&lt;&#x2F;p&gt;
&lt;p&gt;Adjust the terminal dimensions for the widgets to appear properly, for example 84x25 (characters x lines). Here&#x27;s another screenshot:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;PythonExercises&#x2F;python_quiz.png&quot; alt=&quot;Sample screenshot for Python quiz&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;guide&quot;&gt;Guide&lt;a class=&quot;zola-anchor&quot; href=&quot;#guide&quot; aria-label=&quot;Anchor link for: guide&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;PythonExercises&#x2F;app_guide.md&quot;&gt;app_guide.md&lt;&#x2F;a&gt; for instructions.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;ebook&quot;&gt;Ebook&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook&quot; aria-label=&quot;Anchor link for: ebook&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The exercise and quiz questions in this app have been adapted from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d highly appreciate your feedback. Please file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;issues&quot;&gt;an issue&lt;&#x2F;a&gt; if there are bugs, crashes, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Hope you find this TUI app useful. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim Reference Guide book announcement</title>
		<published>2024-08-20T00:00:00+00:00</published>
		<updated>2024-08-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/vim-reference-guide-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/vim-reference-guide-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I am pleased to announce a new version of my &lt;strong&gt;Vim Reference Guide&lt;&#x2F;strong&gt; ebook. This is intended as a concise learning resource for beginner to intermediate level Vim users. It has more in common with cheatsheets than a typical text book. Topics like Regular Expressions and Macros have more detailed explanations and examples due to their complexity. I hope this guide would make it much easier for you to discover Vim features and learning resources than my own blundering experience.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of the ebook for FREE till 31-Aug-2024. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;vim_reference_guide&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;vim_reference_guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;vim_reference_guide&#x2F;c&#x2F;new_vim_release&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;vim_reference_guide&#x2F;c&#x2F;new_vim_release&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Two of my bundles are on sale as well:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;new_vim_release&quot;&gt;All Books Bundle&lt;&#x2F;a&gt; is $15 (normal price $32) — all my 13 programming ebooks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;linux-cli-text-processing&#x2F;new_vim_release&quot;&gt;Linux CLI Text Processing&lt;&#x2F;a&gt; is 50% OFF — grep, sed, awk, perl and ruby one-liners, coreutils, cli computing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Updated ebook for &lt;strong&gt;Vim version 9.1&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Corrected typos&lt;&#x2F;li&gt;
&lt;li&gt;Some of the examples, descriptions and external links were updated&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;4ybTvTr3SQc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLTv2U3HnAL4NN2tK-59ZiNBm-o64-Yvos&quot;&gt;this playlist&lt;&#x2F;a&gt; for video demos on most of the topics from the ebook.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;testimonials&quot;&gt;Testimonials&lt;a class=&quot;zola-anchor&quot; href=&quot;#testimonials&quot; aria-label=&quot;Anchor link for: testimonials&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Got several suggestions and feedback when &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30684232&quot;&gt;my submission about this book&lt;&#x2F;a&gt; reached the front page of Hacker News.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Great job on this! — rendall&lt;&#x2F;p&gt;
&lt;p&gt;Hi, great work releasing this! Trying to explain vim concisely is always an interesting challenge and I had a great time reading your attempt in this book. I always find it really interesting on how people try to group certain vim functions in a way that makes sense to people that don&#x27;t use vim. I think you cover that idea pretty well in your &#x27;Vim philosophy and features&#x27; section whilst not making it overly abstract and keeping it relatable. — doix&lt;&#x2F;p&gt;
&lt;p&gt;Neat stuff! One piece of feedback is that I would include &amp;quot;+p and &amp;quot;+yy in the copy and paste section. — mrpotato&lt;&#x2F;p&gt;
&lt;p&gt;I learnt regular expression by reading your books, thank you for the great work. — LamJH&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A comment from another &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=31931804&quot;&gt;Hacker News thread&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I stumbled upon your vi post a few days ago, really like the style. Keep it up!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;vim-prank&quot;&gt;Vim prank&lt;a class=&quot;zola-anchor&quot; href=&quot;#vim-prank&quot; aria-label=&quot;Anchor link for: vim-prank&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Did you know that Vim has an &lt;em&gt;easy&lt;&#x2F;em&gt; mode? It can be rather hard to use for those already familiar with Vim modes. I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;mini&#x2F;vim-prank&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; about this mode, which was interesting enough to reach the front page of Hacker News!&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;Insert mode&lt;&#x2F;li&gt;
&lt;li&gt;Normal mode&lt;&#x2F;li&gt;
&lt;li&gt;Command-line mode&lt;&#x2F;li&gt;
&lt;li&gt;Visual mode&lt;&#x2F;li&gt;
&lt;li&gt;Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Macro&lt;&#x2F;li&gt;
&lt;li&gt;Customizing Vim&lt;&#x2F;li&gt;
&lt;li&gt;CLI options&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&lt;&#x2F;a&gt; for markdown source and other details related to the book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tools, free ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;echo &#x27;bGVhcm5ieWV4YW1wbGUubmV0QGdtYWlsLmNvbQo=&#x27; | base64 --decode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Basic examples for the Linux date command</title>
		<published>2024-07-31T00:00:00+00:00</published>
		<updated>2024-08-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/linux-date-command-examples/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/linux-date-command-examples/</id>
		<content type="html">&lt;p&gt;I rarely ever use the &lt;code&gt;date&lt;&#x2F;code&gt; command, but when I need it I almost always struggle to get the right incantation. So, I&#x27;m just going to record such examples in this blog post (and some good to know features).&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;ll also be learning resources linked at the end of the post.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;really-basic-examples&quot;&gt;Really basic examples&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;date&lt;&#x2F;code&gt; command by itself shows the current time. But that&#x27;s rarely what I need, since I could just use the calendar widget at the bottom of my desktop screen. Perhaps useful to copy the string format and modify system time with the &lt;code&gt;-s&lt;&#x2F;code&gt; option?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use the -u option for UTC (Coordinated Universal Time)
&lt;&#x2F;span&gt;&lt;span&gt;$ date
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Wednesday &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;31 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;July &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2024 03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;01 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;PM IST
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead, I need particular parts in a particular format. For example, to represent the time component in a dynamically constructed filename as part of a shell script.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: date +%F or date -I
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-%&lt;&#x2F;span&gt;&lt;span&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-%&lt;&#x2F;span&gt;&lt;span&gt;d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2024&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;31
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;%m&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2024&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;31
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+%&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-%&lt;&#x2F;span&gt;&lt;span&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-%&lt;&#x2F;span&gt;&lt;span&gt;d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;31
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use &amp;#39;b&amp;#39; and &amp;#39;B&amp;#39; for month names
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+%&lt;&#x2F;span&gt;&lt;span&gt;a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Wed
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Wednesday
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use &lt;code&gt;%x&lt;&#x2F;code&gt; to get the locale representation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;%x
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;31&#x2F;07&#x2F;24
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For hours, minutes and seconds:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: date +%T
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;H:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;M:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;S
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;32
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: date +%Y-%m-%dT%H:%M:%S%:z
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Iseconds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2024&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;31T16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;09&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;27&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;displaying-and-converting-epoch-seconds&quot;&gt;Displaying and converting epoch seconds&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# total seconds since the epoch (1970-01-01 00:00:00 UTC)
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;%s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;1722422393
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1722422393 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%F %T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2024&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;31 16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;09&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;53
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also provide an input file for conversion using the &lt;code&gt;-f&lt;&#x2F;code&gt; option:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat epochs.txt
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0000000000
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1234567890
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2222222222
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# recall that the -u option gives you UTC
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;f epochs.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%F %T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1970&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;01 00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2009&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;13 23&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;30
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2040&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;06&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;02 03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;57&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;02
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;date-arithmetic&quot;&gt;Date arithmetic&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;I
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2024&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;02
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;+1 month 4 days&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Friday &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;06 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;September &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2024 01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;44 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;PM IST
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: date -d &amp;#39;-20 days&amp;#39; +%F
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# you can also use &amp;#39;20 days ago&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;I &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;-20 days&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2024&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;13
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; newsletter, I use a script to generate a template issue. I use the arithmetic feature as shown below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# prev_date variable gets the value from the previous newsletter issue
&lt;&#x2F;span&gt;&lt;span&gt;$ prev_date=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2024-02-23&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$prev_date&amp;quot;&amp;#39; +7 days&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2024&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;01
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;resource-links&quot;&gt;Resource links&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;coreutils&#x2F;manual&#x2F;coreutils.html#date-invocation&quot;&gt;GNU date command manual&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;tagged&#x2F;date?tab=Votes&quot;&gt;Top voted Q&amp;amp;A on unix.stackexchange for the date command tag&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Linux Command Line Computing book announcement</title>
		<published>2024-05-29T00:00:00+00:00</published>
		<updated>2024-05-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/linux-command-line-computing-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/linux-command-line-computing-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I am pleased to announce a new version of my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Linux Command Line Computing&lt;&#x2F;a&gt; ebook. This is the longest book I&#x27;ve published so far (204 pages) — it took me more than 7 months to complete the first version and another month for a minor revision.&lt;&#x2F;p&gt;
&lt;p&gt;This ebook aims to teach &lt;strong&gt;Linux command line tools and Shell Scripting&lt;&#x2F;strong&gt; for &lt;strong&gt;beginner to intermediate&lt;&#x2F;strong&gt; level users. The main focus is towards &lt;strong&gt;managing your files&lt;&#x2F;strong&gt; and performing &lt;strong&gt;text processing tasks&lt;&#x2F;strong&gt;. Plenty of &lt;strong&gt;examples&lt;&#x2F;strong&gt; are provided to make it easier to understand a particular tool and its various features. &lt;strong&gt;Exercises&lt;&#x2F;strong&gt; at the end of chapters will help you practice what you&#x27;ve learned and &lt;strong&gt;solutions&lt;&#x2F;strong&gt; are provided for reference. I hope this ebook would make it much easier for you to discover CLI tools, features and learning resources than my own blundering experience.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of the ebook for FREE till 9-June-2024. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;cli_computing&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;cli_computing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;cli_computing&#x2F;c&#x2F;new_cli_computing_release&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;cli_computing&#x2F;c&#x2F;new_cli_computing_release&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some of my bundles are on sale as well:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;new_cli_computing_release&quot;&gt;All books bundle&lt;&#x2F;a&gt; is $12 (normal price $32) — all my 13 programming ebooks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;linux-cli-text-processing&#x2F;new_cli_computing_release&quot;&gt;Linux CLI Text Processing&lt;&#x2F;a&gt; bundle is $7 (normal price $20) — Linux CLI tools, shell scripting, grep, sed, awk, perl and ruby one-liners&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Some of the examples, exercises, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;Linux Command Line Computing&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a short video about the &lt;strong&gt;Linux Command Line Computing&lt;&#x2F;strong&gt; ebook:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;vedRFbWwx_c&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;testimonials&quot;&gt;Testimonials&lt;a class=&quot;zola-anchor&quot; href=&quot;#testimonials&quot; aria-label=&quot;Anchor link for: testimonials&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Ive only gotten through first pages but appears a good Unix&#x2F;bash primer. I’ll probably recommend for new hires out of bootcamp because they’re usually weak here&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Lizziness&#x2F;status&#x2F;1589866691974291456&quot;&gt;feedback on twitter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Nice book! I just started trying to get into linux today and you have some tips I haven’t found elsewhere and the text is an enjoyable read so far.&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;linux4noobs&#x2F;comments&#x2F;1adrx6c&#x2F;linux_guide_for_beginners&#x2F;kk3dypr&#x2F;&quot;&gt;feedback on reddit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction and Setup&lt;&#x2F;li&gt;
&lt;li&gt;Command Line Overview&lt;&#x2F;li&gt;
&lt;li&gt;Managing Files and Directories&lt;&#x2F;li&gt;
&lt;li&gt;Shell Features&lt;&#x2F;li&gt;
&lt;li&gt;Viewing Part or Whole File Contents&lt;&#x2F;li&gt;
&lt;li&gt;Searching Files and Filenames&lt;&#x2F;li&gt;
&lt;li&gt;File Properties&lt;&#x2F;li&gt;
&lt;li&gt;Managing Processes&lt;&#x2F;li&gt;
&lt;li&gt;Multipurpose Text Processing Tools&lt;&#x2F;li&gt;
&lt;li&gt;Sorting Stuff&lt;&#x2F;li&gt;
&lt;li&gt;Comparing Files&lt;&#x2F;li&gt;
&lt;li&gt;Assorted Text Processing Tools&lt;&#x2F;li&gt;
&lt;li&gt;Shell Scripting&lt;&#x2F;li&gt;
&lt;li&gt;Shell Customization&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli-computing&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli-computing&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&lt;&#x2F;a&gt; for markdown source, example files, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tools, free ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;echo &#x27;bGVhcm5ieWV4YW1wbGUubmV0QGdtYWlsLmNvbQo=&#x27; | base64 --decode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Interactive GNU awk tutorial</title>
		<published>2024-04-30T00:00:00+00:00</published>
		<updated>2024-04-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/interactive-awk-tutorial/" type="text/html"/>
		<id>https://learnbyexample.github.io/interactive-awk-tutorial/</id>
		<content type="html">&lt;p&gt;Know command line basics and want to learn the &lt;code&gt;GNU awk&lt;&#x2F;code&gt; command? Check out my interactive &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;AwkTutorial&quot;&gt;TUI app&lt;&#x2F;a&gt; that gives a brief tour of this popular text processing command.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;AwkTutorial&#x2F;awk_tutorial.png&quot; alt=&quot;Sample screenshot for interactive awk tutorial&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This app is available on PyPI as &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;awktutorial&#x2F;&quot;&gt;awktutorial&lt;&#x2F;a&gt;. Example installation instructions are shown below, adjust them based on your preferences and OS.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# virtual environment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; venv textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; source bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pip install awktutorial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# launch the app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; awktutorial
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To run the app without having to enter the virtual environment again, add this alias to &lt;code&gt;.bashrc&lt;&#x2F;code&gt; (or equivalent):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# you&amp;#39;ll have to change the path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;awktutorial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;textual_apps&#x2F;bin&#x2F;awktutorial&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an alternative to manually managing such virtual environments, you can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&lt;&#x2F;a&gt; instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pipx install awktutorial
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; awktutorial
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As yet another alternative, you can install &lt;code&gt;textual&lt;&#x2F;code&gt; (see &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;getting_started&#x2F;&quot;&gt;Textual documentation&lt;&#x2F;a&gt; for more details), clone my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&quot;&gt;TUI-apps repository&lt;&#x2F;a&gt; repository and run the &lt;code&gt;awk_tutorial.py&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;Adjust the terminal dimensions for the widgets to appear properly, for example 84x25 (characters x lines).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;ebook&quot;&gt;Ebook&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook&quot; aria-label=&quot;Anchor link for: ebook&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; ebook to learn &lt;code&gt;GNU awk&lt;&#x2F;code&gt; with hundreds of examples and exercises.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d highly appreciate your feedback. Please file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;issues&quot;&gt;an issue&lt;&#x2F;a&gt; if there are bugs, crashes, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Hope you&#x27;ll find this TUI app useful. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI computation with GNU datamash</title>
		<published>2024-04-09T00:00:00+00:00</published>
		<updated>2024-08-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/cli-computation-gnu-datamash/" type="text/html"/>
		<id>https://learnbyexample.github.io/cli-computation-gnu-datamash/</id>
		<content type="html">&lt;p&gt;I&#x27;m hoping this post will serve as a quick reference for some of the use cases and tickle your curiosity if you haven&#x27;t come across this nifty CLI text processing tool yet. There are also links for further reading at the end.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation-and-documentation&quot;&gt;Installation and Documentation&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation-and-documentation&quot; aria-label=&quot;Anchor link for: installation-and-documentation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;datamash&#x2F;download&#x2F;&quot;&gt;download&lt;&#x2F;a&gt; page for source code and instructions to install the software on various platforms. This blog post is based on the &lt;strong&gt;1.8&lt;&#x2F;strong&gt; version.&lt;&#x2F;p&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;datamash&#x2F;manual&#x2F;&quot;&gt;datamash manual&lt;&#x2F;a&gt; for links to documentation in HTML, plain text, PDF, etc.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;sum&quot;&gt;Sum&lt;a class=&quot;zola-anchor&quot; href=&quot;#sum&quot; aria-label=&quot;Anchor link for: sum&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# file with a single number per line
&lt;&#x2F;span&gt;&lt;span&gt;$ cat nums.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10101
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75
&lt;&#x2F;span&gt;&lt;span&gt;$ datamash sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;nums.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10062.86
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;3.14 42 1000 -51&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; tr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39; &amp;#39;\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; datamash sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;994.14
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# summing a particular column
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# tab is the default field separator
&lt;&#x2F;span&gt;&lt;span&gt;$ cat table.txt
&lt;&#x2F;span&gt;&lt;span&gt;brown bread mat hair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;blue cake mug shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;yellow banana window shoes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;span&gt;$ datamash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;table.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;38.14
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Other such operations include &lt;code&gt;count&lt;&#x2F;code&gt;, &lt;code&gt;min&lt;&#x2F;code&gt;, &lt;code&gt;max&lt;&#x2F;code&gt;, &lt;code&gt;mean&lt;&#x2F;code&gt;, &lt;code&gt;median&lt;&#x2F;code&gt;, &lt;code&gt;sstdev&lt;&#x2F;code&gt; (standard deviation), etc.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;transpose&quot;&gt;Transpose&lt;a class=&quot;zola-anchor&quot; href=&quot;#transpose&quot; aria-label=&quot;Anchor link for: transpose&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat scores.csv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Maths&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Physics&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Chemistry
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ith&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Cy&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;98&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;95
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Lin&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Er&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;90
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ datamash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;t, transpose &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;scores.csv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ith&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Cy&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Lin&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Er
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Maths&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Physics&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;98&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;70
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Chemistry&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;95&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;90
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;group-by&quot;&gt;Group by&lt;a class=&quot;zola-anchor&quot; href=&quot;#group-by&quot; aria-label=&quot;Anchor link for: group-by&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can use the &lt;code&gt;-g&lt;&#x2F;code&gt; option to group items based on one or more columns. You can specify an operation such as &lt;code&gt;collapse&lt;&#x2F;code&gt;, &lt;code&gt;sum&lt;&#x2F;code&gt;, &lt;code&gt;mean&lt;&#x2F;code&gt;, &lt;code&gt;count&lt;&#x2F;code&gt; and so on. See &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;q&#x2F;779049&#x2F;109046&quot;&gt;Grouping rows by categories avoiding repetition&lt;&#x2F;a&gt; for an example with &lt;code&gt;unique&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# here, the first column items are already next to each other
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# so, sorting is not needed
&lt;&#x2F;span&gt;&lt;span&gt;$ cat toys.txt
&lt;&#x2F;span&gt;&lt;span&gt;car blue
&lt;&#x2F;span&gt;&lt;span&gt;car red
&lt;&#x2F;span&gt;&lt;span&gt;car yellow
&lt;&#x2F;span&gt;&lt;span&gt;truck brown
&lt;&#x2F;span&gt;&lt;span&gt;bus green
&lt;&#x2F;span&gt;&lt;span&gt;bus maroon
&lt;&#x2F;span&gt;&lt;span&gt;rocket white
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# by default a comma is used as the separator between collapsed items
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use &amp;#39;unique&amp;#39; instead of &amp;#39;collapse&amp;#39; to avoid duplicates
&lt;&#x2F;span&gt;&lt;span&gt;$ datamash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;g1 collapse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;toys.txt
&lt;&#x2F;span&gt;&lt;span&gt;car blue,red,yellow
&lt;&#x2F;span&gt;&lt;span&gt;truck brown
&lt;&#x2F;span&gt;&lt;span&gt;bus green,maroon
&lt;&#x2F;span&gt;&lt;span&gt;rocket white
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;count&amp;#39; gives the number of items for the collapsed row
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;rand&amp;#39; selects a random item for such collapsed rows
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;first&amp;#39; and &amp;#39;last&amp;#39; are other choices available
&lt;&#x2F;span&gt;&lt;span&gt;$ datamash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;g1 count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;rand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;toys.txt
&lt;&#x2F;span&gt;&lt;span&gt;car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; red
&lt;&#x2F;span&gt;&lt;span&gt;truck &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; brown
&lt;&#x2F;span&gt;&lt;span&gt;bus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; green
&lt;&#x2F;span&gt;&lt;span&gt;rocket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; white
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an example with header lines as well as having to sort the input (&lt;code&gt;-s&lt;&#x2F;code&gt;). The &lt;code&gt;-c&lt;&#x2F;code&gt; option helps to customize the separator for the grouped items. The &lt;code&gt;-H&lt;&#x2F;code&gt; option is equivalent to using both &lt;code&gt;--header-in&lt;&#x2F;code&gt; and &lt;code&gt;--header-out&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;$ cat books.txt
&lt;&#x2F;span&gt;&lt;span&gt;Author,Title
&lt;&#x2F;span&gt;&lt;span&gt;Will Wight,Cradle
&lt;&#x2F;span&gt;&lt;span&gt;John Bierce,Mage Errant
&lt;&#x2F;span&gt;&lt;span&gt;Brandon Sanderson,Mistborn
&lt;&#x2F;span&gt;&lt;span&gt;Domagoj Kurmaic,Mother of Learning
&lt;&#x2F;span&gt;&lt;span&gt;Brandon Sanderson,The Stormlight Archive
&lt;&#x2F;span&gt;&lt;span&gt;Will Wight,The Last Horizon
&lt;&#x2F;span&gt;&lt;span&gt;Brandon Sanderson,Warbreaker
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# not sure if there&amp;#39;s an option to retain the original header line as is
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# you can instead use: (sed -u 1q; datamash -st, -c: -g1 collapse 2) &amp;lt;books.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use --header-in if you don&amp;#39;t want the header line in the output
&lt;&#x2F;span&gt;&lt;span&gt;$ datamash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;st, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;g1 collapse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;books.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;GroupBy&lt;&#x2F;span&gt;&lt;span&gt;(Author),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;collapse&lt;&#x2F;span&gt;&lt;span&gt;(Title)
&lt;&#x2F;span&gt;&lt;span&gt;Brandon Sanderson,Mistborn:The Stormlight Archive:Warbreaker
&lt;&#x2F;span&gt;&lt;span&gt;Domagoj Kurmaic,Mother of Learning
&lt;&#x2F;span&gt;&lt;span&gt;John Bierce,Mage Errant
&lt;&#x2F;span&gt;&lt;span&gt;Will Wight,Cradle:The Last Horizon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an example of summing values based on column 3 items:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat duplicates.csv
&lt;&#x2F;span&gt;&lt;span&gt;brown,toy,bread,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;dark red,ruby,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;111
&lt;&#x2F;span&gt;&lt;span&gt;blue,ruby,water,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;dark red,sky,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;555
&lt;&#x2F;span&gt;&lt;span&gt;yellow,toy,flower,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;white,sky,bread,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;111
&lt;&#x2F;span&gt;&lt;span&gt;light red,purse,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ datamash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;st, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;g3 sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;duplicates.csv
&lt;&#x2F;span&gt;&lt;span&gt;bread,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;153
&lt;&#x2F;span&gt;&lt;span&gt;flower,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;999
&lt;&#x2F;span&gt;&lt;span&gt;water,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Average marks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat result.csv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Amy&lt;&#x2F;span&gt;&lt;span&gt;,maths,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;90
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Amy&lt;&#x2F;span&gt;&lt;span&gt;,physics,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Joe&lt;&#x2F;span&gt;&lt;span&gt;,maths,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;79
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;,chemistry,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;77
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;,physics,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;91
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Moe&lt;&#x2F;span&gt;&lt;span&gt;,maths,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;81
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ravi&lt;&#x2F;span&gt;&lt;span&gt;,physics,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;84
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ravi&lt;&#x2F;span&gt;&lt;span&gt;,chemistry,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;70
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Yui&lt;&#x2F;span&gt;&lt;span&gt;,maths,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ datamash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;t, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;g1 mean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;result.csv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Amy&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;82.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Joe&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;79
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;84
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Moe&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;81
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ravi&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;77
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Yui&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;a class=&quot;zola-anchor&quot; href=&quot;#further-reading&quot; aria-label=&quot;Anchor link for: further-reading&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;datamash&#x2F;alternatives&#x2F;&quot;&gt;Alternative one-liners&lt;&#x2F;a&gt; — examples with datamash compared to &lt;code&gt;awk&lt;&#x2F;code&gt;, &lt;code&gt;perl&lt;&#x2F;code&gt;, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;datamash&#x2F;examples&#x2F;&quot;&gt;Documentation examples&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;xsv&quot;&gt;xsv&lt;&#x2F;a&gt; — fast CSV command line toolkit&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI text processing with GNU Coreutils book announcement</title>
		<published>2024-04-03T00:00:00+00:00</published>
		<updated>2024-05-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/cli-text-processing-coreutils-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/cli-text-processing-coreutils-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I am pleased to announce a new version of my &lt;strong&gt;CLI text processing with GNU Coreutils&lt;&#x2F;strong&gt; ebook. Examples, descriptions and external links were updated&#x2F;corrected and 100+ exercises were added.&lt;&#x2F;p&gt;
&lt;p&gt;You might be already aware of popular coreutils commands like &lt;code&gt;head&lt;&#x2F;code&gt;, &lt;code&gt;tail&lt;&#x2F;code&gt;, &lt;code&gt;tr&lt;&#x2F;code&gt;, &lt;code&gt;sort&lt;&#x2F;code&gt; and so on. This book will teach you more than twenty of such specialized text processing tools provided by the &lt;code&gt;GNU coreutils&lt;&#x2F;code&gt; package.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of the ebook for FREE till 10-April-2024. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;cli_coreutils&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;cli_coreutils&#x2F;c&#x2F;new_coreutils_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The following bundles are heavily discounted:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;new_coreutils_release&quot;&gt;All books bundle&lt;&#x2F;a&gt; is $12 (normal price $32)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;linux-cli-text-processing&#x2F;new_coreutils_release&quot;&gt;Linux CLI Text Processing&lt;&#x2F;a&gt; bundle is $6 (normal price $20)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GNU coreutils&lt;&#x2F;code&gt; package version updated to &lt;strong&gt;9.1&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Added 100+ exercises&lt;&#x2F;li&gt;
&lt;li&gt;In general, many of the examples, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;CLI text processing with GNU Coreutils&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;oCnJLu_PUbY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;testimonials&quot;&gt;Testimonials&lt;a class=&quot;zola-anchor&quot; href=&quot;#testimonials&quot; aria-label=&quot;Anchor link for: testimonials&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In my opinion the book does a great job of quickly presenting examples of how commands can be used and then paired up to achieve new or interesting ways of manipulating data. Throughout the text there are little highlights offering tips on extra functionality or limitations of certain commands. For instance, when discussing the &lt;em&gt;shuf&lt;&#x2F;em&gt; command we&#x27;re warned that &lt;em&gt;shuf&lt;&#x2F;em&gt; will not work with multiple files. However, we can merge multiple files together (using the &lt;em&gt;cat&lt;&#x2F;em&gt; command) and then pass them to &lt;em&gt;shuf&lt;&#x2F;em&gt;. These little gems of wisdom add a dimension to the book and will likely save the reader some time wondering why their scripts are not working as expected.&lt;&#x2F;p&gt;
&lt;p&gt;— book review by Jesse Smith on &lt;a href=&quot;https:&#x2F;&#x2F;distrowatch.com&#x2F;weekly.php?issue=20211206#book&quot;&gt;distrowatch.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I discovered your books recently and they’re awesome, thank you! As a 20 year *nix they made me realize how much more there are to these rock solid and ancient tools, once you spend the time to actually learn the intricacies of them.&lt;&#x2F;p&gt;
&lt;p&gt;— feedback on &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;commandline&#x2F;comments&#x2F;1byumd6&#x2F;learn_gnu_coreutils_text_processing_tools_like&#x2F;l2pk5bd&#x2F;&quot;&gt;reddit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;cat and tac&lt;&#x2F;li&gt;
&lt;li&gt;head and tail&lt;&#x2F;li&gt;
&lt;li&gt;tr&lt;&#x2F;li&gt;
&lt;li&gt;cut&lt;&#x2F;li&gt;
&lt;li&gt;seq&lt;&#x2F;li&gt;
&lt;li&gt;shuf&lt;&#x2F;li&gt;
&lt;li&gt;paste&lt;&#x2F;li&gt;
&lt;li&gt;pr&lt;&#x2F;li&gt;
&lt;li&gt;fold and fmt&lt;&#x2F;li&gt;
&lt;li&gt;sort&lt;&#x2F;li&gt;
&lt;li&gt;uniq&lt;&#x2F;li&gt;
&lt;li&gt;comm&lt;&#x2F;li&gt;
&lt;li&gt;join&lt;&#x2F;li&gt;
&lt;li&gt;nl&lt;&#x2F;li&gt;
&lt;li&gt;wc&lt;&#x2F;li&gt;
&lt;li&gt;split&lt;&#x2F;li&gt;
&lt;li&gt;csplit&lt;&#x2F;li&gt;
&lt;li&gt;expand and unexpand&lt;&#x2F;li&gt;
&lt;li&gt;basename and dirname&lt;&#x2F;li&gt;
&lt;li&gt;What next?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;introduction.html&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;introduction.html&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&lt;&#x2F;a&gt; for markdown source, example files, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tools, free ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;echo &#x27;bGVhcm5ieWV4YW1wbGUubmV0QGdtYWlsLmNvbQo=&#x27; | base64 --decode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ruby One-Liners Guide book announcement</title>
		<published>2024-02-20T00:00:00+00:00</published>
		<updated>2024-02-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/ruby-oneliners-guide-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/ruby-oneliners-guide-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I am pleased to announce a new version of my &lt;strong&gt;Ruby One-Liners Guide&lt;&#x2F;strong&gt; ebook. Examples, exercises, solutions, descriptions and external links were added&#x2F;updated&#x2F;corrected.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to command line text processing, there are several well known tools like &lt;code&gt;grep&lt;&#x2F;code&gt; for filtering, &lt;code&gt;sed&lt;&#x2F;code&gt; for substitution and &lt;code&gt;awk&lt;&#x2F;code&gt; for field processing. Compared to such tools, &lt;strong&gt;Ruby has a feature rich regular expression engine, plenty of builtin modules and a thriving ecosystem&lt;&#x2F;strong&gt;. Another advantage is that Ruby is more &lt;strong&gt;portable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This ebook will show examples for filtering and substitution features, field processing, using standard and third-party modules, multiple file processing, how to construct solutions that depend on multiple records, how to compare records and fields between two or more files, how to identify duplicates while maintaining input order and so on.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of &lt;strong&gt;Ruby One-Liners Guide&lt;&#x2F;strong&gt; for FREE till 29-February-2024. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;ruby-oneliners&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;ruby-oneliners&#x2F;c&#x2F;new_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Ruby Text Processing&lt;&#x2F;strong&gt; bundle is free as well:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;ruby-textprocessing&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;ruby-textprocessing&#x2F;c&#x2F;new_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So is the &lt;strong&gt;Magical one-liners&lt;&#x2F;strong&gt; bundle:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;oneliners&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;oneliners&#x2F;c&#x2F;new_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Command version updated to &lt;strong&gt;Ruby 3.3.0&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Added more exercises&lt;&#x2F;li&gt;
&lt;li&gt;Long sections split into smaller ones&lt;&#x2F;li&gt;
&lt;li&gt;In general, many of the examples, exercises, solutions, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;Ruby One-Liners Guide&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;nsWVepZruws&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;testimonials&quot;&gt;Testimonials&lt;a class=&quot;zola-anchor&quot; href=&quot;#testimonials&quot; aria-label=&quot;Anchor link for: testimonials&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This Ruby one-liners cookbook is incredible. Pretty mind boggling all the stuff you can do.&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jbrancha&#x2F;status&#x2F;1506766118756786189&quot;&gt;feedback on twitter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;One-liner introduction&lt;&#x2F;li&gt;
&lt;li&gt;Line processing&lt;&#x2F;li&gt;
&lt;li&gt;Field separators&lt;&#x2F;li&gt;
&lt;li&gt;Record separators&lt;&#x2F;li&gt;
&lt;li&gt;Multiple file input&lt;&#x2F;li&gt;
&lt;li&gt;Processing multiple records&lt;&#x2F;li&gt;
&lt;li&gt;Two file processing&lt;&#x2F;li&gt;
&lt;li&gt;Dealing with duplicates&lt;&#x2F;li&gt;
&lt;li&gt;Processing structured data&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_ruby_oneliners&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_ruby_oneliners&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_ruby_oneliners&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_ruby_oneliners&lt;&#x2F;a&gt; for markdown source, example files, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tools, ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_ruby_oneliners&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_ruby_oneliners&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;echo &#x27;bGVhcm5ieWV4YW1wbGUubmV0QGdtYWlsLmNvbQo=&#x27; | base64 --decode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Understanding Ruby Regexp book announcement</title>
		<published>2024-02-02T00:00:00+00:00</published>
		<updated>2024-02-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/understanding-ruby-regexp-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/understanding-ruby-regexp-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I just published a new version of the &amp;quot;&lt;strong&gt;Understanding Ruby Regexp&lt;&#x2F;strong&gt;&amp;quot; ebook. Corrected examples and descriptions for Atomic grouping, &lt;code&gt;\G&lt;&#x2F;code&gt; and &lt;code&gt;\K&lt;&#x2F;code&gt; features, improved examples, exercises and so on.&lt;&#x2F;p&gt;
&lt;p&gt;This book will help you learn &lt;strong&gt;Ruby Regular Expressions&lt;&#x2F;strong&gt; step-by-step from beginner to advanced levels with &lt;strong&gt;hundreds of examples and exercises&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;ebook-links&quot;&gt;Ebook links&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook-links&quot; aria-label=&quot;Anchor link for: ebook-links&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can download the PDF&#x2F;EPUB versions of the book for free using the below links (you can also pay if you wish):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;rubyregexp&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;rubyregexp&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;Ruby_Regexp&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;Ruby_Regexp&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Ruby version updated to &lt;strong&gt;3.3.0&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Corrected examples and descriptions for Atomic grouping, &lt;code&gt;\G&lt;&#x2F;code&gt; and &lt;code&gt;\K&lt;&#x2F;code&gt; features&lt;&#x2F;li&gt;
&lt;li&gt;In general, many of the examples, exercises, solutions, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;Understanding Ruby Regexp&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;li&gt;Images centered for EPUB format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;QNsCzVeZH78&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Why is it needed?&lt;&#x2F;li&gt;
&lt;li&gt;Regexp introduction&lt;&#x2F;li&gt;
&lt;li&gt;Anchors&lt;&#x2F;li&gt;
&lt;li&gt;Alternation and Grouping&lt;&#x2F;li&gt;
&lt;li&gt;Escaping metacharacters&lt;&#x2F;li&gt;
&lt;li&gt;Dot metacharacter and Quantifiers&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Tools for debugging and visualization&lt;&#x2F;li&gt;
&lt;li&gt;Working with matched portions&lt;&#x2F;li&gt;
&lt;li&gt;Character class&lt;&#x2F;li&gt;
&lt;li&gt;Groupings and backreferences&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Common tasks&lt;&#x2F;li&gt;
&lt;li&gt;Lookarounds&lt;&#x2F;li&gt;
&lt;li&gt;Modifiers&lt;&#x2F;li&gt;
&lt;li&gt;Unicode&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Ruby_Regexp&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Ruby_Regexp&lt;&#x2F;a&gt; for markdown source, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tools, ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Ruby_Regexp&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Ruby_Regexp&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;learn by example.net@gmail.com&lt;&#x2F;code&gt; (without the spaces)&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2023: year in perspective</title>
		<published>2023-12-29T00:00:00+00:00</published>
		<updated>2024-01-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/2023-year-in-perspective/" type="text/html"/>
		<id>https://learnbyexample.github.io/2023-year-in-perspective/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt;: Updated six programming ebooks, created four interactive TUI apps for exercises, wrote blog posts, recorded YouTube videos, newsletter prospered, read 100+ novels, and so on. Had a great year in terms of ebook sales despite worries over AI tools 😇&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;books-updated&quot;&gt;Books updated&lt;a class=&quot;zola-anchor&quot; href=&quot;#books-updated&quot; aria-label=&quot;Anchor link for: books-updated&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This year I focused on updating my existing ebooks instead of working on a new one. I managed to revise 6 out of my 13 published works so far. Examples and exercises were added and improved. Typos were corrected, sections added for new features (if any), new book covers, &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLTv2U3HnAL4NdoeZIhEAPgPhojD8kvRdQ&quot;&gt;promo videos&lt;&#x2F;a&gt; and so on.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; — Learn Python Regular Expressions step-by-step from beginner to advanced levels with 300+ examples&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;a&gt; — Example based guide to mastering GNU grep and ripgrep&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;CLI text processing with GNU sed&lt;&#x2F;a&gt; — Example based guide to mastering GNU sed&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; — Example based guide to mastering GNU awk one-liners&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;Perl One-Liners Guide&lt;&#x2F;a&gt; — Example based guide for text processing with Perl from the command line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&quot;&gt;Understanding JavaScript RegExp&lt;&#x2F;a&gt; — Learn JavaScript Regular Expressions step-by-step from beginner to advanced levels with hundreds of examples and exercises&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;tui-apps&quot;&gt;TUI apps&lt;a class=&quot;zola-anchor&quot; href=&quot;#tui-apps&quot; aria-label=&quot;Anchor link for: tui-apps&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Last year, I had learned a bit of &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;&quot;&gt;Textual&lt;&#x2F;a&gt;. My aim was to create interactive apps for practicing exercises from my ebooks. I wrote the following apps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PyRegexExercises&quot;&gt;Python re(gex)? exercises&lt;&#x2F;a&gt; — 100+ exercises for Python Regular Expressions
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PyRegexPlayground&quot;&gt;Python re(gex)? playground&lt;&#x2F;a&gt; — interactive playground, also includes a cheatsheet&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;GrepExercises&quot;&gt;Grep Exercises&lt;&#x2F;a&gt; — 50+ exercises for &lt;code&gt;GNU grep&lt;&#x2F;code&gt; (or alternate implementations like &lt;code&gt;ripgrep&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;SedExercises&quot;&gt;Sed Exercises&lt;&#x2F;a&gt; — 50+ exercises for &lt;code&gt;GNU sed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;AwkExercises&quot;&gt;Awk Exercises&lt;&#x2F;a&gt; — 80+ exercises for &lt;code&gt;GNU awk&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And I also added more exercises for the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;CLI-Exercises&quot;&gt;Linux CLI Text Processing Exercises&lt;&#x2F;a&gt; app.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;blog-posts&quot;&gt;Blog posts&lt;a class=&quot;zola-anchor&quot; href=&quot;#blog-posts&quot; aria-label=&quot;Anchor link for: blog-posts&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Most of my blog posts this year were related to book and interactive app announcements. So, not really a choice to pick favorites from:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;python-regex-surprises&#x2F;&quot;&gt;Python Regex Surprises&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;mini&#x2F;cli-text-editing-with-ed&#x2F;&quot;&gt;CLI text editing with ed&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also posted some &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;weekly programming tips&lt;&#x2F;a&gt; (Python, Linux, Vim).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;book-sales&quot;&gt;Book sales&lt;a class=&quot;zola-anchor&quot; href=&quot;#book-sales&quot; aria-label=&quot;Anchor link for: book-sales&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Revenue from ebook sales were about 10% lower than last year. At the start of the year, I&#x27;d have been satisfied even if it had been 50% lower. I wasn&#x27;t writing new ebooks and AI tools were all the rage on social media. Somehow, I got lucky with self-promotion posts for my &lt;code&gt;GNU awk&lt;&#x2F;code&gt; ebook and the rest of the months weren&#x27;t too shabby. Here&#x27;s my Gumroad revenue chart for 2023:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;gumroad_sales_2023.png&quot; alt=&quot;Gumroad sales in 2023&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can clearly see when the &lt;code&gt;GNU awk&lt;&#x2F;code&gt; ebook was updated. Sales on Gumroad was actually just a bit higher than last year. It was on Leanpub that sales were much lower, almost half compared to last year. Profits reduced more than 10% since Gumroad increased their fees. Overall, I&#x27;m still earning more than I need and I&#x27;m hoping that next year wouldn&#x27;t see too much drop in sales.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I started a newsletter, &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt;, two years back. I&#x27;ve managed to send an email every Friday without fail so far and I&#x27;m proud of that. Sometimes I had to schedule issues weeks ahead. Total subscriber count crossed 1000 earlier this month and some readers are even paying me monthly despite this being a free newsletter.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;fictional-reading&quot;&gt;Fictional reading&lt;a class=&quot;zola-anchor&quot; href=&quot;#fictional-reading&quot; aria-label=&quot;Anchor link for: fictional-reading&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I enjoy reading fantasy and science-fiction novels. I read 100+ SFF books this year despite aiming for less than 100! Anyway, I wrote a post listing &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;escapist-reviews&#x2F;lists&#x2F;2023-favorite-sff-novels&#x2F;&quot;&gt;my favorites here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I even participated in NaNoWriMo. I only wrote 20K words, but I did have some fun. The novel went nowhere though and it is languishing now. Not sure if I&#x27;d get back to it someday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;goals-for-2024&quot;&gt;Goals for 2024&lt;a class=&quot;zola-anchor&quot; href=&quot;#goals-for-2024&quot; aria-label=&quot;Anchor link for: goals-for-2024&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There are seven more books I need to update. Hopefully I get them done in a year, though I won&#x27;t be pushing hard. If I crave to write some new books instead, I&#x27;d switch over to them. Or even do something else entirely. After more than six years writing tutorials and books, I sure can do with a break.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;Here&#x27;s wishing you a very happy, healthy and prosperous 2024 👍 😇&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Festive offers for books on Python, Linux, Regular Expressions and more</title>
		<published>2023-11-18T00:00:00+00:00</published>
		<updated>2023-11-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/programming-deals-2023/" type="text/html"/>
		<id>https://learnbyexample.github.io/programming-deals-2023/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;Here are some exciting deals for my programming ebooks as well as from other creators.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;my-ebooks&quot;&gt;My ebooks&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-ebooks&quot; aria-label=&quot;Anchor link for: my-ebooks&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Offers valid till 30-Nov-2023:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;FestiveOffer&quot;&gt;All 13 Books Bundle&lt;&#x2F;a&gt; — $10 (normal price $32)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&#x2F;FestiveOffer&quot;&gt;Learn by example Python bundle&lt;&#x2F;a&gt; — $4 (normal price $15)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&#x2F;FestiveOffer&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; — FREE (normal price $10)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;FestiveOffer&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;all_books_bundle.png&quot; alt=&quot;All books bundle&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;indie-creators&quot;&gt;Indie creators&lt;a class=&quot;zola-anchor&quot; href=&quot;#indie-creators&quot; aria-label=&quot;Anchor link for: indie-creators&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathspp.gumroad.com&#x2F;l&#x2F;pythonbootcamp&#x2F;bootcampbf23&quot;&gt;Python Problem-Solving Bootcamp&lt;&#x2F;a&gt; — 40% off or purchasing power parity discount whichever is greater&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;driscollis.gumroad.com&#x2F;&quot;&gt;Python books by Michael Driscoll&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.teachmepython.com&#x2F;&quot;&gt;Teach Me Python Membership&lt;&#x2F;a&gt; — 33% off with &lt;code&gt;black23&lt;&#x2F;code&gt; discount code&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;adamchainz.gumroad.com&#x2F;&quot;&gt;Ebooks on Django and Git&lt;&#x2F;a&gt; — 50% off, plus purchasing power parity if applicable
&lt;ul&gt;
&lt;li&gt;see also author&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;adamj.eu&#x2F;tech&#x2F;2023&#x2F;11&#x2F;20&#x2F;django-black-friday-deals-2023&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; for links to other Django-related deals&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thepythoncodingplace.thinkific.com&#x2F;bundles&#x2F;the-python-coding-place-membership&quot;&gt;The Python Coding Place Membership&lt;&#x2F;a&gt; — 70% off&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pythonmorsels.com&#x2F;lifetime-access-sale&#x2F;&quot;&gt;Python Morsels Membership&lt;&#x2F;a&gt; — lifetime access for the price of 2 years
&lt;ul&gt;
&lt;li&gt;see also author&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;treyhunner.com&#x2F;2023&#x2F;11&#x2F;python-black-friday-and-cyber-monday-sales-2023&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; for links to other Python deals&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bhavaniravi.gumroad.com&#x2F;l&#x2F;LaFSj&#x2F;P2PBLACK2023&quot;&gt;Python To Projects - 5 Week Online Course&lt;&#x2F;a&gt; — 25% off&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lernerpython.com&#x2F;bfcm-2023&#x2F;&quot;&gt;Python books by Reuven Lerner&lt;&#x2F;a&gt; — 40% off&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wizardzines.com&#x2F;&quot;&gt;wizard zines&lt;&#x2F;a&gt; — 50% off on PDFs, 30% off on print versions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shrutibalasa.gumroad.com&#x2F;l&#x2F;level-up-with-tailwind-css&#x2F;blackfriday23&quot;&gt;Level up with Tailwind CSS&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;shrutibalasa.gumroad.com&#x2F;l&#x2F;css-flex-and-grid&#x2F;blackfriday23&quot;&gt;Complete Guide to CSS Flex and Grid&lt;&#x2F;a&gt; — 50% off&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;a class=&quot;zola-anchor&quot; href=&quot;#miscellaneous&quot; aria-label=&quot;Anchor link for: miscellaneous&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;blog&#x2F;2023-holiday-gift-guide&quot;&gt;NoStarch Press&lt;&#x2F;a&gt; — 35% off with &lt;code&gt;DEALS4DAYS&lt;&#x2F;code&gt; code&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;media.pragprog.com&#x2F;newsletters&#x2F;2023-11-17.html&quot;&gt;The Pragmatic Bookshelf&lt;&#x2F;a&gt; — 40% off on all ebooks and audio books&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;deals.manning.com&#x2F;buy-2-save-50&#x2F;&quot;&gt;Manning Publications&lt;&#x2F;a&gt; — save 50% when you buy 2 or more MEAPs, eBooks, pBooks, liveProjects, or liveVideos&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x90n&#x2F;InfoSec-Black-Friday&quot;&gt;InfoSec Hack Friday&lt;&#x2F;a&gt; — InfoSec related software&#x2F;tools&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;opsdisk.gumroad.com&#x2F;l&#x2F;cphlab&#x2F;blackfriday2023&quot;&gt;The Cyber Plumber&#x27;s Lab Guide and Interactive Access&lt;&#x2F;a&gt; — 33% OFF&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mailchi.mp&#x2F;leanpub&#x2F;monthly-sale-2023-black-friday&quot;&gt;Leanpub Monthly Sale&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;mailchi.mp&#x2F;leanpub&#x2F;weekly-sale-2023-black-friday&quot;&gt;Leanpub Weekly Sale&lt;&#x2F;a&gt; — offers for programming books, bundles and courses&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;trungdq88&#x2F;Awesome-Black-Friday-Cyber-Monday&quot;&gt;Huge list of awesome deals&lt;&#x2F;a&gt; — tools, productivity, books, courses, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blackfridaydeals.dev&#x2F;&quot;&gt;blackfridaydeals.dev&lt;&#x2F;a&gt; — Hottest Black Friday Deals for Developers&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.diversifytech.com&#x2F;black-friday-deals-2023-savings-on-tech-books-and-courses&#x2F;&quot;&gt;Black Friday Deals&lt;&#x2F;a&gt; — Savings on Tech Books and Courses&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Understanding JavaScript RegExp book announcement</title>
		<published>2023-10-26T00:00:00+00:00</published>
		<updated>2023-10-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/understanding-javascript-regexp-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/understanding-javascript-regexp-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I just published a new version of &amp;quot;&lt;strong&gt;Understanding JavaScript RegExp&lt;&#x2F;strong&gt;&amp;quot; ebook. Added examples for &lt;code&gt;d&lt;&#x2F;code&gt; and &lt;code&gt;v&lt;&#x2F;code&gt; flags, corrected many mistakes, improved examples, exercises and so on.&lt;&#x2F;p&gt;
&lt;p&gt;This book will help you learn &lt;strong&gt;JavaScript Regular Expressions&lt;&#x2F;strong&gt; step-by-step from beginner to advanced levels with &lt;strong&gt;hundreds of examples and exercises&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of &lt;strong&gt;Understanding JavaScript RegExp&lt;&#x2F;strong&gt; for FREE till 05-Nov-2023. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;js_regexp&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;js_regexp&#x2F;c&#x2F;new_js_regexp_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;All Books Bundle&lt;&#x2F;strong&gt; is just $12 (normal price $32) — includes all my 13 programming ebooks.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;new_js_regexp_release&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;learnbyexample-all-books&#x2F;c&#x2F;new_js_regexp_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Examples and exercises added for &lt;code&gt;d&lt;&#x2F;code&gt; and &lt;code&gt;v&lt;&#x2F;code&gt; flags&lt;&#x2F;li&gt;
&lt;li&gt;Strings in code snippets changed to be uniformly represented in single quotes&lt;&#x2F;li&gt;
&lt;li&gt;In general, many of the examples, exercises, solutions, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;Understanding JavaScript RegExp&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;li&gt;Images centered for EPUB format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;8X-hUel3GxM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;testimonials&quot;&gt;Testimonials&lt;a class=&quot;zola-anchor&quot; href=&quot;#testimonials&quot; aria-label=&quot;Anchor link for: testimonials&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Literally was having a mini-breakdown about not understanding Regex in algorithm solutions the other day and now I&#x27;m feeling so much better, so thank YOU! I genuinely feel like I&#x27;m developing the skill for spotting when and where to use them after so much practice!&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;codingwithlucy&#x2F;status&#x2F;1450668315635036160&quot;&gt;feedback on twitter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Why is it needed?&lt;&#x2F;li&gt;
&lt;li&gt;RegExp introduction&lt;&#x2F;li&gt;
&lt;li&gt;Anchors&lt;&#x2F;li&gt;
&lt;li&gt;Alternation and Grouping&lt;&#x2F;li&gt;
&lt;li&gt;Escaping metacharacters&lt;&#x2F;li&gt;
&lt;li&gt;Dot metacharacter and Quantifiers&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Tools for debugging and visualization&lt;&#x2F;li&gt;
&lt;li&gt;Working with matched portions&lt;&#x2F;li&gt;
&lt;li&gt;Character class&lt;&#x2F;li&gt;
&lt;li&gt;Groupings and backreferences&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Common tasks&lt;&#x2F;li&gt;
&lt;li&gt;Lookarounds&lt;&#x2F;li&gt;
&lt;li&gt;Unicode&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_js_regexp&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_js_regexp&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&lt;&#x2F;a&gt; for markdown source, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tools, free ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;learn by example.net@gmail.com&lt;&#x2F;code&gt; (without the spaces)&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI text editing with ed</title>
		<published>2023-10-17T00:00:00+00:00</published>
		<updated>2024-03-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/cli-text-editing-with-ed/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/cli-text-editing-with-ed/</id>
		<content type="html">&lt;p&gt;I&#x27;m finally writing a post on the &lt;code&gt;ed&lt;&#x2F;code&gt; command. And I&#x27;m keeping it short so that I&#x27;ll actually publish the post. The examples presented below will be easier to understand for those already familiar with Vim and &lt;code&gt;sed&lt;&#x2F;code&gt;. See the links at the end for learning resources.&lt;&#x2F;p&gt;
&lt;p&gt;Although I&#x27;m interested in getting to know &lt;code&gt;ed&lt;&#x2F;code&gt; better, I don&#x27;t really find myself in situations where it&#x27;d help me. But, I have used it a few times to answer questions on stackoverflow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;moving-lines&quot;&gt;Moving lines&lt;&#x2F;h2&gt;
&lt;p&gt;Consider this sample input file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;fig
&lt;&#x2F;span&gt;&lt;span&gt;mango
&lt;&#x2F;span&gt;&lt;span&gt;pineapple
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Suppose, you want to move the third line to the top. If you are using Vim, you can execute &lt;code&gt;:3m0&lt;&#x2F;code&gt; where &lt;code&gt;3&lt;&#x2F;code&gt; is the input address, &lt;code&gt;m&lt;&#x2F;code&gt; is the &lt;em&gt;move&lt;&#x2F;em&gt; command and &lt;code&gt;0&lt;&#x2F;code&gt; is the target address. To do the same with &lt;code&gt;ed&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;3m0\nwq\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; ed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s ip.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;fig
&lt;&#x2F;span&gt;&lt;span&gt;mango
&lt;&#x2F;span&gt;&lt;span&gt;pineapple
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;3m0&lt;&#x2F;code&gt; part in the above &lt;code&gt;ed&lt;&#x2F;code&gt; command is identical to the Vim solution. After that, another command &lt;code&gt;wq&lt;&#x2F;code&gt; (write and quit) is issued to save the changes (again, Vim users would be familiar with this combination). The &lt;code&gt;-s&lt;&#x2F;code&gt; option suppresses diagnostics and other details. &lt;code&gt;-&lt;&#x2F;code&gt; is used to indicate that the &lt;code&gt;ed&lt;&#x2F;code&gt; script is passed via stdin.&lt;&#x2F;p&gt;
&lt;p&gt;You can also move lines based on a regexp match. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# move the first matching line containing &amp;#39;an&amp;#39; to the top of the file
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;an&#x2F;m0\nwq\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; ed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s ip.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;fig
&lt;&#x2F;span&gt;&lt;span&gt;mango
&lt;&#x2F;span&gt;&lt;span&gt;pineapple
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you want to move all the matching lines, you can use the &lt;code&gt;g&lt;&#x2F;code&gt; command (same as Vim). Note that the first matching line will be moved first, then the next matching line and so on. So the order will be reversed after the move.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;g&#x2F;app&#x2F;m0\nwq\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; ed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s ip.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;pineapple
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;fig
&lt;&#x2F;span&gt;&lt;span&gt;mango
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;67031062&#x2F;4082052&quot;&gt;stackoverflow link&lt;&#x2F;a&gt; that inspired the above examples. See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;75222984&#x2F;4082052&quot;&gt;this stackoverflow answer&lt;&#x2F;a&gt; for more examples of moving lines. See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;48840851&#x2F;4082052&quot;&gt;this one&lt;&#x2F;a&gt; to learn how to copy a particular line to the end of the file. See &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;a&#x2F;759710&#x2F;109046&quot;&gt;this unix.stackexchange answer&lt;&#x2F;a&gt; for an example of moving a range of lines, where the same regex matches both the starting and ending lines.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;negative-addressing&quot;&gt;Negative addressing&lt;&#x2F;h2&gt;
&lt;p&gt;There are plenty of &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;selective-editing.html&quot;&gt;addressing features&lt;&#x2F;a&gt; provided by the &lt;code&gt;GNU sed&lt;&#x2F;code&gt; command, but negative addressing isn&#x27;t one. Here&#x27;s an example of deleting the last but second line using &lt;code&gt;ed&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;red
&lt;&#x2F;span&gt;&lt;span&gt;green
&lt;&#x2F;span&gt;&lt;span&gt;blue
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;black
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$-2d\nwq\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; ed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s colors.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;$ cat colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;red
&lt;&#x2F;span&gt;&lt;span&gt;green
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;black
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;resource-links&quot;&gt;Resource links&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.sanctum.geek.nz&#x2F;actually-using-ed&#x2F;&quot;&gt;Actually using ed&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;raymii.org&#x2F;s&#x2F;tutorials&#x2F;ed_cheatsheet.html&quot;&gt;ed cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2018&#x2F;05&#x2F;11&#x2F;batch-editing-files-with-ed&#x2F;&quot;&gt;Batch editing files with ed&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ed_(text_editor)&quot;&gt;wikipedia entry for the ed command&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Perl One-Liners Guide book announcement</title>
		<published>2023-09-28T00:00:00+00:00</published>
		<updated>2023-10-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/perl-oneliners-guide-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/perl-oneliners-guide-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I am pleased to announce a new version of my &lt;strong&gt;Perl One-Liners Guide&lt;&#x2F;strong&gt; ebook. Examples, exercises, solutions, descriptions and external links were added&#x2F;updated&#x2F;corrected.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to command line text processing, there are several well known tools like &lt;code&gt;grep&lt;&#x2F;code&gt; for filtering, &lt;code&gt;sed&lt;&#x2F;code&gt; for substitution and &lt;code&gt;awk&lt;&#x2F;code&gt; for field processing. Compared to such tools, &lt;strong&gt;Perl has a feature rich regular expression engine, plenty of builtin modules and a thriving ecosystem&lt;&#x2F;strong&gt;. Another advantage is that Perl is more &lt;strong&gt;portable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This ebook will show examples for filtering and substitution features, field processing, using standard and third-party modules, multiple file processing, how to construct solutions that depend on multiple records, how to compare records and fields between two or more files, how to identify duplicates while maintaining input order and so on.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of &lt;strong&gt;Perl One-Liners Guide&lt;&#x2F;strong&gt; for FREE till 07-October-2023. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;perl-oneliners&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;perl-oneliners&#x2F;c&#x2F;new_perl_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;All Books Bundle&lt;&#x2F;strong&gt; is just $12 (normal price $32), includes all my 13 programming ebooks.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;new_perl_release&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;learnbyexample-all-books&#x2F;c&#x2F;new_perl_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Command version updated to &lt;strong&gt;Perl 5.38.0&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;option &lt;code&gt;-g&lt;&#x2F;code&gt; slurps entire file contents&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Many more exercises added&lt;&#x2F;li&gt;
&lt;li&gt;Long sections split into smaller ones&lt;&#x2F;li&gt;
&lt;li&gt;In general, many of the examples, exercises, solutions, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;Perl One-Liners Guide&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;_7tP_4T45Ok&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;testimonials&quot;&gt;Testimonials&lt;a class=&quot;zola-anchor&quot; href=&quot;#testimonials&quot; aria-label=&quot;Anchor link for: testimonials&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This is fantastic! 👏 I use Perl one-liners for record and text processing a lot and this will be definitely something I will keep coming back to - I’ve already learned a trick from “Context Matching” (9) 🙂&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;programming.dev&#x2F;comment&#x2F;3277968&quot;&gt;feedback on Linux@lemmy.ml&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;One-liner introduction&lt;&#x2F;li&gt;
&lt;li&gt;Line processing&lt;&#x2F;li&gt;
&lt;li&gt;In-place file editing&lt;&#x2F;li&gt;
&lt;li&gt;Field separators&lt;&#x2F;li&gt;
&lt;li&gt;Record separators&lt;&#x2F;li&gt;
&lt;li&gt;Using modules&lt;&#x2F;li&gt;
&lt;li&gt;Multiple file input&lt;&#x2F;li&gt;
&lt;li&gt;Processing multiple records&lt;&#x2F;li&gt;
&lt;li&gt;Two file processing&lt;&#x2F;li&gt;
&lt;li&gt;Dealing with duplicates&lt;&#x2F;li&gt;
&lt;li&gt;Perl rename command&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_perl_oneliners&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_perl_oneliners&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&lt;&#x2F;a&gt; for markdown source, example files, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tips, tools, free ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;echo &#x27;bGVhcm5ieWV4YW1wbGUubmV0QGdtYWlsLmNvbQo=&#x27; | base64 --decode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 33: editing with text objects</title>
		<published>2023-09-25T00:00:00+00:00</published>
		<updated>2023-09-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-33/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-33/</id>
		<content type="html">&lt;p&gt;Combining motions such as &lt;code&gt;w&lt;&#x2F;code&gt;, &lt;code&gt;%&lt;&#x2F;code&gt; and &lt;code&gt;f&lt;&#x2F;code&gt; with editing commands like &lt;code&gt;d&lt;&#x2F;code&gt;, &lt;code&gt;c&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; require precise positioning to be effective.&lt;&#x2F;p&gt;
&lt;p&gt;Vim also provides a list of handy context based options to make certain editing use cases easier using the &lt;code&gt;i&lt;&#x2F;code&gt; and &lt;code&gt;a&lt;&#x2F;code&gt; text object selections. You can easily remember the difference between these two options by thinking &lt;code&gt;i&lt;&#x2F;code&gt; as &lt;strong&gt;inner&lt;&#x2F;strong&gt; and &lt;code&gt;a&lt;&#x2F;code&gt; as &lt;strong&gt;around&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;diw&lt;&#x2F;kbd&gt; delete a word regardless of where the cursor is on that word
&lt;ul&gt;
&lt;li&gt;equivalent to using &lt;kbd&gt;de&lt;&#x2F;kbd&gt; when the cursor is on the first character of the word&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;diW&lt;&#x2F;kbd&gt; delete a WORD regardless of where the cursor is on that WORD&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;daw&lt;&#x2F;kbd&gt; delete a word regardless of where the cursor is on that word as well as a space character to the left&#x2F;right of the word depending on its position in the current sentence&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;dis&lt;&#x2F;kbd&gt; delete a sentence regardless of where the cursor is on that sentence&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;yas&lt;&#x2F;kbd&gt; copy a sentence regardless of where the cursor is on that sentence as well as a space character to the left&#x2F;right&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;cip&lt;&#x2F;kbd&gt; delete a paragraph regardless of where the cursor is on that paragraph and change to Insert mode&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;dit&lt;&#x2F;kbd&gt; delete all characters within HTML&#x2F;XML tags, nesting is taken care as well
&lt;ul&gt;
&lt;li&gt;see &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;motion.txt.html#tag-blocks&quot;&gt;:h tag-blocks&lt;&#x2F;a&gt; for details about corner cases&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;di&amp;quot;&lt;&#x2F;kbd&gt; delete all characters within a pair of double quotes, regardless of where the cursor is within the quotes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;da&#x27;&lt;&#x2F;kbd&gt; delete all characters within a pair of single quotes along with the quote characters&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;ci(&lt;&#x2F;kbd&gt; delete all characters within &lt;code&gt;()&lt;&#x2F;code&gt; and change to Insert mode
&lt;ul&gt;
&lt;li&gt;works even if the parenthesis are spread over multiple lines, nesting is taken care as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;ya}&lt;&#x2F;kbd&gt; copy all characters within &lt;code&gt;{}&lt;&#x2F;code&gt; including the &lt;code&gt;{}&lt;&#x2F;code&gt; characters
&lt;ul&gt;
&lt;li&gt;works even if the braces are spread over multiple lines, nesting is taken care as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can use a count prefix for nested cases. For example, &lt;kbd&gt;c2i{&lt;&#x2F;kbd&gt; will clear the inner braces (including the braces, and this could be nested too) and then only the text between braces for the next level.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;motion.txt.html#text-objects&quot;&gt;:h text-objects&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;jbZMDQcwnV4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 32: text and indent settings</title>
		<published>2023-09-19T00:00:00+00:00</published>
		<updated>2023-09-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-32/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-32/</id>
		<content type="html">&lt;p&gt;Here are some text and indent Vim settings that you can put in the &lt;code&gt;vimrc&lt;&#x2F;code&gt; file to customize your editor. See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html&quot;&gt;:h options.txt&lt;&#x2F;a&gt; for complete reference.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;filetype plugin indent on&lt;&#x2F;kbd&gt; enables loading of &lt;code&gt;plugin&lt;&#x2F;code&gt; and &lt;code&gt;indent&lt;&#x2F;code&gt; files
&lt;ul&gt;
&lt;li&gt;these files become active based on the type of the file to influence syntax highlighting, indentation, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:echo $VIMRUNTIME&lt;&#x2F;kbd&gt; gives your installation directory (&lt;code&gt;indent&lt;&#x2F;code&gt; and &lt;code&gt;plugin&lt;&#x2F;code&gt; directories would be present in this path)&lt;&#x2F;li&gt;
&lt;li&gt;see &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;usr_05.txt.html#vimrc-filetype&quot;&gt;:h vimrc-filetype&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;filetype.txt.html#%3Afiletype-overview&quot;&gt;:h :filetype-overview&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;filetype.txt.html&quot;&gt;:h filetype.txt&lt;&#x2F;a&gt; for more details&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set autoindent&lt;&#x2F;kbd&gt; copy indent from the current line when starting a new line
&lt;ul&gt;
&lt;li&gt;useful for files not affected by &lt;code&gt;indent&lt;&#x2F;code&gt; setting&lt;&#x2F;li&gt;
&lt;li&gt;see also &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html#%27smartindent%27&quot;&gt;:h smartindent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set textwidth=80&lt;&#x2F;kbd&gt; guideline for Vim to automatically move to a new line with &lt;code&gt;80&lt;&#x2F;code&gt; characters as the limit
&lt;ul&gt;
&lt;li&gt;white space is used to break lines, so a line can still be greater than the limit if there&#x27;s no white space&lt;&#x2F;li&gt;
&lt;li&gt;default is &lt;code&gt;0&lt;&#x2F;code&gt; which disables this setting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set colorcolumn=80&lt;&#x2F;kbd&gt; create a highlighted vertical bar at column number &lt;code&gt;80&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;highlight ColorColumn&lt;&#x2F;code&gt; setting to customize the color for this vertical bar&lt;&#x2F;li&gt;
&lt;li&gt;see &lt;a href=&quot;https:&#x2F;&#x2F;vi.stackexchange.com&#x2F;q&#x2F;574&#x2F;1616&quot;&gt;vi.stackexchange: Keeping lines to less than 80 characters&lt;&#x2F;a&gt; for more details&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set shiftwidth=4&lt;&#x2F;kbd&gt; number of spaces to use for indentation (default is &lt;code&gt;8&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set tabstop=4&lt;&#x2F;kbd&gt; width for the tab character (default is &lt;code&gt;8&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set expandtab&lt;&#x2F;kbd&gt; use spaces for tab expansion&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set cursorline&lt;&#x2F;kbd&gt; highlight the line containing the cursor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;3F5R8BDuMGc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 33: manipulating string case with GNU sed</title>
		<published>2023-09-11T00:00:00+00:00</published>
		<updated>2023-09-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-33/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-33/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;sed&lt;&#x2F;code&gt; provides escape sequences to change the case of replacement strings, which might include backreferences, shell variables, etc.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Sequence&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\E&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;indicates the end of case conversion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\l&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert the next character to lowercase&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\u&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert the next character to uppercase&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\L&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert the following characters to lowercase (overridden by &lt;code&gt;\U&lt;&#x2F;code&gt; or &lt;code&gt;\E&lt;&#x2F;code&gt;)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\U&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert the following characters to uppercase (overridden by &lt;code&gt;\L&lt;&#x2F;code&gt; or &lt;code&gt;\E&lt;&#x2F;code&gt;)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;First up, changing case of only the immediate next character after the escape sequence.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match only the first character of a word
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use &amp;amp; to backreference the matched character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# \u would then change it to uppercase
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hello there. how are you?&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;\b\w&#x2F;\u&amp;amp;&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Hello There&lt;&#x2F;span&gt;&lt;span&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;How Are You&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change the first character of a word to lowercase
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;HELLO THERE. HOW ARE YOU?&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;\b\w&#x2F;\l&amp;amp;&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;hELLO tHERE. hOW aRE yOU?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match lowercase followed by underscore followed by lowercase
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# delete the underscore and convert the 2nd lowercase to uppercase
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;_fig aug_price next_line&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;([a-z])_([a-z])&#x2F;\1\u\2&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;_fig augPrice nextLine
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, changing case of multiple characters at a time.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change all alphabets to lowercase
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;HaVE a nICe dAy&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;.*&#x2F;\L&amp;amp;&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;have a nice day
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change all alphabets to uppercase
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;HaVE a nICe dAy&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;.*&#x2F;\U&amp;amp;&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;HAVE A NICE DAY
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# \E will stop further conversion
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig_ aug_price next_line&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;([a-z]+)(_[a-z]+)&#x2F;\U\1\E\2&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;fig_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;AUG_price NEXT_line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# \L or \U will override any existing conversion
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;HeLLo:bYe gOoD:beTTEr&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;([a-z]+)(:[a-z]+)&#x2F;\L\1\U\2&#x2F;Ig&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;hello:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;BYE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;good:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;BETTER
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, examples where escapes are used next to each other.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# uppercase first character of a word
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# and lowercase rest of the word characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note the order of escapes used, \u\L won&amp;#39;t work
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;HeLLo:bYe gOoD:beTTEr&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;[a-z]+&#x2F;\L\u&amp;amp;&#x2F;Ig&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;Hello:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Bye &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;Good:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Better
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lowercase first character of a word
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# and uppercase rest of the word characters
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;HeLLo:bYe gOoD:beTTEr&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;[a-z]+&#x2F;\U\l&amp;amp;&#x2F;Ig&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;hELLO:&lt;&#x2F;span&gt;&lt;span&gt;bYE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;gOOD:&lt;&#x2F;span&gt;&lt;span&gt;bETTER
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;h5-JoNvvihY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;CLI text processing with GNU sed&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 33: sorting iterables based on multiple conditions</title>
		<published>2023-09-05T00:00:00+00:00</published>
		<updated>2023-09-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-33/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-33/</id>
		<content type="html">&lt;p&gt;In an &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;python-tip-21&#x2F;&quot;&gt;earlier tip&lt;&#x2F;a&gt;, you learned how to sort iterables based on a key. You can use a sequence like &lt;code&gt;list&lt;&#x2F;code&gt; or &lt;code&gt;tuple&lt;&#x2F;code&gt; to specify a tie-breaker condition when two or more items are deemed equal under the primary sorting rule.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;books &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mage Errant&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Piranesi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;The Weirkey Chronicles&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mistborn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# sorts based on the number of words
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# retains original order for items with the same number of words
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(books, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Piranesi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mistborn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mage Errant&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;The Weirkey Chronicles&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# items with the same number of words are further sorted in alphabetic order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(books, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: (b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;), b))
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mistborn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Piranesi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mage Errant&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;The Weirkey Chronicles&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To sort in descending order, usually the &lt;code&gt;reverse=True&lt;&#x2F;code&gt; keyword argument is used. But what if the primary and secondary rules are opposites? If one of the rule is numerical in nature, you can simply negate the number to reverse the order.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# descending order based on the number of words
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# ascending alphabetic order for items with the same number of words
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; sorted(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;books,&lt;&#x2F;span&gt;&lt;span&gt; key=lambda b: (-b.count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;), b))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;The Weirkey Chronicles&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mage Errant&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mistborn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Piranesi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# reverse the above result
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; sorted(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;books,&lt;&#x2F;span&gt;&lt;span&gt; key=lambda b: (-b.count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;), b)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; reverse=True)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Piranesi&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mistborn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mage Errant&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;The Weirkey Chronicles&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;howto&#x2F;sorting.html&quot;&gt;docs.python HOWTOs: Sorting&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;YRLs92qWa9c&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 31: mark frequently used locations</title>
		<published>2023-08-29T00:00:00+00:00</published>
		<updated>2023-08-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-31/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-31/</id>
		<content type="html">&lt;p&gt;You can save frequently visited locations using marks for quicker navigation to those positions in the file. You can also pair marks with motion commands for tasks like copying, deleting, etc.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;ma&lt;&#x2F;kbd&gt; mark location in the file using the alphabet &lt;code&gt;a&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;you can use any of the 26 alphabets&lt;&#x2F;li&gt;
&lt;li&gt;use lowercase alphabets to work within the current file&lt;&#x2F;li&gt;
&lt;li&gt;use uppercase alphabets to work from any file&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:marks&lt;&#x2F;kbd&gt; will show a list of the existing marks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;`a&lt;&#x2F;kbd&gt; move to the exact location marked by &lt;code&gt;a&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&#x27;a&lt;&#x2F;kbd&gt; move to the first non-blank character of the line marked by &lt;code&gt;a&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&#x27;A&lt;&#x2F;kbd&gt; move to the first non-blank character of the line marked by &lt;code&gt;A&lt;&#x2F;code&gt; (this will work for any file where the mark was set)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;d`a&lt;&#x2F;kbd&gt; delete from the current character to the character marked by &lt;code&gt;a&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;marks can be paired with any command that accept motions like &lt;code&gt;d&lt;&#x2F;code&gt;, &lt;code&gt;y&lt;&#x2F;code&gt;, &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt;, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Motion commands that take you across lines (for example, &lt;kbd&gt;10G&lt;&#x2F;kbd&gt;) will automatically save the location you jumped from in the default &lt;code&gt;`&lt;&#x2F;code&gt; mark. You can move back to that exact location using &lt;code&gt;``&lt;&#x2F;code&gt; or the first non-blank character using &lt;code&gt;&#x27;`&lt;&#x2F;code&gt;. Note that the arrow and word motions aren&#x27;t considered for the default mark even if they move across lines.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;motion.txt.html#mark-motions&quot;&gt;:h mark-motions&lt;&#x2F;a&gt; for more ways to use marks.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;mTed-8UxNBA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI text processing with GNU awk book announcement</title>
		<published>2023-08-22T00:00:00+00:00</published>
		<updated>2023-08-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/cli-text-processing-awk-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/cli-text-processing-awk-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I am pleased to announce a new version of my &lt;strong&gt;CLI text processing with GNU awk&lt;&#x2F;strong&gt; ebook. Examples, exercises, solutions, descriptions and external links were added&#x2F;updated&#x2F;corrected.&lt;&#x2F;p&gt;
&lt;p&gt;Learn the &lt;code&gt;GNU awk&lt;&#x2F;code&gt; command step-by-step from beginner to advanced levels with &lt;strong&gt;hundreds of examples and exercises&lt;&#x2F;strong&gt;. This book will dive deep into field processing, show examples for filtering features, multiple file processing, how to construct solutions that depend on multiple records, how to compare records and fields between two or more files, how to identify duplicates while maintaining input order and so on. &lt;strong&gt;Regular expressions&lt;&#x2F;strong&gt; will also be discussed in detail.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of &lt;strong&gt;CLI text processing with GNU awk&lt;&#x2F;strong&gt; for FREE till 31-August-2023. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnu_awk&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;gnu_awk&#x2F;c&#x2F;new_awk_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Other offers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;oneliners&#x2F;new_awk_release&quot;&gt;Magical one-liners&lt;&#x2F;a&gt; is $5 (normal price $15) — grep, sed, awk, perl and ruby one-liners bundle&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;new_awk_release&quot;&gt;All Books Bundle&lt;&#x2F;a&gt; is $12 (normal price $32) — all my 13 programming ebooks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Command version updated to &lt;strong&gt;GNU awk 5.2.2&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Many more exercises added, and you can practice some of them using this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;AwkExercises&quot;&gt;interactive TUI app&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Long sections split into smaller ones&lt;&#x2F;li&gt;
&lt;li&gt;In general, many of the examples, exercises, solutions, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;CLI text processing with GNU awk&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;li&gt;Images centered for EPUB format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;KIa_EaYwGDI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;interactive-tui-app&quot;&gt;Interactive TUI app&lt;a class=&quot;zola-anchor&quot; href=&quot;#interactive-tui-app&quot; aria-label=&quot;Anchor link for: interactive-tui-app&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I also wrote an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;AwkExercises&quot;&gt;interactive TUI app&lt;&#x2F;a&gt; based on some of the exercises from the ebook. Reference solutions are also provided.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;AwkExercises&#x2F;awk_exercises.png&quot; alt=&quot;Sample screenshot from the interactive TUI app for awk exercises&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Installation and Documentation&lt;&#x2F;li&gt;
&lt;li&gt;awk introduction&lt;&#x2F;li&gt;
&lt;li&gt;Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Field separators&lt;&#x2F;li&gt;
&lt;li&gt;Record separators&lt;&#x2F;li&gt;
&lt;li&gt;In-place file editing&lt;&#x2F;li&gt;
&lt;li&gt;Using shell variables&lt;&#x2F;li&gt;
&lt;li&gt;Control Structures&lt;&#x2F;li&gt;
&lt;li&gt;Built-in functions&lt;&#x2F;li&gt;
&lt;li&gt;Multiple file input&lt;&#x2F;li&gt;
&lt;li&gt;Processing multiple records&lt;&#x2F;li&gt;
&lt;li&gt;Two file processing&lt;&#x2F;li&gt;
&lt;li&gt;Dealing with duplicates&lt;&#x2F;li&gt;
&lt;li&gt;awk scripts&lt;&#x2F;li&gt;
&lt;li&gt;Gotchas and Tips&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnuawk&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnuawk&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&lt;&#x2F;a&gt; for markdown source, example files, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tips, tools, free ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;echo &#x27;bGVhcm5ieWV4YW1wbGUubmV0QGdtYWlsLmNvbQo=&#x27; | base64 --decode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 32: text processing between two files with GNU awk</title>
		<published>2023-08-21T00:00:00+00:00</published>
		<updated>2023-08-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-32/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-32/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;awk&lt;&#x2F;code&gt; is handy to compare records and fields between two or more files. The &lt;em&gt;key&lt;&#x2F;em&gt; features used in the solution below:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For two files as input, &lt;code&gt;NR==FNR&lt;&#x2F;code&gt; will be &lt;code&gt;true&lt;&#x2F;code&gt; only when the first file is being processed&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;next&lt;&#x2F;code&gt; will skip rest of the script and fetch the next record&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;a[$0]&lt;&#x2F;code&gt; by itself is a valid statement. It will create an uninitialized element in array &lt;code&gt;a&lt;&#x2F;code&gt; with &lt;code&gt;$0&lt;&#x2F;code&gt; as the key (assuming the key doesn&#x27;t exist yet)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$0 in a&lt;&#x2F;code&gt; checks if the given string (&lt;code&gt;$0&lt;&#x2F;code&gt; here) exists as a key in the array &lt;code&gt;a&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat colors_1.txt
&lt;&#x2F;span&gt;&lt;span&gt;teal
&lt;&#x2F;span&gt;&lt;span&gt;light blue
&lt;&#x2F;span&gt;&lt;span&gt;green
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;$ cat colors_2.txt
&lt;&#x2F;span&gt;&lt;span&gt;light blue
&lt;&#x2F;span&gt;&lt;span&gt;black
&lt;&#x2F;span&gt;&lt;span&gt;dark green
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# common lines
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; colors_1.txt colors_2.txt
&lt;&#x2F;span&gt;&lt;span&gt;light blue
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lines from colors_2.txt not present in colors_1.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR==FNR{a[$0]; next} !($0 in a)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; colors_1.txt colors_2.txt
&lt;&#x2F;span&gt;&lt;span&gt;black
&lt;&#x2F;span&gt;&lt;span&gt;dark green
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; Note that the &lt;code&gt;NR==FNR&lt;&#x2F;code&gt; logic will fail if the first file is empty, since &lt;code&gt;NR&lt;&#x2F;code&gt; wouldn&#x27;t get a chance to increment. You can set a flag after the first file has been processed to avoid this issue. See &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;a&#x2F;237110&#x2F;109046&quot;&gt;this unix.stackexchange thread&lt;&#x2F;a&gt; for more workarounds.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# no output
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR==FNR{a[$0]; next} !($0 in a)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# gives the expected output
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;!f{a[$0]; next} !($0 in a)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;null f=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here&#x27;s an example of comparing specific fields instead of whole lines. When you use a &lt;code&gt;,&lt;&#x2F;code&gt; separator between strings to construct the array key, the value of &lt;code&gt;SUBSEP&lt;&#x2F;code&gt; is inserted. This special variable has a default value of the non-printing character &lt;code&gt;\034&lt;&#x2F;code&gt; which is usually not used as part of text files.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat marks.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Dept    Name    Marks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ECE     Raj     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;53
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ECE     Joel    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;72
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;EEE     Moi     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;68
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;CSE     Surya   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;81
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;EEE     Tia     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;59
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ECE     Om      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;CSE     Amy     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;67
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat dept_name.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;EEE Moi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;CSE Amy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ECE Raj
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR==FNR{a[$1,$2]; next} ($1,$2) in a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; dept_name.txt marks.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ECE     Raj     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;53
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;EEE     Moi     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;68
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;CSE     Amy     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;67
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;gz-0UQGUfNA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Interactive exercises for GNU grep, sed and awk (TUI apps)</title>
		<published>2023-08-17T00:00:00+00:00</published>
		<updated>2025-01-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/interactive-grep-sed-awk-exercises/" type="text/html"/>
		<id>https://learnbyexample.github.io/interactive-grep-sed-awk-exercises/</id>
		<content type="html">&lt;p&gt;Having an interactive program that automatically loads questions and checks the solution is immensely helpful to have while learning a topic. I&#x27;ve written &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&quot;&gt;TUI apps&lt;&#x2F;a&gt; with plenty of beginner to intermediate level exercises for &lt;code&gt;GNU grep&lt;&#x2F;code&gt;, &lt;code&gt;GNU sed&lt;&#x2F;code&gt; and &lt;code&gt;GNU awk&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;GrepExercises&#x2F;grep_exercises.png&quot; alt=&quot;Sample screenshot for GNU grep exercises&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For the past few months, I&#x27;ve been using a Python framework called &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;&quot;&gt;Textual&lt;&#x2F;a&gt; to create interactive TUI apps.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll need Python for this. This app is available on PyPI as &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;grepexercises&#x2F;&quot;&gt;grepexercises&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;sedexercises&#x2F;&quot;&gt;sedexercises&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;awkexercises&#x2F;&quot;&gt;awkexercises&lt;&#x2F;a&gt;. Example installation instructions are shown below, adjust them based on your preferences and OS.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# virtual environment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; venv textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; source bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pip install grepexercises sedexercises awkexercises
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# launch the app, example shown for the grep command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; grepexercises
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To run the app without having to enter the virtual environment again, add aliases to &lt;code&gt;.bashrc&lt;&#x2F;code&gt; (or equivalent):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# you&amp;#39;ll have to change the path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;grepexercises&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;textual_apps&#x2F;bin&#x2F;grepexercises&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# similarly, you can add aliases for the other apps as well
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an alternative to manually managing such virtual environments, you can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&lt;&#x2F;a&gt; instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pipx install grepexercises sedexercises awkexercises
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; awkexercises
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As yet another alternative, you can install &lt;code&gt;textual==0.85.2&lt;&#x2F;code&gt; (see &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;getting_started&#x2F;&quot;&gt;Textual documentation&lt;&#x2F;a&gt; for more details), clone my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&quot;&gt;TUI-apps repository&lt;&#x2F;a&gt; and run the Python file from respective folders. For example, &lt;code&gt;grep_exercises.py&lt;&#x2F;code&gt; for the &lt;code&gt;grep&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;Adjust the terminal dimensions for the widgets to appear properly, for example 84x25 (characters x lines).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can use alternative CLI tools to solve these exercises as well. For example, &lt;code&gt;perl&lt;&#x2F;code&gt; instead of &lt;code&gt;GNU awk&lt;&#x2F;code&gt; or &lt;code&gt;ripgrep&lt;&#x2F;code&gt; instead of &lt;code&gt;GNU grep&lt;&#x2F;code&gt; and so on.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;brief-guide&quot;&gt;Brief Guide&lt;a class=&quot;zola-anchor&quot; href=&quot;#brief-guide&quot; aria-label=&quot;Anchor link for: brief-guide&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can either click the buttons using mouse or press the key combinations listed below:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;strong&gt;F1&lt;&#x2F;strong&gt; to view the complete guide from within the app itself.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+p&lt;&#x2F;strong&gt; and &lt;strong&gt;Ctrl+n&lt;&#x2F;strong&gt; to navigate the questions list.&lt;&#x2F;li&gt;
&lt;li&gt;Type the command in the box below the question.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Enter&lt;&#x2F;strong&gt; to execute the command.
&lt;ul&gt;
&lt;li&gt;Output would be displayed below the command box.&lt;&#x2F;li&gt;
&lt;li&gt;If the output matches the expected results, the command box will turn &lt;em&gt;green&lt;&#x2F;em&gt; and reference solutions will also be shown.&lt;&#x2F;li&gt;
&lt;li&gt;Issues due to errors and timeout (about &lt;code&gt;2&lt;&#x2F;code&gt; seconds) will be displayed in &lt;em&gt;red&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+s&lt;&#x2F;strong&gt; to toggle the reference solution box.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+t&lt;&#x2F;strong&gt; to toggle between light and dark themes.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+q&lt;&#x2F;strong&gt; to quit the app.&lt;&#x2F;li&gt;
&lt;li&gt;Some basic readline-like shortcuts are supported, for example &lt;strong&gt;Ctrl+u&lt;&#x2F;strong&gt;, &lt;strong&gt;Ctrl+k&lt;&#x2F;strong&gt;, &lt;strong&gt;Ctrl+w&lt;&#x2F;strong&gt;, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Your progress is automatically saved when you close the app and restored when you launch it again later. Already answered questions will be skipped.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; There is no safeguard against the command you are executing. They are treated as if you typed them from a shell session.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;ebooks&quot;&gt;Ebooks&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebooks&quot; aria-label=&quot;Anchor link for: ebooks&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The exercise questions in these apps have been adapted from my programming ebooks: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d highly appreciate your feedback. Please file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;issues&quot;&gt;an issue&lt;&#x2F;a&gt; if there are bugs, crashes, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Hope you find these TUI apps useful. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 32: positive lookarounds</title>
		<published>2023-08-16T00:00:00+00:00</published>
		<updated>2023-08-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-32/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-32/</id>
		<content type="html">&lt;p&gt;Lookarounds help to create custom anchors and add conditions within a regex definition. These assertions are also known as &lt;strong&gt;zero-width patterns&lt;&#x2F;strong&gt; because they add restrictions similar to anchors and are not part of the matched portions. Negative lookarounds were discussed in &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;python-tip-29&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;. The syntax for positive lookarounds is shown below:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(?=pat)&lt;&#x2F;code&gt; positive lookahead assertion&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(?&amp;lt;=pat)&lt;&#x2F;code&gt; positive lookbehind assertion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 apple-5, fig3; x-83, y-20: f12&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# extract digits only if it is followed by ,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that end of string doesn&amp;#39;t qualify as this is a positive assertion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;,)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, s)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;5&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;83&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# extract digits only if it is preceded by - and followed by ; or :
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;-)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?=[:;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, s)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;20&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace &amp;#39;par&amp;#39; as long as &amp;#39;part&amp;#39; occurs as a whole word later in the line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?=.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;part&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;font-style:italic;color:#d2a8a1;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;0&amp;gt;]&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spare part party&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[par] s[par]e part party&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With lookbehind assertion (both positive and negative), the pattern used for the assertion cannot &lt;em&gt;imply&lt;&#x2F;em&gt; matching variable length of text. Fixed length quantifier is allowed. Different length alternations are not allowed, even if the individual alternations are of fixed length.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;pore42 tar3 dare7 care5&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# not allowed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;dare)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, s)
&lt;&#x2F;span&gt;&lt;span&gt;re.error: look&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;behind requires fixed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;width pattern
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# workaround for r&amp;#39;(?&amp;lt;!tar|dare)\d+&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;tar)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;dare)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, s)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;5&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# workaround for r&amp;#39;(?&amp;lt;=tar|dare)\d+&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(?:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;tar)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;dare))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, s)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;3&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;7&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; The third-party &lt;code&gt;regex&lt;&#x2F;code&gt; module (&lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&lt;&#x2F;a&gt;) offers advanced features like variable-length lookbehinds, subexpression calls, etc.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Bu27WS-GExk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebooks.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 30: some general Vim settings</title>
		<published>2023-08-08T00:00:00+00:00</published>
		<updated>2023-08-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-30/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-30/</id>
		<content type="html">&lt;p&gt;Here are some general Vim settings that you can put in the &lt;code&gt;vimrc&lt;&#x2F;code&gt; file to customize your editor. See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html&quot;&gt;:h options.txt&lt;&#x2F;a&gt; for complete reference.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;set history=200&lt;&#x2F;kbd&gt; increase default history from 50 to 200
&lt;ul&gt;
&lt;li&gt;there are separate history lists for &lt;code&gt;:&lt;&#x2F;code&gt; commands, search patterns, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set nobackup&lt;&#x2F;kbd&gt; disable backup files&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set noswapfile&lt;&#x2F;kbd&gt; disable swap files&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;colorscheme murphy&lt;&#x2F;kbd&gt; a dark theme
&lt;ul&gt;
&lt;li&gt;you can use &lt;kbd&gt;:colorscheme&lt;&#x2F;kbd&gt; followed by a space and then press &lt;kbd&gt;Tab&lt;&#x2F;kbd&gt; or &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;d&lt;&#x2F;kbd&gt; to get a list of the available color schemes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set showcmd&lt;&#x2F;kbd&gt; show partial Normal mode command on Command-line and character&#x2F;line&#x2F;block-selection for Visual mode&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;set wildmode=longest,list,full&lt;&#x2F;kbd&gt; use Bash-like tab completion
&lt;ul&gt;
&lt;li&gt;first tab will complete as much as possible&lt;&#x2F;li&gt;
&lt;li&gt;second tab will provide a list&lt;&#x2F;li&gt;
&lt;li&gt;third and subsequent tabs will cycle through the completion options&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;kbd&gt;:h &#x27;history&#x27;&lt;&#x2F;kbd&gt; will give you the documentation for the given option (note the use of single quotes).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can use these settings from the Command-line mode as well, but will be active for the current Vim session only. Settings specified in the &lt;code&gt;vimrc&lt;&#x2F;code&gt; file will be loaded automatically at startup.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;TnfScldL8fE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 31: concatenate files column wise</title>
		<published>2023-08-01T00:00:00+00:00</published>
		<updated>2023-08-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-31/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-31/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;paste&lt;&#x2F;code&gt; command is typically used to merge two or more files column wise. By default, &lt;code&gt;paste&lt;&#x2F;code&gt; adds a tab character between corresponding lines of input files.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat colors_1.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Brown
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Purple
&lt;&#x2F;span&gt;&lt;span&gt;$ cat colors_2.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Black
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Green
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ paste colors_1.txt colors_2.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue    Black
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Brown   Blue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange  Green
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Purple  Orange
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use the &lt;code&gt;-d&lt;&#x2F;code&gt; option to change the delimiter between the columns. The separator is added even if the data has been exhausted for some of the input files.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;|&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4 5&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6 8&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that the space between -d and empty string is necessary here
&lt;&#x2F;span&gt;&lt;span&gt;$ paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6 8&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;27
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;38
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use newline separator to interleave file contents
&lt;&#x2F;span&gt;&lt;span&gt;$ paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11 12&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;101 102&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;101
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;102
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use empty files to get multicharacter separation between the columns. The &lt;code&gt;pr&lt;&#x2F;code&gt; command is better suited for this task.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; : &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4 6&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ pr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; : &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4 6&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;vnGeEO3d42U&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;paste.html&quot;&gt;paste command&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; ebook for more details.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 31: next() function</title>
		<published>2023-07-25T00:00:00+00:00</published>
		<updated>2023-07-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-31/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-31/</id>
		<content type="html">&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions.html#next&quot;&gt;&lt;code&gt;next()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; builtin function can be used on an iterator (but not iterables) to retrieve the next item. Once you have exhausted an iterator, trying to get another item will result in a &lt;code&gt;StopIteration&lt;&#x2F;code&gt; exception. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;names &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;tuple&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;__&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span&gt;m)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;(names)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;count&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;(names)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;index&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;(names)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Traceback &lt;&#x2F;span&gt;&lt;span&gt;(most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;StopIteration
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s a practical example to get a random item from a &lt;code&gt;list&lt;&#x2F;code&gt; without repetition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;random 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;names &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Raj&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jon&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;shuffle&lt;&#x2F;span&gt;&lt;span&gt;(names)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;random_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;(names)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;(random_name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jon&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;(random_name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can set a default value to be returned instead of the &lt;code&gt;StopIteration&lt;&#x2F;code&gt; exception. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; letters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;letters, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;f&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;letters, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;i&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;letters, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;letters, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;letters, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;CxgjN1V5vA0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 29: greedy quantifiers</title>
		<published>2023-07-19T00:00:00+00:00</published>
		<updated>2023-07-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-29/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-29/</id>
		<content type="html">&lt;p&gt;Quantifiers can be applied to literal characters, dot metacharacter, groups, backreferences and character classes.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;&#x2F;code&gt; match zero or more times
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abc*&lt;&#x2F;code&gt; matches &lt;code&gt;ab&lt;&#x2F;code&gt; or &lt;code&gt;abc&lt;&#x2F;code&gt; or &lt;code&gt;abccc&lt;&#x2F;code&gt; or &lt;code&gt;abcccccc&lt;&#x2F;code&gt; but not &lt;code&gt;bc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Error.*valid&lt;&#x2F;code&gt; matches &lt;code&gt;Error: invalid input&lt;&#x2F;code&gt; but not &lt;code&gt;valid Error&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;s&#x2F;a.*b&#x2F;X&#x2F;&lt;&#x2F;code&gt; replaces &lt;code&gt;table bottle bus&lt;&#x2F;code&gt; with &lt;code&gt;tXus&lt;&#x2F;code&gt; since &lt;code&gt;a.*b&lt;&#x2F;code&gt; matches from the first &lt;code&gt;a&lt;&#x2F;code&gt; to the last &lt;code&gt;b&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\+&lt;&#x2F;code&gt; match one or more times
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abc\+&lt;&#x2F;code&gt; matches &lt;code&gt;abc&lt;&#x2F;code&gt; or &lt;code&gt;abccc&lt;&#x2F;code&gt; but not &lt;code&gt;ab&lt;&#x2F;code&gt; or &lt;code&gt;bc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\?&lt;&#x2F;code&gt; match zero or one times
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\=&lt;&#x2F;code&gt; can also be used, helpful if you are searching backwards with the &lt;code&gt;?&lt;&#x2F;code&gt; command&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;abc\?&lt;&#x2F;code&gt; matches &lt;code&gt;ab&lt;&#x2F;code&gt; or &lt;code&gt;abc&lt;&#x2F;code&gt;. This will match &lt;code&gt;abccc&lt;&#x2F;code&gt; or &lt;code&gt;abcccccc&lt;&#x2F;code&gt; as well, but only the &lt;code&gt;abc&lt;&#x2F;code&gt; portion&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;s&#x2F;abc\?&#x2F;X&#x2F;&lt;&#x2F;code&gt; replaces &lt;code&gt;abcc&lt;&#x2F;code&gt; with &lt;code&gt;Xc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\{m,n}&lt;&#x2F;code&gt; match &lt;code&gt;m&lt;&#x2F;code&gt; to &lt;code&gt;n&lt;&#x2F;code&gt; times (inclusive)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ab\{1,4}c&lt;&#x2F;code&gt; matches &lt;code&gt;abc&lt;&#x2F;code&gt; or &lt;code&gt;abbc&lt;&#x2F;code&gt; or &lt;code&gt;xabbbcz&lt;&#x2F;code&gt; but not &lt;code&gt;ac&lt;&#x2F;code&gt; or &lt;code&gt;abbbbbc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\{m,}&lt;&#x2F;code&gt; match at least &lt;code&gt;m&lt;&#x2F;code&gt; times
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ab\{3,}c&lt;&#x2F;code&gt; matches &lt;code&gt;xabbbcz&lt;&#x2F;code&gt; or &lt;code&gt;abbbbbc&lt;&#x2F;code&gt; but not &lt;code&gt;ac&lt;&#x2F;code&gt; or &lt;code&gt;abc&lt;&#x2F;code&gt; or &lt;code&gt;abbc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\{,n}&lt;&#x2F;code&gt; match up to &lt;code&gt;n&lt;&#x2F;code&gt; times (including &lt;code&gt;0&lt;&#x2F;code&gt; times)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ab\{,2}c&lt;&#x2F;code&gt; matches &lt;code&gt;abc&lt;&#x2F;code&gt; or &lt;code&gt;ac&lt;&#x2F;code&gt; or &lt;code&gt;abbc&lt;&#x2F;code&gt; but not &lt;code&gt;xabbbcz&lt;&#x2F;code&gt; or &lt;code&gt;abbbbbc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\{n}&lt;&#x2F;code&gt; match exactly &lt;code&gt;n&lt;&#x2F;code&gt; times
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ab\{3}c&lt;&#x2F;code&gt; matches &lt;code&gt;xabbbcz&lt;&#x2F;code&gt; but not &lt;code&gt;abbc&lt;&#x2F;code&gt; or &lt;code&gt;abbbbbc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Greedy quantifiers will consume as &lt;em&gt;much&lt;&#x2F;em&gt; as possible, provided the overall pattern is also matched. That&#x27;s how the &lt;code&gt;Error.*valid&lt;&#x2F;code&gt; example worked. If &lt;code&gt;.*&lt;&#x2F;code&gt; had consumed everything after &lt;code&gt;Error&lt;&#x2F;code&gt;, there wouldn&#x27;t be any more characters to try to match &lt;code&gt;valid&lt;&#x2F;code&gt;. How the regexp engine handles matching varying amount of characters depends on the implementation details (backtracking, NFA, etc).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;pattern.txt.html#pattern-overview&quot;&gt;:h pattern-overview&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If you are familiar with other regular expression flavors like Perl, Python, etc, you&#x27;d be surprised by the use of &lt;code&gt;\&lt;&#x2F;code&gt; in the above examples. If you use &lt;code&gt;\v&lt;&#x2F;code&gt; very magic modifier, the &lt;code&gt;\&lt;&#x2F;code&gt; won&#x27;t be needed.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;pg1OX4pHN8M&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 30: extract only the matching portions</title>
		<published>2023-07-11T00:00:00+00:00</published>
		<updated>2023-07-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-30/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-30/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;grep&lt;&#x2F;code&gt; command provides the &lt;code&gt;-o&lt;&#x2F;code&gt; option to extract only the matching portions. Here are some examples using the BRE&#x2F;ERE regexp flavors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# whole words made up of lowercase alphabets and digits only
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coat Bin food Apple (tar12) best fig_42&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;owE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[a-z0-9]+&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;coat
&lt;&#x2F;span&gt;&lt;span&gt;food
&lt;&#x2F;span&gt;&lt;span&gt;tar12
&lt;&#x2F;span&gt;&lt;span&gt;best
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# extract characters from the start of string based on a delimiter
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple:123:banana:cherry&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;^[^:]*&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# sequence of characters surrounded by double quotes
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;I like &amp;quot;mango&amp;quot; and &amp;quot;guava&amp;quot;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;oE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;[^&amp;quot;]+&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;mango&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;guava&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# whole words that have at least one consecutive repeated character
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;effort flee facade oddball rat tool&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;owE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\w*(\w)\1\w*&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;effort
&lt;&#x2F;span&gt;&lt;span&gt;flee
&lt;&#x2F;span&gt;&lt;span&gt;oddball
&lt;&#x2F;span&gt;&lt;span&gt;tool
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here are some examples with the PCRE flavor:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# numbers &amp;gt;= 100 if there are leading zeros
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: grep -owE &amp;#39;0*[1-9][0-9]{2,}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0501 035 154 12 26 98234&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;woP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0*+\d{3,}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0501
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;154
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;98234
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# extract digits only if it is preceded by - and not followed by ,
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 apple-5, fig3; x-83, y-20: f12&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;oP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(?&amp;lt;=-)\d++(?!,)&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;20
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# extract digits that follow =
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple=42, fig=314&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;oP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;=\K\d+&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;314
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# all digits and optional hyphen combo from the start of string
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123-87-593 42 apple-12-345&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;oP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\G\d+-?&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;87&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;593
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# all words except those surrounded by double quotes
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;I like2 &amp;quot;mango&amp;quot; and &amp;quot;guava&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;oP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;[^&amp;quot;]+&amp;quot;(*SKIP)(*F)|\w+&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;I
&lt;&#x2F;span&gt;&lt;span&gt;like2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use &lt;code&gt;ripgrep&lt;&#x2F;code&gt; if you want to add some more text to the matching portions, or perhaps you need to handle multiple capture groups. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple=42, fig=314&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\w+)=(\d+)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$2:$1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42:apple
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;314:fig
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;MDQCnXRNLoY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;a&gt; ebook if you are interested in learning about the &lt;code&gt;GNU grep&lt;&#x2F;code&gt; and &lt;code&gt;ripgrep&lt;&#x2F;code&gt; commands in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 30: zip() function</title>
		<published>2023-07-04T00:00:00+00:00</published>
		<updated>2023-07-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-30/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-30/</id>
		<content type="html">&lt;p&gt;You can use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions.html#zip&quot;&gt;zip()&lt;&#x2F;a&gt; builtin function to iterate over two or more iterables simultaneously. In every iteration, you&#x27;ll get a &lt;code&gt;tuple&lt;&#x2F;code&gt; with an item from each of the iterables. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;names &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mei&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rose&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ram&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;physics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;86&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;91&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;76&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;maths &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;77&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;81&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span&gt;n, p, m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(names, physics, maths):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:5&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{p}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;{m}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span&gt;Joe  : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;86&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;77
&lt;&#x2F;span&gt;&lt;span&gt;Mei  : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;91&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92
&lt;&#x2F;span&gt;&lt;span&gt;Rose : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;76&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;81
&lt;&#x2F;span&gt;&lt;span&gt;Ram  : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some examples using list comprehensions and generator expressions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;214&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i, j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(p, q)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;217&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;58&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# inner product
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i, j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(p, q))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;910
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By default, &lt;code&gt;zip()&lt;&#x2F;code&gt; will silently stop when the shortest iterable is exhausted:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;fruits &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;banana&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;guava&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;qty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span&gt;f, q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(fruits, qty):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:6&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{q}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span&gt;apple : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;banana: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;25
&lt;&#x2F;span&gt;&lt;span&gt;fig   : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;strict&lt;&#x2F;code&gt; keyword argument was added in the Python 3.10 version. When set to &lt;code&gt;True&lt;&#x2F;code&gt;, this will raise an exception if the iterables are not of the same length:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span&gt;f, q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(fruits, qty, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;strict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:6&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{q}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span&gt;apple : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;banana: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;25
&lt;&#x2F;span&gt;&lt;span&gt;fig   : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Traceback &lt;&#x2F;span&gt;&lt;span&gt;(most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;() argument &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span&gt;shorter than argument &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;itertools.html#itertools.zip_longest&quot;&gt;itertools.zip_longest()&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;61126284&#x2F;4082052&quot;&gt;stackoverflow: zipped Python generators with 2nd one being shorter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;4vR9x30enWU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI text processing with GNU sed book announcement</title>
		<published>2023-06-29T00:00:00+00:00</published>
		<updated>2023-06-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/cli-text-processing-sed-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/cli-text-processing-sed-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I am pleased to announce a new version of my &lt;strong&gt;CLI text processing with GNU sed&lt;&#x2F;strong&gt; ebook. Examples, exercises, solutions, descriptions and external links were added&#x2F;updated&#x2F;corrected.&lt;&#x2F;p&gt;
&lt;p&gt;This book will help you learn the &lt;code&gt;GNU sed&lt;&#x2F;code&gt; command step-by-step from beginner to advanced levels with &lt;strong&gt;hundreds of examples and exercises&lt;&#x2F;strong&gt;. In addition to command options, &lt;strong&gt;regular expressions&lt;&#x2F;strong&gt; will also be discussed in detail.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of &lt;strong&gt;CLI text processing with GNU sed&lt;&#x2F;strong&gt; for FREE till 10-July-2023. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnu_sed&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;gnu_sed&#x2F;c&#x2F;new_sed_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Other offers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnugrep_ripgrep&quot;&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;a&gt; is FREE&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;new_sed_release&quot;&gt;All Books Bundle&lt;&#x2F;a&gt; is $12 (normal price $32) — all my 13 programming ebooks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Command version updated to &lt;strong&gt;GNU sed 4.9&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Many more exercises added, and you can practice some of them using this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;SedExercises&quot;&gt;interactive TUI app&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Long sections split into smaller ones&lt;&#x2F;li&gt;
&lt;li&gt;In general, many of the examples, exercises, solutions, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;CLI text processing with GNU sed&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;li&gt;Images centered for EPUB format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;nvKyKoeiZD8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;interactive-tui-app&quot;&gt;Interactive TUI app&lt;a class=&quot;zola-anchor&quot; href=&quot;#interactive-tui-app&quot; aria-label=&quot;Anchor link for: interactive-tui-app&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I also wrote an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;SedExercises&quot;&gt;interactive TUI app&lt;&#x2F;a&gt; based on some of the exercises from the ebook. Reference solutions are also provided.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;SedExercises&#x2F;sed_exercises.png&quot; alt=&quot;Sample screenshot from the interactive TUI app for sed exercises&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;In-place file editing&lt;&#x2F;li&gt;
&lt;li&gt;Selective editing&lt;&#x2F;li&gt;
&lt;li&gt;BRE&#x2F;ERE Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Flags&lt;&#x2F;li&gt;
&lt;li&gt;Shell substitutions&lt;&#x2F;li&gt;
&lt;li&gt;z, s and f command line options&lt;&#x2F;li&gt;
&lt;li&gt;append, change, insert&lt;&#x2F;li&gt;
&lt;li&gt;Adding content from file&lt;&#x2F;li&gt;
&lt;li&gt;Control structures&lt;&#x2F;li&gt;
&lt;li&gt;Processing lines bounded by distinct markers&lt;&#x2F;li&gt;
&lt;li&gt;Gotchas and Tricks&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&lt;&#x2F;a&gt; for markdown source, example files, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tips, tools, free ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;echo &#x27;bGVhcm5ieWV4YW1wbGUubmV0QGdtYWlsLmNvbQo=&#x27; | base64 --decode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 28: miscellaneous motion and reposition commands</title>
		<published>2023-06-26T00:00:00+00:00</published>
		<updated>2023-06-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-28/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-28/</id>
		<content type="html">&lt;p&gt;Moving within the visible window:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;H&lt;&#x2F;kbd&gt; move to the first non-blank character of the top (home) line of the visible window&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;M&lt;&#x2F;kbd&gt; move to the first non-blank character of the middle line of the visible window&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;L&lt;&#x2F;kbd&gt; move to the first non-blank character of the bottom (low) line of the visible window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Reposition the current line:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;e&lt;&#x2F;kbd&gt; scroll up by a line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;y&lt;&#x2F;kbd&gt; scroll down by a line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;zz&lt;&#x2F;kbd&gt; reposition the current line to the middle of the visible window
&lt;ul&gt;
&lt;li&gt;useful to see context around lines that are nearer to the top&#x2F;bottom of the visible window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;zt&lt;&#x2F;kbd&gt; reposition the current line to the top of the visible window&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;zb&lt;&#x2F;kbd&gt; reposition the current line to the bottom of the visible window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html#%27scrolloff%27&quot;&gt;:h &#x27;scrolloff&#x27;&lt;&#x2F;a&gt; option if you want to always show context around the current line.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;XRXO4Ns8rPE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 29: define fields using FPAT in GNU awk</title>
		<published>2023-06-20T00:00:00+00:00</published>
		<updated>2023-06-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-29/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-29/</id>
		<content type="html">&lt;p&gt;In &lt;code&gt;awk&lt;&#x2F;code&gt;, the &lt;code&gt;FS&lt;&#x2F;code&gt; variable allows you to define the input field &lt;em&gt;separator&lt;&#x2F;em&gt;. In contrast, &lt;code&gt;FPAT&lt;&#x2F;code&gt; (field pattern) allows you to define what should the fields be made up of.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample123string42with777numbers&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# one or more consecutive digits
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;FPAT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[0-9]+&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coat Bin food tar12 best Apple fig_42&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# whole words made up of lowercase alphabets and digits only
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;FPAT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;[a-z0-9]+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;OFS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;coat,food,tar12,best
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;items: &amp;quot;apple&amp;quot; and &amp;quot;mango&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# get the first double quoted item
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;FPAT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;[^&amp;quot;]+&amp;quot;&amp;#39; &amp;#39;{print $1}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;apple&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;FPAT&lt;&#x2F;code&gt; is often used for CSV input where fields can contain embedded delimiter characters. For example, a field content &lt;code&gt;&amp;quot;fox,42&amp;quot;&lt;&#x2F;code&gt; when &lt;code&gt;,&lt;&#x2F;code&gt; is the delimiter.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;eagle,&amp;quot;fox,42&amp;quot;,bee,frog&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# simply using , as separator isn&amp;#39;t sufficient
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;fox
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For such simpler CSV input, &lt;code&gt;FPAT&lt;&#x2F;code&gt; helps to define fields as starting and ending with double quotes or containing non-comma characters.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# * is used instead of + to allow empty fields
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;FPAT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;[^&amp;quot;]*&amp;quot;|[^,]*&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;fox,42&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; The above will not work for all kinds of CSV files, for example if fields contain escaped double quotes, newline characters, etc. See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;45420535&#x2F;4082052&quot;&gt;stackoverflow: What&#x27;s the most robust way to efficiently parse CSV using awk?&lt;&#x2F;a&gt; for such cases. You could also use other programming languages such as Perl, Python, Ruby, etc which come with standard CSV parsing libraries or have easy access to third party solutions. There are also specialized command line tools such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;xsv&quot;&gt;xsv&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;1ZQni88a99w&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 29: negative lookarounds</title>
		<published>2023-06-13T00:00:00+00:00</published>
		<updated>2023-06-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-29/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-29/</id>
		<content type="html">&lt;p&gt;Lookarounds help to create custom anchors and add conditions within a regex definition. These assertions are also known as &lt;strong&gt;zero-width patterns&lt;&#x2F;strong&gt; because they add restrictions similar to anchors and are not part of the matched portions. The syntax for negative lookarounds is shown below:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(?!pat)&lt;&#x2F;code&gt; negative lookahead assertion&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(?&amp;lt;!pat)&lt;&#x2F;code&gt; negative lookbehind assertion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change &amp;#39;cat&amp;#39; only if it is not followed by a digit character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that the end of string satisfies the given assertion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;catcat&amp;#39; has two matches as the assertion doesn&amp;#39;t consume characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;cat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey cats! cat42 cat_5 catcat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey dogs! cat42 dog_5 dogdog&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change &amp;#39;cat&amp;#39; only if it is not preceded by _
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note how &amp;#39;cat&amp;#39; at the start of string is matched as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;_)cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat _cat 42catcat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog _cat 42dogdog&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change whole word only if it is not preceded by : or -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;![:-]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:cart &amp;lt;apple: -rest ;tea&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:cart &amp;lt;X: -rest ;X&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lookarounds can be placed anywhere and multiple lookarounds can be combined in any order. They do not consume characters nor do they play a role in matched portions. They just let you know whether the condition you want to test is satisfied from the current location in the input string.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# extract all whole words that do not start with a&#x2F;n
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a_t row on Urn e note Dust n end a2-e|u&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?![an]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;row&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;on&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Urn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Dust&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;end&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;u&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# since the three assertions used here are all zero-width,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# all of the 6 possible combinations will be equivalent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;output=num1+35*42&#x2F;num2&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;output = num1 + 35 * 42 &#x2F; num2&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;CoEFqWYRr4Q&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebooks.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 27: regexp anchors</title>
		<published>2023-06-05T00:00:00+00:00</published>
		<updated>2023-06-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-27/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-27/</id>
		<content type="html">&lt;p&gt;By default, regexp matches anywhere in the text. You can use line and word anchors to specify additional restrictions regarding the position of matches. These restrictions are made possible by assigning special meaning to certain characters (&lt;strong&gt;metacharacters&lt;&#x2F;strong&gt;) and escape sequences.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;&#x2F;code&gt; restricts the match to the start-of-line
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^This&lt;&#x2F;code&gt; matches &lt;code&gt;This is a sample&lt;&#x2F;code&gt; but not &lt;code&gt;Do This&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$&lt;&#x2F;code&gt; restricts the match to the end-of-line
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;)$&lt;&#x2F;code&gt; matches &lt;code&gt;apple (5)&lt;&#x2F;code&gt; but not &lt;code&gt;def greeting():&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;^$&lt;&#x2F;code&gt; match empty line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\&amp;lt;pattern&lt;&#x2F;code&gt; restricts the match to the start of a word
&lt;ul&gt;
&lt;li&gt;word characters include alphabets, digits and underscore&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\&amp;lt;his&lt;&#x2F;code&gt; matches &lt;code&gt;his&lt;&#x2F;code&gt; or &lt;code&gt;to-his&lt;&#x2F;code&gt; or &lt;code&gt;history&lt;&#x2F;code&gt; but not &lt;code&gt;this&lt;&#x2F;code&gt; or &lt;code&gt;_hist&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pattern\&amp;gt;&lt;&#x2F;code&gt; restricts the match to the end of a word
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;his\&amp;gt;&lt;&#x2F;code&gt; matches &lt;code&gt;his&lt;&#x2F;code&gt; or &lt;code&gt;to-his&lt;&#x2F;code&gt; or &lt;code&gt;this&lt;&#x2F;code&gt; but not &lt;code&gt;history&lt;&#x2F;code&gt; or &lt;code&gt;_hist&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\&amp;lt;pattern\&amp;gt;&lt;&#x2F;code&gt; restricts the match between start of a word and end of a word
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\&amp;lt;his\&amp;gt;&lt;&#x2F;code&gt; matches &lt;code&gt;his&lt;&#x2F;code&gt; or &lt;code&gt;to-his&lt;&#x2F;code&gt; but not &lt;code&gt;this&lt;&#x2F;code&gt; or &lt;code&gt;history&lt;&#x2F;code&gt; or &lt;code&gt;_hist&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; End-of-line can be &lt;code&gt;\r&lt;&#x2F;code&gt; (carriage return), &lt;code&gt;\n&lt;&#x2F;code&gt; (newline) or &lt;code&gt;\r\n&lt;&#x2F;code&gt; depending on your system and &lt;code&gt;fileformat&lt;&#x2F;code&gt; setting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;pattern.txt.html#pattern-atoms&quot;&gt;:h pattern-atoms&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;AJNWtpKA2zM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 28: substitute specific occurrence with GNU sed</title>
		<published>2023-05-30T00:00:00+00:00</published>
		<updated>2023-05-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-28/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-28/</id>
		<content type="html">&lt;p&gt;By using the &lt;code&gt;g&lt;&#x2F;code&gt; flag with the &lt;code&gt;s&lt;&#x2F;code&gt; command (substitute), you can search and replace all occurrences of a pattern. Without the &lt;code&gt;g&lt;&#x2F;code&gt; flag, only the first matching portion will be replaced.&lt;&#x2F;p&gt;
&lt;p&gt;Did you know that you can use a number as a flag to replace only that particular occurrence of matching parts?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace only the third occurrence of &amp;#39;:&amp;#39; with &amp;#39;---&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple:banana:cherry:fig:mango&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;:&#x2F;---&#x2F;3&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;apple:banana:&lt;&#x2F;span&gt;&lt;span&gt;cherry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;fig:&lt;&#x2F;span&gt;&lt;span&gt;mango
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace only the second occurrence of a word starting with &amp;#39;t&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;book table bus car banana tap camp&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;\bt\w*&#x2F;&amp;quot;&amp;amp;&amp;quot;&#x2F;2&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;book table bus car banana &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;tap&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; camp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To replace a specific occurrence from the end of the line, you&#x27;ll have use regular expression tricks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple:banana:cherry:fig:mango&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace the last occurrence
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;(.*):&#x2F;\1---&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;apple:banana:cherry:&lt;&#x2F;span&gt;&lt;span&gt;fig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span&gt;mango
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace the last but one occurrence
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;(.*):(.*:)&#x2F;\1---\2&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;apple:banana:&lt;&#x2F;span&gt;&lt;span&gt;cherry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;fig:&lt;&#x2F;span&gt;&lt;span&gt;mango
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# generic formula, where {N} refers to the last but Nth occurrence
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;(.*):((.*:){2})&#x2F;\1---\2&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;apple:&lt;&#x2F;span&gt;&lt;span&gt;banana&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;cherry:fig:&lt;&#x2F;span&gt;&lt;span&gt;mango
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you combine a number flag with the &lt;code&gt;g&lt;&#x2F;code&gt; flag, all matches from that particular occurrence will be replaced.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace except the first occurrence of a word starting with &amp;#39;b&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;book table bus car banana tap camp&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;\bb\w*&#x2F;&amp;quot;&amp;amp;&amp;quot;&#x2F;2g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;book table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;bus&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;banana&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;tap&lt;&#x2F;span&gt;&lt;span&gt; camp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;7CxaiYQ2gIU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;CLI text processing with GNU sed&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 28: string concatenation and repetition</title>
		<published>2023-05-24T00:00:00+00:00</published>
		<updated>2023-05-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-28/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-28/</id>
		<content type="html">&lt;p&gt;Python provides a wide variety of features to work with strings. In this tip, you&#x27;ll learn about string concatenation and repetition.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;+&lt;&#x2F;code&gt; operator is one of the ways to concatenate two strings. The operands can be any expression that results in a string value and you can use any of the different ways to specify a string literal. Another option is to use f-strings. Here are some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hello&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;world&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;s2)
&lt;&#x2F;span&gt;&lt;span&gt;hello world
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{s1} {s2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hello world&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt; 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hello. 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;n2&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another way to concatenate is to simply place any kind of string literal next to each other. You can use zero or more whitespaces between the two literals. But you cannot mix an expression and a string literal. If the strings are inside parentheses, you can also use newline characters to separate the literals and optionally use comments.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hello&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt; 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hello. 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;n2&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;-banana&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;-cherry&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;banana&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can repeat a string by using the &lt;code&gt;*&lt;&#x2F;code&gt; operator between a string and an integer. You&#x27;ll get an empty string if the integer value is less than &lt;code&gt;1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;style_char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;-&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(style_char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;buffalo &amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;word)
&lt;&#x2F;span&gt;&lt;span&gt;buffalo buffalo buffalo buffalo buffalo buffalo buffalo buffalo 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;nuH7C162W5U&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 26: executing shell commands</title>
		<published>2023-05-16T00:00:00+00:00</published>
		<updated>2023-05-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-26/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-26/</id>
		<content type="html">&lt;p&gt;You can execute external commands from within Vim. Here are some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:!ls&lt;&#x2F;kbd&gt; execute the given shell command and display output
&lt;ul&gt;
&lt;li&gt;the results are displayed as part of an expanded Command-line area, doesn&#x27;t change contents of the file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:.!date&lt;&#x2F;kbd&gt; replace the current line with the output of the given command
&lt;ul&gt;
&lt;li&gt;pressing &lt;kbd&gt;!!&lt;&#x2F;kbd&gt; in Normal mode will also result in &lt;kbd&gt;:.!&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;!&lt;&#x2F;code&gt; waits for motion similar to &lt;code&gt;d&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; commands, &lt;kbd&gt;!G&lt;&#x2F;kbd&gt; will give &lt;kbd&gt;:.,$!&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:%!sort&lt;&#x2F;kbd&gt; sort all the lines
&lt;ul&gt;
&lt;li&gt;recall that &lt;code&gt;%&lt;&#x2F;code&gt; is a shortcut for the range &lt;code&gt;1,$&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;note that this executes an external command, not the built-in &lt;code&gt;:sort&lt;&#x2F;code&gt; command&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:3,8!sort&lt;&#x2F;kbd&gt; sort only lines &lt;code&gt;3&lt;&#x2F;code&gt; to &lt;code&gt;8&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:r!date&lt;&#x2F;kbd&gt; insert output of the given command below the current line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:r report.log&lt;&#x2F;kbd&gt; insert contents of the given file below the current line
&lt;ul&gt;
&lt;li&gt;Note that &lt;code&gt;!&lt;&#x2F;code&gt; is not used here since there is no shell command&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:.!grep &#x27;^Help &#x27; %&lt;&#x2F;kbd&gt; replace the current line with all the lines starting with &lt;code&gt;Help&lt;&#x2F;code&gt; in the current file
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;&#x2F;code&gt; here refers to current file contents&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:sh&lt;&#x2F;kbd&gt; open a shell session within Vim
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;exit&lt;&#x2F;code&gt; command to quit the session&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;various.txt.html#%3A%21cmd&quot;&gt;:h :!&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;various.txt.html#%3Ash&quot;&gt;:h :sh&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;insert.txt.html#%3Ar&quot;&gt;:h :r&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;STSZt2c1rSA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI text processing with GNU grep and ripgrep book announcement</title>
		<published>2023-05-11T00:00:00+00:00</published>
		<updated>2023-05-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/cli-text-processing-grep-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/cli-text-processing-grep-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I am pleased to announce a new version of my &lt;strong&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;strong&gt; ebook. Examples, exercises, solutions, descriptions and external links were added&#x2F;updated&#x2F;corrected. The chapter on &lt;code&gt;ripgrep&lt;&#x2F;code&gt; was changed significantly to focus mostly on the differences compared to &lt;code&gt;GNU grep&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This book will help you learn these commands step-by-step from beginner to advanced levels with &lt;strong&gt;hundreds of examples and exercises&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of &lt;strong&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;strong&gt; for FREE till 21-May-2023. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnugrep_ripgrep&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;gnugrep_ripgrep&#x2F;c&#x2F;new_grep_release&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Other offers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;cli_computing&quot;&gt;Computing from the Command Line&lt;&#x2F;a&gt; is FREE — Linux command line tools and Shell Scripting for beginner to intermediate level users&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;new_grep_release&quot;&gt;All Books Bundle&lt;&#x2F;a&gt; is $12 (normal price $32) — all my 13 programming ebooks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Command versions updated to &lt;strong&gt;GNU grep 3.10&lt;&#x2F;strong&gt; and &lt;strong&gt;ripgrep 13.0.0&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Many more exercises added&lt;&#x2F;li&gt;
&lt;li&gt;PCRE chapter — added section for conditional grouping, corrected description and examples for &lt;code&gt;\K&lt;&#x2F;code&gt;, atomic grouping, etc&lt;&#x2F;li&gt;
&lt;li&gt;ripgrep chapter — options and regex section modified to present only differences compared to &lt;code&gt;GNU grep&lt;&#x2F;code&gt;, added details for more options such as &lt;code&gt;--field-match-separator&lt;&#x2F;code&gt;, improved recursive search section, etc&lt;&#x2F;li&gt;
&lt;li&gt;Long sections split into smaller ones&lt;&#x2F;li&gt;
&lt;li&gt;In general, many of the examples, exercises, solutions, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;li&gt;Images centered for EPUB format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;MSbGokwHm-A&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;interactive-tui-app&quot;&gt;Interactive TUI app&lt;a class=&quot;zola-anchor&quot; href=&quot;#interactive-tui-app&quot; aria-label=&quot;Anchor link for: interactive-tui-app&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I also wrote an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;GrepExercises&quot;&gt;interactive TUI app&lt;&#x2F;a&gt; based on some of the exercises from the ebook. Reference solutions are provided for both &lt;code&gt;GNU grep&lt;&#x2F;code&gt; and &lt;code&gt;ripgrep&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;GrepExercises&#x2F;grep_exercises.png&quot; alt=&quot;Sample screenshot from the interactive TUI app for grep exercises&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;Frequently used options&lt;&#x2F;li&gt;
&lt;li&gt;BRE&#x2F;ERE Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Context matching&lt;&#x2F;li&gt;
&lt;li&gt;Recursive search&lt;&#x2F;li&gt;
&lt;li&gt;Miscellaneous options&lt;&#x2F;li&gt;
&lt;li&gt;Perl Compatible Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Gotchas and Tricks&lt;&#x2F;li&gt;
&lt;li&gt;ripgrep&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnugrep_ripgrep&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnugrep_ripgrep&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&lt;&#x2F;a&gt; for markdown source, example files, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tips, tools, free ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate it if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;echo &#x27;bGVhcm5ieWV4YW1wbGUubmV0QGdtYWlsLmNvbQo=&#x27; | base64 --decode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 27: reverse text line wise with tac</title>
		<published>2023-05-09T00:00:00+00:00</published>
		<updated>2023-05-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-27/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-27/</id>
		<content type="html">&lt;p&gt;You can use &lt;code&gt;tac&lt;&#x2F;code&gt; to reverse the input line wise. If you pass multiple input files, each file content will be reversed separately.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\nbanana\ncherry\nfig and honey\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; tac
&lt;&#x2F;span&gt;&lt;span&gt;fig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; honey
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use the &lt;code&gt;-s&lt;&#x2F;code&gt; option to specify a different string to be used as the &lt;em&gt;line&lt;&#x2F;em&gt; separator (newline is the default separator). When the custom separator occurs before the content of interest, use the &lt;code&gt;-b&lt;&#x2F;code&gt; option to print those separators before the content in the output as well.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat blocks.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;%=%=
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;%=%=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;%=%=
&lt;&#x2F;span&gt;&lt;span&gt;red
&lt;&#x2F;span&gt;&lt;span&gt;green
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ tac &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;%=%=&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; blocks.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;%=%=
&lt;&#x2F;span&gt;&lt;span&gt;red
&lt;&#x2F;span&gt;&lt;span&gt;green
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;%=%=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;%=%=
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;cli-tip-8&#x2F;&quot;&gt;CLI tip 8: extract from start of file until matching line&lt;&#x2F;a&gt; for a practical example where reversing input content helps in constructing a solution.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;6p_9zP66wqA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;cat-tac.html#tac&quot;&gt;tac&lt;&#x2F;a&gt; section from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; ebook for more details and examples.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 27: enumerate() function</title>
		<published>2023-05-03T00:00:00+00:00</published>
		<updated>2023-05-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-27/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-27/</id>
		<content type="html">&lt;p&gt;When you use a &lt;code&gt;for&lt;&#x2F;code&gt; loop, you get one element per each iteration. If you need the &lt;em&gt;index&lt;&#x2F;em&gt; of the elements as well, use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions.html#enumerate&quot;&gt;enumerate()&lt;&#x2F;a&gt; built-in function. You&#x27;ll get a &lt;code&gt;tuple&lt;&#x2F;code&gt; value per each iteration, containing index (starting with &lt;code&gt;0&lt;&#x2F;code&gt; by default) and the value at that index.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;(nums):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(t)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;names &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jon&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[(n1, n2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i, n1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;(names) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;names[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:]]
&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jon&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jon&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By setting the &lt;code&gt;start&lt;&#x2F;code&gt; argument, you can change the initial value of the index.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;table&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;book&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span&gt;idx, val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;(items, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{idx}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{val}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;: car
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;: table
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;: book
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;8a-Lg4mx1wA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 25: substitute flags</title>
		<published>2023-04-25T00:00:00+00:00</published>
		<updated>2023-04-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-25/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-25/</id>
		<content type="html">&lt;p&gt;Here are some of the flags you can use with the substitute command:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g&lt;&#x2F;code&gt; replace all occurrences within a matching line
&lt;ul&gt;
&lt;li&gt;by default, only the first matching portion will be replaced&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;c&lt;&#x2F;code&gt; ask for confirmation before each replacement&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;i&lt;&#x2F;code&gt; ignore case for &lt;em&gt;searchpattern&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;I&lt;&#x2F;code&gt; don&#x27;t ignore case for &lt;em&gt;searchpattern&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These flags are applicable for the substitute command but not &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; or &lt;code&gt;?&lt;&#x2F;code&gt; searches. Flags can also be combined, for example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&#x2F;cat&#x2F;Dog&#x2F;gi&lt;&#x2F;code&gt; replace every occurrence of &lt;code&gt;cat&lt;&#x2F;code&gt; with &lt;code&gt;Dog&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Case is ignored, so &lt;code&gt;Cat&lt;&#x2F;code&gt;, &lt;code&gt;cAt&lt;&#x2F;code&gt;, &lt;code&gt;CAT&lt;&#x2F;code&gt;, etc are all valid matches&lt;&#x2F;li&gt;
&lt;li&gt;Note that &lt;code&gt;i&lt;&#x2F;code&gt; doesn&#x27;t affect the case of the replacement string&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#%3As_flags&quot;&gt;:h s_flags&lt;&#x2F;a&gt; for a complete list of flags and more details about them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;gdcfU8wTMrM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 26: removing duplicate lines with GNU awk</title>
		<published>2023-04-18T00:00:00+00:00</published>
		<updated>2023-04-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-26/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-26/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;awk &#x27;!a[$0]++&#x27;&lt;&#x2F;code&gt; is one of the most famous Awk one-liners. It eliminates line based duplicates while retaining input order. The following example shows it in action along with an illustration of how the logic works.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat purchases.txt
&lt;&#x2F;span&gt;&lt;span&gt;coffee
&lt;&#x2F;span&gt;&lt;span&gt;tea
&lt;&#x2F;span&gt;&lt;span&gt;washing powder
&lt;&#x2F;span&gt;&lt;span&gt;coffee
&lt;&#x2F;span&gt;&lt;span&gt;toothpaste
&lt;&#x2F;span&gt;&lt;span&gt;tea
&lt;&#x2F;span&gt;&lt;span&gt;soap
&lt;&#x2F;span&gt;&lt;span&gt;tea
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print +a[$0] &amp;quot;\t&amp;quot; $0; a[$0]++}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; purchases.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;       coffee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;       tea
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;       washing powder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;       coffee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;       toothpaste
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;       tea
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;       soap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;       tea
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# only those entries with zero in the first column will be retained
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;!a[$0]++&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; purchases.txt
&lt;&#x2F;span&gt;&lt;span&gt;coffee
&lt;&#x2F;span&gt;&lt;span&gt;tea
&lt;&#x2F;span&gt;&lt;span&gt;washing powder
&lt;&#x2F;span&gt;&lt;span&gt;toothpaste
&lt;&#x2F;span&gt;&lt;span&gt;soap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Removing field based duplicates is simple for single field comparison. Just change &lt;code&gt;$0&lt;&#x2F;code&gt; to the required field number after setting the appropriate field separator.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat duplicates.txt
&lt;&#x2F;span&gt;&lt;span&gt;brown,toy,bread,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;dark red,ruby,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;111
&lt;&#x2F;span&gt;&lt;span&gt;blue,ruby,water,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;dark red,sky,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;555
&lt;&#x2F;span&gt;&lt;span&gt;yellow,toy,flower,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;white,sky,bread,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;111
&lt;&#x2F;span&gt;&lt;span&gt;light red,purse,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# based on the last field
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;!seen[$NF]++&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; duplicates.txt
&lt;&#x2F;span&gt;&lt;span&gt;brown,toy,bread,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;dark red,ruby,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;111
&lt;&#x2F;span&gt;&lt;span&gt;blue,ruby,water,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;dark red,sky,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;555
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For multiple fields comparison, separate the fields with &lt;code&gt;,&lt;&#x2F;code&gt; so that &lt;code&gt;SUBSEP&lt;&#x2F;code&gt; is used to combine the field values to generate the key. &lt;code&gt;SUBSEP&lt;&#x2F;code&gt; has a default value of &lt;code&gt;\034&lt;&#x2F;code&gt; which is a non-printing character and not usually used in text files.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# based on the first and third fields
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;!seen[$1,$3]++&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; duplicates.txt
&lt;&#x2F;span&gt;&lt;span&gt;brown,toy,bread,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;dark red,ruby,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;111
&lt;&#x2F;span&gt;&lt;span&gt;blue,ruby,water,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;yellow,toy,flower,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;span&gt;white,sky,bread,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;111
&lt;&#x2F;span&gt;&lt;span&gt;light red,purse,rose,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;333
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;koraa&#x2F;huniq&quot;&gt;huniq&lt;&#x2F;a&gt; is a faster alternative for removing line based duplicates.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;nfQn6IkxxeU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 22: possessive quantifiers</title>
		<published>2023-04-13T00:00:00+00:00</published>
		<updated>2023-04-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-22/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-22/</id>
		<content type="html">&lt;p&gt;Until Python 3.10, you had to use alternatives like the third-party &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;regex module&lt;&#x2F;a&gt; for possessive quantifiers and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;python-tip-26&#x2F;&quot;&gt;atomic grouping&lt;&#x2F;a&gt;. The &lt;code&gt;re&lt;&#x2F;code&gt; module supports these features from Python 3.11 version.&lt;&#x2F;p&gt;
&lt;p&gt;Greedy quantifiers will match as much as possible but will backtrack to help the overall pattern to succeed. Possessive quantifiers behave like greedy but won&#x27;t backtrack.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose you want to match integer numbers greater than or equal to &lt;code&gt;100&lt;&#x2F;code&gt; where these numbers can optionally have leading zeros.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 314 001 12 00984&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this solution fails because 0* and \d{3,} can both match leading zeros
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# and greedy quantifiers will give up characters to help overall regex succeed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;001&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# here 0*+ will not give back leading zeros after they are consumed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# workaround if possessive quantifiers are not supported
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1-9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s another example. The goal is to match lines whose first non-whitespace character is not a &lt;code&gt;#&lt;&#x2F;code&gt; character. A matching line should have at least one non-&lt;code&gt;#&lt;&#x2F;code&gt; character, so empty lines and those with only whitespace characters should not match.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;#cmt&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c = &amp;quot;#&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt; #comment&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this solution fails because \s* can backtrack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# and [^#] can match a whitespace character as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;#]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, e)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c = &amp;quot;#&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt; #comment&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this works because \s*+ will not give back any whitespace characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;#]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, e)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c = &amp;quot;#&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# workaround if possessive quantifiers are not supported
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, e)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c = &amp;quot;#&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my blog post on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;python-regex-possessive-quantifier&#x2F;&quot;&gt;possessive quantifiers and atomic grouping&lt;&#x2F;a&gt; for more examples, details about catastrophic backtracking and so on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Y7XuZOLdG0o&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebooks.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 26: atomic grouping</title>
		<published>2023-04-13T00:00:00+00:00</published>
		<updated>2023-04-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-26/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-26/</id>
		<content type="html">&lt;p&gt;Until Python 3.10, you had to use alternatives like the third-party &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;regex module&lt;&#x2F;a&gt; for &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;python-tip-22&#x2F;&quot;&gt;possessive quantifiers&lt;&#x2F;a&gt; and atomic grouping. The &lt;code&gt;re&lt;&#x2F;code&gt; module supports these features from Python 3.11 version.&lt;&#x2F;p&gt;
&lt;p&gt;Greedy and non-greedy quantifiers will backtrack to help the overall pattern to succeed. The syntax for an atomic group is &lt;code&gt;(?&amp;gt;pat)&lt;&#x2F;code&gt;, where &lt;code&gt;pat&lt;&#x2F;code&gt; is the pattern you want to safeguard from further backtracking. You can think of it as a special group that is isolated from the other parts of the regular expression.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example with greedy quantifier:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 314 001 12 00984&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# 0* is greedy and the (?&amp;gt;) grouping prevents backtracking
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: re.findall(r&amp;#39;0*+\d{3,}&amp;#39;, numbers)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an example with non-greedy quantifier:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig::mango::pineapple::guava::apples::orange&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this matches from the first &amp;#39;::&amp;#39; to the first occurrence of &amp;#39;::apple&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;::apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;::mango::pineapple::guava::apple&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;(?&amp;gt;::.*?::)&amp;#39; will match only from &amp;#39;::&amp;#39; to the very next &amp;#39;::&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;::mango::&amp;#39; fails because &amp;#39;apple&amp;#39; isn&amp;#39;t found afterwards
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# similarly &amp;#39;::pineapple::&amp;#39; fails
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;::guava::&amp;#39; succeeds because it is followed by &amp;#39;apple&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;::)apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;::guava::apple&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;DQfcST_XN_E&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebooks.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 24: movement commands within the current file</title>
		<published>2023-04-04T00:00:00+00:00</published>
		<updated>2023-04-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-24/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-24/</id>
		<content type="html">&lt;p&gt;Here are some commands you can use in Normal mode to move within the current file:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;gg&lt;&#x2F;kbd&gt; move to the first non-blank character of the first line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;G&lt;&#x2F;kbd&gt; move to the first non-blank character of the last line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;5G&lt;&#x2F;kbd&gt; move to the first non-blank character of the fifth line
&lt;ul&gt;
&lt;li&gt;As an alternative, you can use &lt;kbd&gt;:5&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt; key (Command-line mode)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;50%&lt;&#x2F;kbd&gt; move to the halfway point
&lt;ul&gt;
&lt;li&gt;you can use other percentages as needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;%&lt;&#x2F;kbd&gt; move to matching pair of brackets like &lt;code&gt;()&lt;&#x2F;code&gt;, &lt;code&gt;{}&lt;&#x2F;code&gt; and &lt;code&gt;[]&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;This will work across lines and nesting is taken into consideration as well&lt;&#x2F;li&gt;
&lt;li&gt;If the cursor is on a non-bracket character and a bracket character is present later in the line, the &lt;kbd&gt;%&lt;&#x2F;kbd&gt; command will move to the matching pair of that character (which could be present in some other line too)&lt;&#x2F;li&gt;
&lt;li&gt;Use the &lt;code&gt;matchpairs&lt;&#x2F;code&gt; option to customize the matching pairs. For example, &lt;kbd&gt;:set matchpairs+=&amp;lt;:&amp;gt;&lt;&#x2F;kbd&gt; will match &lt;code&gt;&amp;lt;&amp;gt;&lt;&#x2F;code&gt; as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; It is also possible to match a pair of keywords like HTML tags, if-else, etc with &lt;kbd&gt;%&lt;&#x2F;kbd&gt;. See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;usr_05.txt.html#05.5&quot;&gt;:h matchit-install&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;yMAbE8BrehE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 25: get file properties using the stat command</title>
		<published>2023-03-28T00:00:00+00:00</published>
		<updated>2023-03-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-25/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-25/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;stat&lt;&#x2F;code&gt; command is useful to get details like file type, size, inode, permissions, last accessed and modified timestamps, etc. You&#x27;ll get all of these details by default. The &lt;code&gt;-c&lt;&#x2F;code&gt; and &lt;code&gt;--printf&lt;&#x2F;code&gt; options can be used to display only the required details in a particular format.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example to get accessed and modified timestamps of a file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# sample directory and sample file
&lt;&#x2F;span&gt;&lt;span&gt;$ mkdir stat_examples &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$_
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;long\nshot\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# %x gives the last accessed timestamp
&lt;&#x2F;span&gt;&lt;span&gt;$ stat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;27 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;55.217530670 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0530
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# modify the file
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\nbanana\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# %y gives the last modified timestamp
&lt;&#x2F;span&gt;&lt;span&gt;$ stat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;27 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50.298964283 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0530
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an example with some more file properties:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# %s gives file size in bytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# \n is used to insert a newline
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# %i gives the inode value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: stat --printf=&amp;#39;%s\n%i\n&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ stat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;%s\n%i&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;23
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;6438890
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an example for a linked file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ ln &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;share&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;dict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;words words.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# %N gives quoted filenames
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# if input is a link, path it points to is also displayed
&lt;&#x2F;span&gt;&lt;span&gt;$ stat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;%N&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; words.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;words.txt&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;usr&#x2F;share&#x2F;dict&#x2F;words&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also pass multiple file arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;#!&#x2F;bin&#x2F;bash\n\necho hi\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; hi.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# %s gives file size in bytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# %n gives filenames
&lt;&#x2F;span&gt;&lt;span&gt;$ stat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%s %n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt hi.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt; hi.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; The &lt;code&gt;stat&lt;&#x2F;code&gt; command should be preferred instead of parsing &lt;code&gt;ls -l&lt;&#x2F;code&gt; output for file details. See &lt;a href=&quot;https:&#x2F;&#x2F;mywiki.wooledge.org&#x2F;ParsingLs&quot;&gt;mywiki.wooledge: avoid parsing output of ls&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;q&#x2F;128985&#x2F;109046&quot;&gt;unix.stackexchange: why not parse ls?&lt;&#x2F;a&gt; for explanation and other alternatives.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;wEddnyjLfRA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Linux Command Line Computing&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 25: split and partition string methods</title>
		<published>2023-03-21T00:00:00+00:00</published>
		<updated>2023-03-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-25/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-25/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;split()&lt;&#x2F;code&gt; method splits a string based on the given substring and returns a &lt;code&gt;list&lt;&#x2F;code&gt;. By default, whitespace is used for splitting and empty elements are discarded.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;greeting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt; have    a  nice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\r\v\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt; day  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\f\v\r\t\n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;greeting.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;have&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;nice&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;day&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can split the input based on a specific string literal by passing it as an argument. Here are some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;creatures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dragon][unicorn][centaur&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;creatures.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;][&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dragon&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;unicorn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;centaur&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# empty elements will be preserved in this case
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:car::jeep::&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;jeep&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;maxsplit&lt;&#x2F;code&gt; argument allows you to restrict the number of times the input string should be split. Use &lt;code&gt;rsplit()&lt;&#x2F;code&gt; if you want to split from right to left.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# split once
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple-grape-mango-fig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;-&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maxsplit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;grape-mango-fig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match the rightmost occurrence
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple-grape-mango-fig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rsplit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;-&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maxsplit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple-grape-mango&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple-grape-mango-fig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rsplit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;-&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maxsplit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple-grape&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mango&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;partition()&lt;&#x2F;code&gt; method will give a &lt;code&gt;tuple&lt;&#x2F;code&gt; of three elements — portion before the leftmost match, the separator itself and the portion after the split. You can use &lt;code&gt;rpartition()&lt;&#x2F;code&gt; to match the rightmost occurrence of the separator.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;maths:85&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;partition&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;maths&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;85&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# last two elements will be empty if there is no match
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;partition&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;=&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;maths:85&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match the rightmost occurrence
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;creatures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dragon][unicorn][centaur&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;creatures.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rpartition&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;][&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dragon][unicorn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;][&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;centaur&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;dot-metacharacter-and-quantifiers.html#resplit&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebook to learn about string splitting with regular expressions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;tb_ioYxXwsA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>100+ Interactive Python Regex Exercises</title>
		<published>2023-03-20T00:00:00+00:00</published>
		<updated>2025-01-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/interactive-python-regex-exercises/" type="text/html"/>
		<id>https://learnbyexample.github.io/interactive-python-regex-exercises/</id>
		<content type="html">&lt;p&gt;Having an interactive program that automatically loads questions and checks the solution is wonderful to have while learning a topic. This &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;PyRegexExercises&quot;&gt;TUI app&lt;&#x2F;a&gt; has beginner to advanced level exercises for Python regular expressions. There are more than 100 exercises covering both the builtin &lt;code&gt;re&lt;&#x2F;code&gt; and third-party &lt;code&gt;regex&lt;&#x2F;code&gt; module.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;PyRegexExercises&#x2F;pyregex_exercises.png&quot; alt=&quot;Sample screenshot for Python regex exercises&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This app is available on PyPI as &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regexexercises&#x2F;&quot;&gt;regexexercises&lt;&#x2F;a&gt;. Example installation instructions are shown below, adjust them based on your preferences and OS.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# virtual environment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; venv textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; source bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pip install regexexercises
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# launch the app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; regexexercises
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If you are on Windows, using the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Windows_Terminal&quot;&gt;Windows Terminal&lt;&#x2F;a&gt; is recommended. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;issues&#x2F;3#issuecomment-1481488042&quot;&gt;this issue&lt;&#x2F;a&gt; for Virtual Environment commands and other details.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To run the app without having to enter the virtual environment again, add this alias to &lt;code&gt;.bashrc&lt;&#x2F;code&gt; (or equivalent):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# you&amp;#39;ll have to change the path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;regexexercises&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;textual_apps&#x2F;bin&#x2F;regexexercises&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an alternative to manually managing such virtual environments, you can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&lt;&#x2F;a&gt; instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pipx install regexexercises
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; regexexercises
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As yet another alternative, you can install &lt;code&gt;textual==0.85.2&lt;&#x2F;code&gt; (see &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;getting_started&#x2F;&quot;&gt;Textual documentation&lt;&#x2F;a&gt; for more details), clone my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&quot;&gt;TUI-apps&lt;&#x2F;a&gt; repository and run the &lt;code&gt;pyregex_exercises.py&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;Adjust the terminal dimensions for the widgets to appear properly, for example 84x25 (characters x lines).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;video-demo&quot;&gt;Video demo&lt;a class=&quot;zola-anchor&quot; href=&quot;#video-demo&quot; aria-label=&quot;Anchor link for: video-demo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;0oXPeF8HutQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;brief-guide&quot;&gt;Brief Guide&lt;a class=&quot;zola-anchor&quot; href=&quot;#brief-guide&quot; aria-label=&quot;Anchor link for: brief-guide&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Type your solution in the input box below the question.
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;ip&lt;&#x2F;code&gt; variable to represent the sample input.&lt;&#x2F;li&gt;
&lt;li&gt;Any single valid Python expression will be accepted.&lt;&#x2F;li&gt;
&lt;li&gt;Some basic readline-like shortcuts are supported, for example &lt;strong&gt;Ctrl+u&lt;&#x2F;strong&gt;, &lt;strong&gt;Ctrl+k&lt;&#x2F;strong&gt;, &lt;strong&gt;Ctrl+w&lt;&#x2F;strong&gt;, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Enter&lt;&#x2F;strong&gt; to execute the code.
&lt;ul&gt;
&lt;li&gt;Output would be displayed below the command box.&lt;&#x2F;li&gt;
&lt;li&gt;If the output matches the expected results, the solution box will turn &lt;em&gt;green&lt;&#x2F;em&gt; and a reference solution will also be shown.&lt;&#x2F;li&gt;
&lt;li&gt;Error messages due to exceptions will be displayed in &lt;em&gt;red&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+p&lt;&#x2F;strong&gt; and &lt;strong&gt;Ctrl+n&lt;&#x2F;strong&gt; to navigate the questions list.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+r&lt;&#x2F;strong&gt; to toggle between &lt;strong&gt;str&lt;&#x2F;strong&gt; and &lt;strong&gt;repr&lt;&#x2F;strong&gt; — helps to spot characters like tabs, newlines, backspaces, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+b&lt;&#x2F;strong&gt; to toggle between &lt;strong&gt;expected&lt;&#x2F;strong&gt; and &lt;strong&gt;actual&lt;&#x2F;strong&gt; — helps to debug incorrect solutions.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+s&lt;&#x2F;strong&gt; toggle reference solution&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+t&lt;&#x2F;strong&gt; to toggle between light and dark themes.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+q&lt;&#x2F;strong&gt; to quit the app.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;F1&lt;&#x2F;strong&gt; to view a detailed guide within the app itself and press &lt;strong&gt;F2&lt;&#x2F;strong&gt; to get back to the exercises.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Your progress will be automatically saved and restored. Already answered questions will be skipped.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; There is no safeguard against the code you are executing. They are treated as if you executed them from a Python program.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;PyRegexExercises&#x2F;app_guide.md&quot;&gt;app_guide.md&lt;&#x2F;a&gt; for more detailed instructions.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;ebook&quot;&gt;Ebook&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook&quot; aria-label=&quot;Anchor link for: ebook&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebook to learn regular expressions with hundreds of examples and exercises.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d highly appreciate your feedback. Please file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;issues&quot;&gt;an issue&lt;&#x2F;a&gt; if there are bugs, crashes, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Hope you find this TUI app useful. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 23: editing lines filtered by a pattern</title>
		<published>2023-03-14T00:00:00+00:00</published>
		<updated>2023-03-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-23/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-23/</id>
		<content type="html">&lt;p&gt;The syntax for &lt;code&gt;g&lt;&#x2F;code&gt; command (short for &lt;code&gt;global&lt;&#x2F;code&gt;) is shown below:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;:[range]g[lobal]&#x2F;{pattern}&#x2F;[cmd]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command is used to edit lines that are first filtered based on a &lt;code&gt;searchpattern&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:g&#x2F;call&#x2F;d&lt;&#x2F;kbd&gt; delete all lines containing &lt;code&gt;call&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;similar to the &lt;code&gt;d&lt;&#x2F;code&gt; Normal mode command, the deleted contents will be saved to the default &lt;code&gt;&amp;quot;&lt;&#x2F;code&gt; register&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:g&#x2F;call&#x2F;d a&lt;&#x2F;kbd&gt; in addition to the default register, the deleted content will also be stored in the &lt;code&gt;&amp;quot;a&lt;&#x2F;code&gt; register&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:g&#x2F;call&#x2F;d _&lt;&#x2F;kbd&gt; deleted content won&#x27;t be saved anywhere, since it uses the black hole register&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:g&#x2F;^#&#x2F;t0&lt;&#x2F;kbd&gt; copy all lines starting with &lt;code&gt;#&lt;&#x2F;code&gt; to the start of the file&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:1,5 g&#x2F;call&#x2F;d&lt;&#x2F;kbd&gt; delete all lines containing &lt;code&gt;call&lt;&#x2F;code&gt; only for the first five lines&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:g&#x2F;cat&#x2F; s&#x2F;animal&#x2F;mammal&#x2F;g&lt;&#x2F;kbd&gt; replace &lt;code&gt;animal&lt;&#x2F;code&gt; with &lt;code&gt;mammal&lt;&#x2F;code&gt; only for the lines containing &lt;code&gt;cat&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:.,.+20 g&#x2F;^#&#x2F; normal &amp;gt;&amp;gt;&lt;&#x2F;kbd&gt; indent the current line and the next &lt;code&gt;20&lt;&#x2F;code&gt; lines only if the line starts with &lt;code&gt;#&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Note the use of &lt;code&gt;normal&lt;&#x2F;code&gt; when you need to use Normal mode commands on the filtered lines&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;normal!&lt;&#x2F;code&gt; if you don&#x27;t want user defined mappings to be considered&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can use &lt;code&gt;g!&lt;&#x2F;code&gt; or &lt;code&gt;v&lt;&#x2F;code&gt; to act on lines &lt;em&gt;not&lt;&#x2F;em&gt; satisfying the filtering condition.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:v&#x2F;jump&#x2F;d&lt;&#x2F;kbd&gt; delete all lines &lt;em&gt;not&lt;&#x2F;em&gt; containing &lt;code&gt;jump&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;same as &lt;kbd&gt;:g!&#x2F;jump&#x2F;d&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; In addition to the &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; delimiter, you can also use any single byte character other than alphabets, &lt;code&gt;\&lt;&#x2F;code&gt;, &lt;code&gt;&amp;quot;&lt;&#x2F;code&gt; or &lt;code&gt;|&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;repeat.txt.html#%3Aglobal&quot;&gt;:h :g&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;uQKaAOKgr2o&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python Regular Expressions Playground</title>
		<published>2023-03-11T00:00:00+00:00</published>
		<updated>2025-01-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/python-regex-playground/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-regex-playground/</id>
		<content type="html">&lt;p&gt;This TUI application is intended as an interactive playground for Python Regular Expressions. The app also includes a comprehensive cheatsheet and several interactive examples.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;PyRegexPlayground&#x2F;pyregex_finditer.png&quot; alt=&quot;Sample screenshot from the Playground screen&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This app is available on PyPI as &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regexplayground&#x2F;&quot;&gt;regexplayground&lt;&#x2F;a&gt;. Example installation instructions are shown below, adjust them based on your preferences and OS.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# virtual environment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; venv textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; source bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pip install regexplayground
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# launch the app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; regexplayground
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To run the app without having to enter the virtual environment again, add this alias to &lt;code&gt;.bashrc&lt;&#x2F;code&gt; (or equivalent):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# you&amp;#39;ll have to change the path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;regexplayground&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;textual_apps&#x2F;bin&#x2F;regexplayground&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an alternative, you can install &lt;code&gt;textual==0.85.2&lt;&#x2F;code&gt; (see &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;getting_started&#x2F;&quot;&gt;Textual documentation&lt;&#x2F;a&gt; for more details), clone my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&quot;&gt;TUI-apps repository&lt;&#x2F;a&gt; and run the &lt;code&gt;pyregex_playground.py&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;Adjust the terminal dimensions for the widgets to appear properly, for example 84x25 (characters x lines). Here&#x27;s another screenshot:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;PyRegexPlayground&#x2F;pyregex_examples.png&quot; alt=&quot;Sample screenshot from the Interactive Examples screen&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;brief-guide&quot;&gt;Brief Guide&lt;a class=&quot;zola-anchor&quot; href=&quot;#brief-guide&quot; aria-label=&quot;Anchor link for: brief-guide&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can type the search pattern in the &lt;strong&gt;Compile&lt;&#x2F;strong&gt; input box and press the &lt;strong&gt;Enter&lt;&#x2F;strong&gt; key (or &lt;strong&gt;Ctrl+r&lt;&#x2F;strong&gt;) to execute. For example, &lt;code&gt;re.compile(r&#x27;\d&#x27;)&lt;&#x2F;code&gt; to match digit characters. Matching portions will be highlighted in red.&lt;&#x2F;p&gt;
&lt;p&gt;The compiled pattern is available via the &lt;code&gt;pat&lt;&#x2F;code&gt; variable and you can use &lt;code&gt;ip&lt;&#x2F;code&gt; to refer to the input string. You can transform or extract data by typing appropriate expression in the &lt;strong&gt;Action&lt;&#x2F;strong&gt; box. For example, &lt;code&gt;pat.sub(r&#x27;(\g&amp;lt;0&amp;gt;)&#x27;, ip)&lt;&#x2F;code&gt; will add parenthesis around the matching portions.&lt;&#x2F;p&gt;
&lt;p&gt;You can skip the Compile box and directly use the Action box too. For example, &lt;code&gt;[m.span() for m in re.finditer(r&#x27;\d+&#x27;, ip)]&lt;&#x2F;code&gt; to get the location of all the matching portions.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; There is no safeguard against the commands you have typed. They are treated as if you executed them from a Python program.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Press &lt;strong&gt;F1&lt;&#x2F;strong&gt; to view the detailed guide from within the app, &lt;strong&gt;F2&lt;&#x2F;strong&gt; to get back to the Playground from other screens, &lt;strong&gt;F3&lt;&#x2F;strong&gt; to view a cheatsheet and &lt;strong&gt;F4&lt;&#x2F;strong&gt; for interactive examples.&lt;&#x2F;p&gt;
&lt;p&gt;For more detailed instructions, see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;PyRegexPlayground&#x2F;app_guide.md&quot;&gt;app guide&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;ebook&quot;&gt;Ebook&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook&quot; aria-label=&quot;Anchor link for: ebook&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebook to learn regular expressions with hundreds of examples and exercises.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d highly appreciate your feedback. Please file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;issues&quot;&gt;an issue&lt;&#x2F;a&gt; if there are bugs, crashes, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Hope you find this TUI app useful. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 24: inserting file contents one line at a time</title>
		<published>2023-03-07T00:00:00+00:00</published>
		<updated>2023-03-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-24/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-24/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;R&lt;&#x2F;code&gt; command provided by &lt;code&gt;GNU sed&lt;&#x2F;code&gt; is very similar to &lt;code&gt;r&lt;&#x2F;code&gt; with respect to most of the rules seen in an earlier &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;cli-tip-18&#x2F;&quot;&gt;tip&lt;&#x2F;a&gt;. But instead of reading entire file contents, &lt;code&gt;R&lt;&#x2F;code&gt; will read one line at a time from the source file when the given address matches. If entire file has already been read and another address matches, &lt;code&gt;sed&lt;&#x2F;code&gt; will proceed as if the line was empty.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; sky
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; apple
&lt;&#x2F;span&gt;&lt;span&gt;$ cat fav_colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;deep red
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;reddish
&lt;&#x2F;span&gt;&lt;span&gt;brown
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# add a line from &amp;#39;ip.txt&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# whenever a line from &amp;#39;fav_colors.txt&amp;#39; contains &amp;#39;red&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;red&#x2F;R ip.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; fav_colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;deep red
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; sky
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;reddish
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; apple
&lt;&#x2F;span&gt;&lt;span&gt;brown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can combine with other &lt;code&gt;sed&lt;&#x2F;code&gt; commands to solve various kind of problems. For example, to replace the matching lines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# empty &#x2F;&#x2F; will refer to the previously used regex, &#x2F;red&#x2F; in this case
&lt;&#x2F;span&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;red&#x2F;R ip.txt&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;&#x2F;d&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; fav_colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; sky
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; apple
&lt;&#x2F;span&gt;&lt;span&gt;brown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And, here&#x27;s how you can interleave contents of two files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &#x2F;dev&#x2F;stdin will get data from stdin (output of &amp;#39;seq 4&amp;#39; here)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: seq 4 | paste -d&amp;#39;\n&amp;#39; fav_colors.txt -
&lt;&#x2F;span&gt;&lt;span&gt;$ seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;R &#x2F;dev&#x2F;stdin&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; fav_colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;deep red
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;reddish
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;brown
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# using &amp;#39;paste&amp;#39; here will add a newline when stdin runs out of data
&lt;&#x2F;span&gt;&lt;span&gt;$ seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;R &#x2F;dev&#x2F;stdin&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; fav_colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;deep red
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;reddish
&lt;&#x2F;span&gt;&lt;span&gt;brown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;W7LvN7X6Rfg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;CLI text processing with GNU sed&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 24: modifying list using insert and slice</title>
		<published>2023-02-28T00:00:00+00:00</published>
		<updated>2023-02-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-24/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-24/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;insert()&lt;&#x2F;code&gt; list method helps to insert an object before the given index. Negative indexing is also supported.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;books &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sourdough&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sherlock Holmes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: books.insert(-1, &amp;#39;The Martian&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;books.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;The Martian&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;books
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sourdough&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sherlock Holmes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;The Martian&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# index &amp;gt;= list-length will append the object at the end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;books.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Legends &amp;amp; Lattes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;books
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sourdough&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sherlock Holmes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;The Martian&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Legends &amp;amp; Lattes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use slicing notation to modify one or more list elements. The list will automatically shrink or expand as needed. Here are some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# modify a single element
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# modify the last three elements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;:] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# elements at index 1, 2 and 3 are replaced with a single object
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# element at index 1 is replaced with multiple elements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4.13&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6.78&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4.13&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6.78&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; RHS must be an iterable when you use slicing notation with &lt;code&gt;:&lt;&#x2F;code&gt;, even when LHS refers to a single element. For example, &lt;code&gt;nums[1:2] = 100&lt;&#x2F;code&gt; is not valid.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;fyFX1nBCeS4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 23: recursive filename matching with globstar</title>
		<published>2023-02-10T00:00:00+00:00</published>
		<updated>2023-02-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-23/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-23/</id>
		<content type="html">&lt;p&gt;Enable the &lt;code&gt;globstar&lt;&#x2F;code&gt; option to recursively match filenames within a specified path. You can use &lt;code&gt;shopt -s globstar&lt;&#x2F;code&gt; and &lt;code&gt;shopt -u globstar&lt;&#x2F;code&gt; to set and unset this option respectively.&lt;&#x2F;p&gt;
&lt;p&gt;First, create some sample files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ mkdir test_globstar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$_
&lt;&#x2F;span&gt;&lt;span&gt;$ mkdir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt; todos projects&#x2F;{tictactoe,calculator}
&lt;&#x2F;span&gt;&lt;span&gt;$ touch ip.txt .hidden.txt report.log hello.py
&lt;&#x2F;span&gt;&lt;span&gt;$ touch todos&#x2F;{books,outing}.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ touch projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tictactoe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;game.py projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;calculator&#x2F;{calc.sh,notes.txt}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ shopt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s globstar
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;calculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;notes.txt
&lt;&#x2F;span&gt;&lt;span&gt;todos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;books.txt
&lt;&#x2F;span&gt;&lt;span&gt;todos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;outing.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;*&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;calculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;notes.txt
&lt;&#x2F;span&gt;&lt;span&gt;todos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;books.txt
&lt;&#x2F;span&gt;&lt;span&gt;todos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;outing.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# assumes extglob is enabled
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.@(py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;sh)
&lt;&#x2F;span&gt;&lt;span&gt;hello.py
&lt;&#x2F;span&gt;&lt;span&gt;projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;calculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;calc.sh
&lt;&#x2F;span&gt;&lt;span&gt;projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tictactoe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;game.py
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;1d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;**&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;calculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tictactoe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;todos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If you need to match hidden files as well, enable the &lt;code&gt;dotglob&lt;&#x2F;code&gt; option:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ shopt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s dotglob
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;.hidden.txt
&lt;&#x2F;span&gt;&lt;span&gt;ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;calculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;notes.txt
&lt;&#x2F;span&gt;&lt;span&gt;todos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;books.txt
&lt;&#x2F;span&gt;&lt;span&gt;todos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;outing.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;wo5Szdi5VLA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Linux Command Line Computing&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 22: word and WORD motions</title>
		<published>2023-02-10T00:00:00+00:00</published>
		<updated>2023-02-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-22/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-22/</id>
		<content type="html">&lt;p&gt;Definitions from &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;motion.txt.html#word&quot;&gt;:h word&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;motion.txt.html#WORD&quot;&gt;:h WORD&lt;&#x2F;a&gt; are quoted below to explain the difference between &lt;strong&gt;word&lt;&#x2F;strong&gt; and &lt;strong&gt;WORD&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;word&lt;&#x2F;strong&gt; A word consists of a sequence of letters, digits and underscores, or a sequence of other non-blank characters, separated with white space (spaces, tabs, &lt;code&gt;&amp;lt;EOL&amp;gt;&lt;&#x2F;code&gt;). This can be changed with the &lt;code&gt;iskeyword&lt;&#x2F;code&gt; option. An empty line is also considered to be a word.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WORD&lt;&#x2F;strong&gt; A WORD consists of a sequence of non-blank characters, separated with white space. An empty line is also considered to be a WORD.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;word based motions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;w&lt;&#x2F;kbd&gt; move to the start of the next word&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;b&lt;&#x2F;kbd&gt; move to the beginning of the current word if the cursor is &lt;em&gt;not&lt;&#x2F;em&gt; at the start of word. Otherwise, move to the beginning of the previous word&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;e&lt;&#x2F;kbd&gt; move to the end of the current word if cursor is &lt;em&gt;not&lt;&#x2F;em&gt; at the end of word. Otherwise, move to the end of next word&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;ge&lt;&#x2F;kbd&gt; move to the end of the previous word&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3w&lt;&#x2F;kbd&gt; move 3 words forward
&lt;ul&gt;
&lt;li&gt;Similarly, a number can be prefixed for all the other commands discussed here&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;WORD based motions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;W&lt;&#x2F;kbd&gt; move to the start of the next WORD
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;192.1.168.43;hello&lt;&#x2F;code&gt; is considered as a single WORD, but has multiple words&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;B&lt;&#x2F;kbd&gt; move to the beginning of the current WORD if the cursor is &lt;em&gt;not&lt;&#x2F;em&gt; at the start of WORD. Otherwise, move to the beginning of the previous WORD&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;E&lt;&#x2F;kbd&gt; move to the end of the current WORD if cursor is &lt;em&gt;not&lt;&#x2F;em&gt; at the end of WORD. Otherwise, move to the end of next WORD&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gE&lt;&#x2F;kbd&gt; move to the end of the previous WORD&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; All of these motions will work across lines. For example, if the cursor is on the last word of a line, pressing &lt;kbd&gt;w&lt;&#x2F;kbd&gt; will move to the start of the first word in the next line.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;-1MKL82cbw8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 23: map, filter and reduce</title>
		<published>2023-02-07T00:00:00+00:00</published>
		<updated>2023-02-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-23/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-23/</id>
		<content type="html">&lt;p&gt;Many operations on container objects can be defined in terms of these three concepts. For example, if you want to sum the square of all even numbers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;separating out even numbers is &lt;strong&gt;Filter&lt;&#x2F;strong&gt; (i.e. only elements that satisfy a condition are retained)&lt;&#x2F;li&gt;
&lt;li&gt;square of such numbers is &lt;strong&gt;Map&lt;&#x2F;strong&gt; (i.e. each element is transformed by a mapping function)&lt;&#x2F;li&gt;
&lt;li&gt;final sum is &lt;strong&gt;Reduce&lt;&#x2F;strong&gt; (i.e. you get one value out of multiple values)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One or more of these operations may be absent depending on the problem statement. Each of these steps will be first illustrated using straightforward code and then the equivalent list comprehensions (and generator expressions) are also shown.&lt;&#x2F;p&gt;
&lt;p&gt;The first of these steps could look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;get_evens&lt;&#x2F;span&gt;&lt;span&gt;(iterable):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span&gt;op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;iterable:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...             &lt;&#x2F;span&gt;&lt;span&gt;op.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(n)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;op
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;get_evens&lt;&#x2F;span&gt;&lt;span&gt;(nums)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second step could be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sqr_evens&lt;&#x2F;span&gt;&lt;span&gt;(iterable):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span&gt;op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;iterable:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...             &lt;&#x2F;span&gt;&lt;span&gt;op.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;n)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;op
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sqr_evens&lt;&#x2F;span&gt;&lt;span&gt;(nums)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, the third step could be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sum_sqr_evens&lt;&#x2F;span&gt;&lt;span&gt;(iterable):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;iterable:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...             &lt;&#x2F;span&gt;&lt;span&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;n
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;total
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sum_sqr_evens&lt;&#x2F;span&gt;&lt;span&gt;(nums)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11028
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11028
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can also use &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions.html#map&quot;&gt;map()&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions.html#filter&quot;&gt;filter()&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functools.html#functools.reduce&quot;&gt;functools.reduce()&lt;&#x2F;a&gt; for such problems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;jB4cazhpThA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 21: working with tabs</title>
		<published>2023-02-01T00:00:00+00:00</published>
		<updated>2023-02-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-21/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-21/</id>
		<content type="html">&lt;p&gt;Multiple files can be opened in Vim within the same tab page and&#x2F;or in different tabs. From &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;windows.txt.html#windows-intro&quot;&gt;:h windows-intro&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A buffer is the in-memory text of a file.&lt;&#x2F;li&gt;
&lt;li&gt;A window is a viewport on a buffer.&lt;&#x2F;li&gt;
&lt;li&gt;A tab page is a collection of windows.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:tabe filename&lt;&#x2F;kbd&gt; open the given file in a new tab (&lt;code&gt;:tabe&lt;&#x2F;code&gt; is short for &lt;code&gt;:tabedit&lt;&#x2F;code&gt;)
&lt;ul&gt;
&lt;li&gt;if &lt;code&gt;filename&lt;&#x2F;code&gt; isn&#x27;t specified, you&#x27;ll get an unnamed empty window&lt;&#x2F;li&gt;
&lt;li&gt;by default, the new tab is opened to the right of the current tab&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:0tabe&lt;&#x2F;kbd&gt; open as the first tab&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:$tabe&lt;&#x2F;kbd&gt; open as the last tab&lt;&#x2F;li&gt;
&lt;li&gt;see &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;tabpage.txt.html#%3Atabnew&quot;&gt;:h :tabe&lt;&#x2F;a&gt; for more details and features&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Switching between tabs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:tabn&lt;&#x2F;kbd&gt; switch to the next tab (&lt;code&gt;:tabn&lt;&#x2F;code&gt; is short for &lt;code&gt;:tabnext&lt;&#x2F;code&gt;)
&lt;ul&gt;
&lt;li&gt;if tabs to the right are exhausted, switch to the first tab&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gt&lt;&#x2F;kbd&gt; and &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Page Down&lt;&#x2F;kbd&gt; can also be used&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;2gt&lt;&#x2F;kbd&gt; switch to the second tab (the number specified is absolute, not relative)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:tabp&lt;&#x2F;kbd&gt; switch to the previous tab (&lt;code&gt;:tabp&lt;&#x2F;code&gt; is short for &lt;code&gt;:tabprevious&lt;&#x2F;code&gt;)
&lt;ul&gt;
&lt;li&gt;if tabs to the left are exhausted, switch to the last tab&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gT&lt;&#x2F;kbd&gt; and &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Page Up&lt;&#x2F;kbd&gt;  can also be used&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:tabr&lt;&#x2F;kbd&gt; switch to the first tab (&lt;code&gt;:tabr&lt;&#x2F;code&gt; is short for &lt;code&gt;:tabrewind&lt;&#x2F;code&gt;)
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:tabfirst&lt;&#x2F;kbd&gt; can also be used&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:tabl&lt;&#x2F;kbd&gt; switch to the last tab (&lt;code&gt;:tabl&lt;&#x2F;code&gt; is short for &lt;code&gt;:tablast&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Moving tabs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:tabm N&lt;&#x2F;kbd&gt; move the current tab to after &lt;code&gt;N&lt;&#x2F;code&gt; tabs from the start (&lt;code&gt;:tabm&lt;&#x2F;code&gt; is short for &lt;code&gt;:tabmove&lt;&#x2F;code&gt;)
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:tabm 0&lt;&#x2F;kbd&gt; move the current tab to the beginning&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:tabm&lt;&#x2F;kbd&gt; move the current tab to the end&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:tabm +N&lt;&#x2F;kbd&gt; move the current tab &lt;code&gt;N&lt;&#x2F;code&gt; positions to the right&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:tabm -N&lt;&#x2F;kbd&gt; move the current tab &lt;code&gt;N&lt;&#x2F;code&gt; positions to the left&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Buffer list includes all the files opened in all the tabs. You can also use the mouse to switch&#x2F;move tabs in GVim.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;pQpWrrrYVTI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Understanding Python re(gex)? book announcement</title>
		<published>2023-01-30T00:00:00+00:00</published>
		<updated>2023-10-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/understanding-python-regex-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/understanding-python-regex-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I just published a new version of &amp;quot;&lt;strong&gt;Understanding Python re(gex)?&lt;&#x2F;strong&gt;&amp;quot; ebook. I caught up to new features like possessive quantifiers, corrected many mistakes, improved examples, exercises and so on.&lt;&#x2F;p&gt;
&lt;p&gt;This book will help you learn &lt;strong&gt;Python Regular Expressions&lt;&#x2F;strong&gt; step-by-step from beginner to advanced levels with &lt;strong&gt;hundreds of examples and exercises&lt;&#x2F;strong&gt;. The standard library &lt;code&gt;re&lt;&#x2F;code&gt; and the third-party &lt;code&gt;regex&lt;&#x2F;code&gt; module are covered in this book.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;release-offers&quot;&gt;Release offers&lt;a class=&quot;zola-anchor&quot; href=&quot;#release-offers&quot; aria-label=&quot;Anchor link for: release-offers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To celebrate the new release, you can download PDF&#x2F;EPUB versions of &lt;strong&gt;Understanding Python re(gex)?&lt;&#x2F;strong&gt; for FREE till 05-Feb-2023. You can still pay if you wish ;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&#x2F;c&#x2F;P7erPYAm1386&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some of my ebook bundles are on sale as well:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;pyregex_newrelease&quot;&gt;All books bundle&lt;&#x2F;a&gt; is $10 (normal price $32) — all my 13 programming ebooks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&#x2F;pyregex_newrelease&quot;&gt;Learn by example Python bundle&lt;&#x2F;a&gt; is $5 (normal price $16) — Intro, Regular expressions and Projects&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; on how to customize &lt;code&gt;pandoc&lt;&#x2F;code&gt; for generating beautiful PDF&#x2F;EPUB versions from GitHub style markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s new?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-new&quot; aria-label=&quot;Anchor link for: what-s-new&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Python version updated to 3.11
&lt;ul&gt;
&lt;li&gt;Possessive quantifiers and Atomic grouping are now supported by the &lt;code&gt;re&lt;&#x2F;code&gt; module&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;&#x2F;code&gt; module
&lt;ul&gt;
&lt;li&gt;corrected examples and descriptions for &lt;code&gt;\G&lt;&#x2F;code&gt; and &lt;code&gt;\K&lt;&#x2F;code&gt; features&lt;&#x2F;li&gt;
&lt;li&gt;added railroad diagram for the recursive matching section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;In general, many of the examples, exercises, solutions, descriptions and external links were updated&#x2F;corrected&lt;&#x2F;li&gt;
&lt;li&gt;Updated Acknowledgements section&lt;&#x2F;li&gt;
&lt;li&gt;Code snippets related to info&#x2F;warning sections will now appear as a single block&lt;&#x2F;li&gt;
&lt;li&gt;New section added for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PyRegexPlayground&quot;&gt;re(gex)? playground&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Book title changed to &lt;strong&gt;Understanding Python re(gex)?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;New cover image&lt;&#x2F;li&gt;
&lt;li&gt;Images centered for EPUB format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;a class=&quot;zola-anchor&quot; href=&quot;#videos&quot; aria-label=&quot;Anchor link for: videos&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;2x2n7ynamm8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this blog, I &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;post tips&lt;&#x2F;a&gt; covering Python, command line tools and Vim. Here are video demos for these tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=THSMmCZQn1A&amp;amp;list=PLTv2U3HnAL4PlFDiH3FXTHXRbhWs2sB3F&quot;&gt;Python tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=p0KCLusMd5Q&amp;amp;list=PLTv2U3HnAL4PNTmRqZBSUgKaiHbRL2zeY&quot;&gt;Linux command line tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;re-gex-playground&quot;&gt;re(gex)? playground&lt;a class=&quot;zola-anchor&quot; href=&quot;#re-gex-playground&quot; aria-label=&quot;Anchor link for: re-gex-playground&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To make it easier to experiment, I wrote on an interactive app. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PyRegexPlayground&quot;&gt;PyRegexPlayground&lt;&#x2F;a&gt; repo for installation instructions and usage guide. A sample screenshot is shown below:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;PyRegexPlayground&#x2F;pyregex_finditer.png&quot; alt=&quot;Sample screenshot from the Playground screen&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;re-gex-exercises&quot;&gt;re(gex)? exercises&lt;a class=&quot;zola-anchor&quot; href=&quot;#re-gex-exercises&quot; aria-label=&quot;Anchor link for: re-gex-exercises&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I wrote another TUI app to help you solve exercises from this book interactively. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PyRegexExercises&quot;&gt;PyRegexExercises&lt;&#x2F;a&gt; repo for installation steps and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;PyRegexExercises&#x2F;app_guide.md&quot;&gt;app_guide.md&lt;&#x2F;a&gt; for instructions on using this app. Here&#x27;s a sample screenshot:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;PyRegexExercises&#x2F;pyregex_exercises.png&quot; alt=&quot;Sample screenshot for Python regex exercises&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Why is it needed?&lt;&#x2F;li&gt;
&lt;li&gt;re introduction&lt;&#x2F;li&gt;
&lt;li&gt;Anchors&lt;&#x2F;li&gt;
&lt;li&gt;Alternation and Grouping&lt;&#x2F;li&gt;
&lt;li&gt;Escaping metacharacters&lt;&#x2F;li&gt;
&lt;li&gt;Dot metacharacter and Quantifiers&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Tools for debugging and visualization&lt;&#x2F;li&gt;
&lt;li&gt;Working with matched portions&lt;&#x2F;li&gt;
&lt;li&gt;Character class&lt;&#x2F;li&gt;
&lt;li&gt;Groupings and backreferences&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Common tasks&lt;&#x2F;li&gt;
&lt;li&gt;Lookarounds&lt;&#x2F;li&gt;
&lt;li&gt;Flags&lt;&#x2F;li&gt;
&lt;li&gt;Unicode&lt;&#x2F;li&gt;
&lt;li&gt;regex module&lt;&#x2F;li&gt;
&lt;li&gt;Gotchas&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&lt;&#x2F;a&gt; for markdown source, example files, exercise solutions, sample chapters and other details related to the book.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Subscribe to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; — free newsletter covering programming resources, updates on what I am creating, tips, tools, free ebooks and more, delivered every Friday.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-errata&quot;&gt;Feedback and Errata&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-errata&quot; aria-label=&quot;Anchor link for: feedback-and-errata&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I would highly appreciate if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;learn by example.net@gmail.com&lt;&#x2F;code&gt; (without the spaces)&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 22: grep options to suppress stdout and stderr</title>
		<published>2023-01-25T00:00:00+00:00</published>
		<updated>2023-01-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-22/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-22/</id>
		<content type="html">&lt;p&gt;While writing scripts, sometimes you just need to know if a file contains the pattern and act based on the exit status of the command. Instead of redirecting the output to &lt;code&gt;&#x2F;dev&#x2F;null&lt;&#x2F;code&gt; you can use the &lt;code&gt;-q&lt;&#x2F;code&gt; option. This will avoid printing anything on &lt;code&gt;stdout&lt;&#x2F;code&gt; and also provides speed benefit as processing would be stopped as soon as the given condition is satisfied.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat find.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;The&lt;&#x2F;span&gt;&lt;span&gt; find command is more versatile than recursive options &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;extended&lt;&#x2F;span&gt;&lt;span&gt; globs. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Apart&lt;&#x2F;span&gt;&lt;span&gt; from searching based on filename, it
&lt;&#x2F;span&gt;&lt;span&gt;has provisions to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; based on the the file characteristics
&lt;&#x2F;span&gt;&lt;span&gt;like size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; time.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;wE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\w+) \1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; find.txt
&lt;&#x2F;span&gt;&lt;span&gt;has provisions to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; based on the the file characteristics
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;qwE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\w+) \1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; find.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xyz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; find.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;qwE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\w+) \1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; find.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Repeated words found!&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Repeated&lt;&#x2F;span&gt;&lt;span&gt; words found!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;-s&lt;&#x2F;code&gt; option will suppress the error messages that are intended for the &lt;code&gt;stderr&lt;&#x2F;code&gt; stream.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# when the input file doesn&amp;#39;t exist
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;in&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; xyz.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;grep:&lt;&#x2F;span&gt;&lt;span&gt; xyz.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;No&lt;&#x2F;span&gt;&lt;span&gt; such file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; directory
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;in&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; xyz.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# when sufficient permission is not available
&lt;&#x2F;span&gt;&lt;span&gt;$ touch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ chmod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;rose&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;grep: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Permission&lt;&#x2F;span&gt;&lt;span&gt; denied
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;rose&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Errors regarding regular expressions and invalid options will be on the &lt;code&gt;stderr&lt;&#x2F;code&gt; stream even when the &lt;code&gt;-s&lt;&#x2F;code&gt; option is used.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;sE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a(&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; find.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;grep: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Unmatched &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; \(
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;sE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a(&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; find.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;dev&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;nu&lt;&#x2F;span&gt;&lt;span&gt;ll
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Check out my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;command_help&#x2F;blob&#x2F;master&#x2F;ch&quot;&gt;&lt;code&gt;ch&lt;&#x2F;code&gt; command line tool&lt;&#x2F;a&gt; for a practical example of using the &lt;code&gt;-q&lt;&#x2F;code&gt; option.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Pjud7hEjZ6Q&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;a&gt; ebook if you are interested in learning about &lt;code&gt;GNU grep&lt;&#x2F;code&gt; and &lt;code&gt;ripgrep&lt;&#x2F;code&gt; commands in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python Regex Surprises</title>
		<published>2023-01-21T00:00:00+00:00</published>
		<updated>2023-02-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/python-regex-surprises/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-regex-surprises/</id>
		<content type="html">&lt;p&gt;In this post, you&#x27;ll find a few regular expression examples that might surprise you. Some are Python specific and some are applicable to other regex flavors as well. To make it more interesting, these are framed as questions for you to ponder upon. Answers are hidden by default.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_regex_surprises.png&quot; alt=&quot;Python Regex Surprises&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Poster created using &lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;&quot;&gt;Canva&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If you are not familiar with regular expressions, check out my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;vs-z&quot;&gt;$ vs \Z&lt;a class=&quot;zola-anchor&quot; href=&quot;#vs-z&quot; aria-label=&quot;Anchor link for: vs-z&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Are the &lt;code&gt;$&lt;&#x2F;code&gt; and &lt;code&gt;\Z&lt;&#x2F;code&gt; anchors equivalent?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;&lt;code&gt;$&lt;&#x2F;code&gt; can match both the end of string and just before &lt;code&gt;\n&lt;&#x2F;code&gt; if it is the last character. &lt;code&gt;\Z&lt;&#x2F;code&gt; will only match the end of string.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;greeting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi there&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;have a nice day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, greeting))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, greeting))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, greeting))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, greeting))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;slicing-vs-start-and-end-arguments&quot;&gt;Slicing vs start and end arguments&lt;a class=&quot;zola-anchor&quot; href=&quot;#slicing-vs-start-and-end-arguments&quot; aria-label=&quot;Anchor link for: slicing-vs-start-and-end-arguments&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Did you know that you can specify &lt;em&gt;start&lt;&#x2F;em&gt; and &lt;em&gt;end&lt;&#x2F;em&gt; index arguments for compiled methods?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Pattern.search(string[, pos[, endpos]])&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now, here&#x27;s a conundrum:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;word_pat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(word_pat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cater&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:]))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# what will be the output?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(word_pat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cater&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
Specifying a greater than &lt;code&gt;0&lt;&#x2F;code&gt; start index when using &lt;code&gt;\A&lt;&#x2F;code&gt; is always going to return &lt;code&gt;False&lt;&#x2F;code&gt;. This is because, as far as the &lt;code&gt;search()&lt;&#x2F;code&gt; method is concerned, only the search space has been narrowed — the anchor positions haven&#x27;t changed. When slicing is used, you are creating an entirely new string object with new anchor positions.
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;do-and-match-after-the-last-newline&quot;&gt;Do ^ and $ match after the last newline?&lt;a class=&quot;zola-anchor&quot; href=&quot;#do-and-match-after-the-last-newline&quot; aria-label=&quot;Anchor link for: do-and-match-after-the-last-newline&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When you use the &lt;code&gt;re.MULTILINE&lt;&#x2F;code&gt; flag, the &lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; anchors will match at the start and end of every input line. Question is, will they also match after a newline character at the end of the input?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;Yes, they will both match after the last newline character.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;(?m)^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;apple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;apple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;apple 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;(?m)$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; banana&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt; banana
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;word-boundary-vs-lookarounds&quot;&gt;Word boundary vs lookarounds&lt;a class=&quot;zola-anchor&quot; href=&quot;#word-boundary-vs-lookarounds&quot; aria-label=&quot;Anchor link for: word-boundary-vs-lookarounds&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;\b..\b&lt;&#x2F;code&gt; is same as &lt;code&gt;(?&amp;lt;!\w)..(?!\w)&lt;&#x2F;code&gt; — True or False?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;False! &lt;code&gt;\b&lt;&#x2F;code&gt; matches both the start and end of word locations. In the below example, &lt;code&gt;\b..\b&lt;&#x2F;code&gt; doesn&#x27;t necessarily mean that the first &lt;code&gt;\b&lt;&#x2F;code&gt; will match only the start of word location and the second &lt;code&gt;\b&lt;&#x2F;code&gt; will match only the end of word location. They can be any combination! For example, &lt;code&gt;I&lt;&#x2F;code&gt; followed by space in the input string here is using the start of word location for both the conditions. Similarly, space followed by &lt;code&gt;2&lt;&#x2F;code&gt; is using the end of word location for both the conditions.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast, the negative lookarounds version ensures that there are no word characters around any two characters. Also, such assertions will always be satisfied at the start of string and the end of string respectively. But &lt;code&gt;\b&lt;&#x2F;code&gt; depends on the presence of word characters. For example, &lt;code&gt;!&lt;&#x2F;code&gt; at the end of the input string here matches the lookaround assertion but not word boundary.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;I have 12, he has 2!&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;font-style:italic;color:#d2a8a1;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;0&amp;gt;}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{I }have &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{12}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;{, }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{he}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt; has{ 2}!&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;!\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;font-style:italic;color:#d2a8a1;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;0&amp;gt;}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;I have &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{12}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{he}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt; has {2!}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;undefined-escape-sequences&quot;&gt;Undefined escape sequences&lt;a class=&quot;zola-anchor&quot; href=&quot;#undefined-escape-sequences&quot; aria-label=&quot;Anchor link for: undefined-escape-sequences&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you use undefined escape sequences like &lt;code&gt;\e&lt;&#x2F;code&gt;, will you get an error or will it match the unescaped character (&lt;code&gt;e&lt;&#x2F;code&gt; for this example`)?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;Python raises an exception for escape sequences that are not defined. Apart from sequences defined for character sets (for example &lt;code&gt;\d&lt;&#x2F;code&gt;, &lt;code&gt;\w&lt;&#x2F;code&gt;, &lt;code&gt;\s&lt;&#x2F;code&gt;, etc), these are allowed: &lt;code&gt;\a \b \f \n \N \r \t \u \U \v \x \\&lt;&#x2F;code&gt; where &lt;code&gt;\b&lt;&#x2F;code&gt; means backspace only in character classes. Also, &lt;code&gt;\u&lt;&#x2F;code&gt; and &lt;code&gt;\U&lt;&#x2F;code&gt; are valid only in Unicode patterns.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;re.error: bad escape \&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;c at position 0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;using-octal-and-hexadecimal-escapes-in-the-replacement-section&quot;&gt;Using octal and hexadecimal escapes in the replacement section&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-octal-and-hexadecimal-escapes-in-the-replacement-section&quot; aria-label=&quot;Anchor link for: using-octal-and-hexadecimal-escapes-in-the-replacement-section&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In string literals, you can use octal, hexadecimal and unicode escapes to represent a character. For example, &lt;code&gt;&#x27;\174&#x27;&lt;&#x2F;code&gt; is same as using &lt;code&gt;&#x27;|&#x27;&lt;&#x2F;code&gt;. Do you know which of these escapes you can use inside raw strings in the replacement section of the &lt;code&gt;sub()&lt;&#x2F;code&gt; function?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;Only octal escapes are allowed inside raw strings in the replacement section. If you are otherwise not using the &lt;code&gt;\&lt;&#x2F;code&gt; character, then using normal strings in the replacement section is preferred as it will also allow hexadecimal and unicode escapes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;7c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;re.error: bad escape \&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;x at position 0&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1|2&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\x7c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1|2&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I feel like it would have been rather better if octal escapes were also not allowed. That would have allowed us to use &lt;code&gt;\0&lt;&#x2F;code&gt; instead of &lt;code&gt;\g&amp;lt;0&amp;gt;&lt;&#x2F;code&gt; for backreferencing the entire matched portion in the replacement section.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;using-escape-sequences-for-metacharacters&quot;&gt;Using escape sequences for metacharacters&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-escape-sequences-for-metacharacters&quot; aria-label=&quot;Anchor link for: using-escape-sequences-for-metacharacters&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the search section, if you use an escape (for example, &lt;code&gt;\x7c&lt;&#x2F;code&gt; to represent the &lt;code&gt;|&lt;&#x2F;code&gt; character), will it behave as the alternation metacharacter or match it literally?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;5&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;12|30&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;15|50&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# what will be the output?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;7c3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;5&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;12|30&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;The output will be &lt;code&gt;&#x27;150&#x27;&lt;&#x2F;code&gt; since escapes will be treated literally.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;empty-matches&quot;&gt;Empty matches&lt;a class=&quot;zola-anchor&quot; href=&quot;#empty-matches&quot; aria-label=&quot;Anchor link for: empty-matches&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You are likely to have come across this before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# what will be the output?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;,cat,tiger&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;See also &lt;a href=&quot;https:&#x2F;&#x2F;www.regular-expressions.info&#x2F;zerolength.html&quot;&gt;Zero-Length Matches&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# there is an extra empty string match at the end of matches
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;,cat,tiger&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{cat}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{tiger}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;,cat,tiger&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{cat}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{tiger}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use lookarounds as a workaround
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;,cat,tiger&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{cat}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{tiger}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;can-quantifiers-be-grouped-out&quot;&gt;Can quantifiers be grouped out?&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-quantifiers-be-grouped-out&quot; aria-label=&quot;Anchor link for: can-quantifiers-be-grouped-out&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Similar to &lt;code&gt;a(b+c)d = abd+acd&lt;&#x2F;code&gt; in maths, you get &lt;code&gt;a(b|c)d = abd|acd&lt;&#x2F;code&gt; in regular expressions. &lt;code&gt;(a*|b*)&lt;&#x2F;code&gt; is same as &lt;code&gt;(a|b)*&lt;&#x2F;code&gt; — True or False?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;mini&#x2F;regexp_gotcha_1.png&quot; alt=&quot;Regexp grouping with quantifiers gotcha&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Railroad diagram created using &lt;a href=&quot;https:&#x2F;&#x2F;www.debuggex.com&#x2F;&quot;&gt;debuggex.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;False. Because &lt;code&gt;(a*|b*)&lt;&#x2F;code&gt; will match only sequences like &lt;code&gt;a&lt;&#x2F;code&gt;, &lt;code&gt;aaa&lt;&#x2F;code&gt;, &lt;code&gt;bb&lt;&#x2F;code&gt;, &lt;code&gt;bbbbbbbb&lt;&#x2F;code&gt;. But &lt;code&gt;(a|b)*&lt;&#x2F;code&gt; can match mixed sequences like &lt;code&gt;ababbba&lt;&#x2F;code&gt; too.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;portion-captured-by-a-quantified-group&quot;&gt;Portion captured by a quantified group&lt;a class=&quot;zola-anchor&quot; href=&quot;#portion-captured-by-a-quantified-group&quot; aria-label=&quot;Anchor link for: portion-captured-by-a-quantified-group&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This should be another familiar regex gotcha:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# what will be the output?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;,)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2,3,4,5,6,7&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;Referring to the text matched by a capture group with a quantifier will give only the last match, not the entire match. You&#x27;ll need an outer capture group to get the entire matched portion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;,)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2,3,4,5,6,7&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;3,(4),5,6,7&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;((?:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;,)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2,3,4,5,6,7&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2,3,(4),5,6,7&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;character-combinations&quot;&gt;Character combinations&lt;a class=&quot;zola-anchor&quot; href=&quot;#character-combinations&quot; aria-label=&quot;Anchor link for: character-combinations&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;\b[a-z](on|no)[a-z]\b&lt;&#x2F;code&gt; is same as &lt;code&gt;\b[a-z][on]{2}[a-z]\b&lt;&#x2F;code&gt; — True or False?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;False. &lt;code&gt;[on]{2}&lt;&#x2F;code&gt; will also match &lt;code&gt;oo&lt;&#x2F;code&gt; and &lt;code&gt;nn&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;known mood know pony inns&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;a-z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(?:on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;no)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;a-z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, words)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;know&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;pony&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;a-z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;][on]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;a-z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, words)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mood&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;know&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;pony&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;inns&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;greedy-vs-possessive&quot;&gt;Greedy vs Possessive&lt;a class=&quot;zola-anchor&quot; href=&quot;#greedy-vs-possessive&quot; aria-label=&quot;Anchor link for: greedy-vs-possessive&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose you want to match integer numbers greater than or equal to &lt;code&gt;100&lt;&#x2F;code&gt; where these numbers can optionally have leading zeros. Will the below code work? If not, what would you use instead?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 314 001 12 00984&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# will this work?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;No. You can either modify the pattern such that &lt;code&gt;0*&lt;&#x2F;code&gt; won&#x27;t interfere or use possessive quantifiers to prevent backtracking.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 314 001 12 00984&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this solution fails because 0* and \d{3,} can both match leading zeros
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# and greedy quantifiers will give up characters to help overall RE succeed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;001&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# 0*+ is possessive, will never give back leading zeros
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# workaround if possessive isn&amp;#39;t supported
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1-9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my blog post on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;python-regex-possessive-quantifier&#x2F;&quot;&gt;possessive quantifiers and atomic grouping&lt;&#x2F;a&gt; for more examples, details about catastrophic backtracking and so on.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;optional-flags-argument&quot;&gt;Optional flags argument&lt;a class=&quot;zola-anchor&quot; href=&quot;#optional-flags-argument&quot; aria-label=&quot;Anchor link for: optional-flags-argument&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Will the &lt;code&gt;sub()&lt;&#x2F;code&gt; function in the code sample below match case insensitively or not?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;KEY portkey oKey Keyed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, re.I)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;KEY&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;key&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Key&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Key&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# what will be the output?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;KEY portkey oKey Keyed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, re.I)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;You should always pass flags as a keyword argument. Using it as positional argument leads to a common mistake between &lt;code&gt;re.findall()&lt;&#x2F;code&gt; and &lt;code&gt;re.sub()&lt;&#x2F;code&gt; functions due to difference in their placement.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;re.findall(pattern, string, flags=0)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;re.sub(pattern, repl, string, count=0, flags=0)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; +&lt;&#x2F;span&gt;&lt;span&gt;re.I
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# works because flags is the only optional argument for findall
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;KEY portkey oKey Keyed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, re.I)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;KEY&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;key&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Key&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Key&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# wrong usage, but no error because re.I has a value of 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# so, this is same as specifying count=2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;KEY portkey oKey Keyed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, re.I)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;KEY port(key) oKey Keyed&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# correct use of keyword argument
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;KEY portkey oKey Keyed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;re.I)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(KEY) port(key) o(Key) (Key)ed&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# alternatively, you can use inline flags to avoid this problem altogether
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;(?i)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;KEY portkey oKey Keyed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(KEY) port(key) o(Key) (Key)ed&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;re-vs-regex-module-flags&quot;&gt;re vs regex module flags&lt;a class=&quot;zola-anchor&quot; href=&quot;#re-vs-regex-module-flags&quot; aria-label=&quot;Anchor link for: re-vs-regex-module-flags&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The third-party &lt;code&gt;regex&lt;&#x2F;code&gt; module is handy for advanced features like subexpression calls, skipping matches and so on. Can you use &lt;code&gt;re&lt;&#x2F;code&gt; module flag constants with the &lt;code&gt;regex&lt;&#x2F;code&gt; module?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;&lt;i style=&quot;color:gray&quot;&gt;Click to view answer&lt;&#x2F;i&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;When using the flags argument with the &lt;code&gt;regex&lt;&#x2F;code&gt; module, the constants should also be used from the &lt;code&gt;regex&lt;&#x2F;code&gt; module.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; +&lt;&#x2F;span&gt;&lt;span&gt;re.A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;256
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; +&lt;&#x2F;span&gt;&lt;span&gt;regex.A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;128
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, you can use inline flags to avoid such issues.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;br&gt;
&lt;h2 id=&quot;understanding-python-re-gex-book&quot;&gt;Understanding Python re(gex)? book&lt;a class=&quot;zola-anchor&quot; href=&quot;#understanding-python-re-gex-book&quot; aria-label=&quot;Anchor link for: understanding-python-re-gex-book&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit my GitHub repo &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; for details about the book I wrote on Python regular expressions. The ebook uses plenty of examples to explain the concepts from the very beginning and step by step introduces more advanced concepts. The book also covers the &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;third-party module regex&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 20: character based motions within the current line</title>
		<published>2023-01-10T00:00:00+00:00</published>
		<updated>2023-01-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-20/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-20/</id>
		<content type="html">&lt;p&gt;These commands allow you to move based on a single character search, &lt;strong&gt;within the current line only&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;f(&lt;&#x2F;kbd&gt; move forward to the next occurrence of character &lt;code&gt;(&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;fb&lt;&#x2F;kbd&gt; move forward to the next occurrence of character &lt;code&gt;b&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3f&amp;quot;&lt;&#x2F;kbd&gt; move forward to the third occurrence of character &lt;code&gt;&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;t;&lt;&#x2F;kbd&gt; move forward to the character just before &lt;code&gt;;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3tx&lt;&#x2F;kbd&gt; move forward to the character just before the third occurrence of character &lt;code&gt;x&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Fa&lt;&#x2F;kbd&gt; move backward to the character &lt;code&gt;a&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ta&lt;&#x2F;kbd&gt; move backward to the character just after &lt;code&gt;a&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;;&lt;&#x2F;kbd&gt; repeat previous &lt;code&gt;f&lt;&#x2F;code&gt; or &lt;code&gt;F&lt;&#x2F;code&gt; or &lt;code&gt;t&lt;&#x2F;code&gt; or &lt;code&gt;T&lt;&#x2F;code&gt; motion in the same direction&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;,&lt;&#x2F;kbd&gt; repeat previous &lt;code&gt;f&lt;&#x2F;code&gt; or &lt;code&gt;F&lt;&#x2F;code&gt; or &lt;code&gt;t&lt;&#x2F;code&gt; or &lt;code&gt;T&lt;&#x2F;code&gt; motion in the opposite direction
&lt;ul&gt;
&lt;li&gt;for example, &lt;kbd&gt;tc&lt;&#x2F;kbd&gt; becomes &lt;kbd&gt;Tc&lt;&#x2F;kbd&gt; and vice versa&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Note that the previously used count prefix wouldn&#x27;t be repeated with &lt;kbd&gt;;&lt;&#x2F;kbd&gt; or &lt;kbd&gt;,&lt;&#x2F;kbd&gt; commands, but you can use a new count prefix. If you pressed a wrong motion command, use the &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt; key to abandon the search instead of continuing with the wrongly chosen command.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;WFRJmeaQr60&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 21: inplace file editing with GNU awk</title>
		<published>2023-01-04T00:00:00+00:00</published>
		<updated>2023-09-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-21/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-21/</id>
		<content type="html">&lt;p&gt;You can use the &lt;code&gt;-i&lt;&#x2F;code&gt; option with &lt;code&gt;GNU awk&lt;&#x2F;code&gt; to load libraries. The &lt;code&gt;inplace&lt;&#x2F;code&gt; library comes by default with the &lt;code&gt;GNU awk&lt;&#x2F;code&gt; installation. Thus, you can use &lt;code&gt;-i inplace&lt;&#x2F;code&gt; to modify the original input itself. Make sure to test that the code is working as intended before using this option.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat table.txt
&lt;&#x2F;span&gt;&lt;span&gt;brown bread mat cake &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;blue cake mug shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;yellow banana window shoes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# retain only the first and third fields
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;i inplace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print $1, $3}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; table.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ cat table.txt
&lt;&#x2F;span&gt;&lt;span&gt;brown mat
&lt;&#x2F;span&gt;&lt;span&gt;blue mug
&lt;&#x2F;span&gt;&lt;span&gt;yellow window
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can provide a backup extension by setting the &lt;code&gt;inplace::suffix&lt;&#x2F;code&gt; special variable. For example, if the input file is &lt;code&gt;ip.txt&lt;&#x2F;code&gt; and &lt;code&gt;inplace::suffix=&#x27;.orig&#x27;&lt;&#x2F;code&gt; is used, the backup file will be named as &lt;code&gt;ip.txt.orig&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat marks.txt
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name    Physics  Maths
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Moe  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;76  82
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Raj  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;56  64
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;i inplace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v inplace::suffix=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;.bkp&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;OFS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; marks.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ cat marks.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Physics&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Maths
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Moe&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;76&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;82
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Raj&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;56&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;64
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# original file is preserved in &amp;#39;marks.txt.bkp&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat marks.txt.bkp
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name    Physics  Maths
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Moe  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;76  82
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Raj  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;56  64
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Earlier versions of &lt;code&gt;GNU awk&lt;&#x2F;code&gt; used &lt;code&gt;INPLACE_SUFFIX&lt;&#x2F;code&gt; variable instead of &lt;code&gt;inplace::suffix&lt;&#x2F;code&gt;. Also, you can use &lt;code&gt;inplace::enable&lt;&#x2F;code&gt; variable to dynamically control whether files should be inplaced or not. See &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gawk&#x2F;manual&#x2F;gawk.html#Extension-Sample-Inplace&quot;&gt;gawk manual: Enabling In-Place File Editing&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;q&#x2F;749645&#x2F;109046&quot;&gt;this unix.stackexchange thread&lt;&#x2F;a&gt; for details about security implications of using the &lt;code&gt;-i&lt;&#x2F;code&gt; option and workarounds.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;yfO-HVTBoSI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; ebook if you are interested in learning about the &lt;code&gt;GNU awk&lt;&#x2F;code&gt; command in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2022: year in perspective</title>
		<published>2022-12-30T00:00:00+00:00</published>
		<updated>2022-12-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/2022-year-in-perspective/" type="text/html"/>
		<id>https://learnbyexample.github.io/2022-year-in-perspective/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt;: Published two programming ebooks, wrote several blog posts, recorded plenty of Youtube videos, newsletter prospered, improved Twitter audience, read 100+ novels, and so on. Had an excellent year in terms of ebook sales 😇&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;books-published&quot;&gt;Books published&lt;a class=&quot;zola-anchor&quot; href=&quot;#books-published&quot; aria-label=&quot;Anchor link for: books-published&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; — concise learning resource for beginner to intermediate level Vim users, published in March&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Computing from the Command Line&lt;&#x2F;a&gt; — Linux command line tools and Shell Scripting for beginner to intermediate level users, published in November&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;2022_books.png&quot; alt=&quot;Programming books published in 2022&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;workshops&quot;&gt;Workshops&lt;a class=&quot;zola-anchor&quot; href=&quot;#workshops&quot; aria-label=&quot;Anchor link for: workshops&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Offline workshops were back on menu this year. I got only one offer though. Surprisingly, it was for Python basics, despite students already having had a course in their first year. It was a nice experience for me, thanks to the enthusiasm shown by the students.&lt;&#x2F;p&gt;
&lt;p&gt;And it was good to see &lt;a href=&quot;https:&#x2F;&#x2F;barcampbangalore.com&#x2F;bcb&#x2F;&quot;&gt;BarCamp Bangalore&lt;&#x2F;a&gt; being organized again. Gave a talk about my ebook publishing experience (I had also written a &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;my-book-writing-experience&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; on this topic last year).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;blog-posts&quot;&gt;Blog posts&lt;a class=&quot;zola-anchor&quot; href=&quot;#blog-posts&quot; aria-label=&quot;Anchor link for: blog-posts&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here are my favorite posts I wrote this year:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;interactive-linux-cli-exercises&#x2F;&quot;&gt;Interactive Linux CLI Text Processing Exercises&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;textual-first-impressions&#x2F;&quot;&gt;Building TUIs with textual: first impressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;python-regex-possessive-quantifier&#x2F;&quot;&gt;Python 3.11: possessive quantifiers added to re module&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;came to know that this post &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;s_gruppetta_ct&#x2F;status&#x2F;1596097402381176832&quot;&gt;ranks high during online searches&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;duplicates-irrespective-field-order&#x2F;&quot;&gt;Removing duplicates irrespective of field order&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I continued posting &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;weekly programming tips&lt;&#x2F;a&gt; (Python, Linux, Vim) that are short and easy to digest and wrote some &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;mini&#x2F;&quot;&gt;mini blog posts&lt;&#x2F;a&gt; as well.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;a class=&quot;zola-anchor&quot; href=&quot;#tools&quot; aria-label=&quot;Anchor link for: tools&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;During the last two months of the year, I learned a bit of &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;&quot;&gt;Textual&lt;&#x2F;a&gt; and wrote a couple of TUI apps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;SquareTicTacToe&quot;&gt;Square Tic Tac Toe&lt;&#x2F;a&gt; — form a square with 4 corners&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;CLI-Exercises&quot;&gt;Linux CLI Text Processing Exercises&lt;&#x2F;a&gt; — test your CLI text processing skills&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I found the framework much easier to use compared to my experience with Tkinter.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;youtube&quot;&gt;Youtube&lt;a class=&quot;zola-anchor&quot; href=&quot;#youtube&quot; aria-label=&quot;Anchor link for: youtube&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;While working on the Vim Reference Guide, I felt that some of the commands really needed video demos for easier understanding. So, I gave myself another chance at recording videos. I kept them simple and short, and with consistent practice I did better than my attempts a few years back. I then extended my new found enthusiasm to programming tips, ebook promo videos, etc. Visit my &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;learnbyexample42&quot;&gt;youtube channel&lt;&#x2F;a&gt; for interesting tech nuggets.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the tools I use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MaartenBaert&#x2F;ssr&quot;&gt;SimpleScreenRecorder&lt;&#x2F;a&gt; — recording video, really simple to use&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WyattBlue&#x2F;auto-editor&quot;&gt;auto-editor&lt;&#x2F;a&gt; — removing silent portions from video recordings&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FFmpeg&#x2F;FFmpeg&quot;&gt;FFmpeg&lt;&#x2F;a&gt; — video processing, padding for example (&lt;code&gt;FFmpeg&lt;&#x2F;code&gt; is also a major part of the &lt;code&gt;auto-editor&lt;&#x2F;code&gt; solution)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;&quot;&gt;Canva&lt;&#x2F;a&gt; — video thumbnails (I also use this app for ebook covers)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;book-sales&quot;&gt;Book sales&lt;a class=&quot;zola-anchor&quot; href=&quot;#book-sales&quot; aria-label=&quot;Anchor link for: book-sales&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Revenue from ebook sales were almost 50% higher than last year!! As I wrote in the &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;wild-ride-2021&#x2F;&quot;&gt;2021 was a wild ride&lt;&#x2F;a&gt; post, I&#x27;ve been paying more attention to marketing and seems like my efforts are paying off. Here&#x27;s my Gumroad revenue chart for 2022:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;gumroad_sales_2022.png&quot; alt=&quot;Gumroad sales in 2022&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The peaks were during the two ebook releases. Additionally, I had less than half the above revenue from Leanpub. Last year, sales from Leanpub and Gumroad were nearly the same.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Last November, I started &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; newsletter. I&#x27;ve managed to send an email every Friday without fail so far and I&#x27;m proud of that. Sometimes I had to schedule issues a week ahead. Currently about 600 subscribers and some readers are even paying me monthly despite being a free newsletter.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;building-twitter-audience&quot;&gt;Building Twitter audience&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-twitter-audience&quot; aria-label=&quot;Anchor link for: building-twitter-audience&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As part of marketing efforts last year, I started building my Twitter audience as well. Follower count was less than 400 in July and about 1100 in December last year. Now it has crossed 2900. I&#x27;m not focused on increasing follower count with plethora of engagement inducing tweets. Just trying to be consistent and promoting all sorts of interesting links I come across. That said, I&#x27;d like to try creating cool infographics (probably using Canva) next year.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Follow me on Twitter&lt;&#x2F;a&gt; for interesting tech nuggets 😉&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;fictional-reading&quot;&gt;Fictional reading&lt;a class=&quot;zola-anchor&quot; href=&quot;#fictional-reading&quot; aria-label=&quot;Anchor link for: fictional-reading&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I enjoy reading fantasy and science-fiction novels. I read 100+ SFF books this year and recently wrote a post listing &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;escapist-reviews&#x2F;lists&#x2F;2022-favorite-sff-novels&#x2F;&quot;&gt;my favorites&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I also got a chance to beta read &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;60872852-tongue-eater&quot;&gt;Tongue Eater&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;61324650-soul-relic&quot;&gt;Soul Relic&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;60969058-the-umbral-storm&quot;&gt;The Umbral Storm&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;62586822-the-book-of-zog&quot;&gt;The Book of Zog&lt;&#x2F;a&gt;. I find these a good way to give back to the writing community, having myself received plenty of support from strangers.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;goals-for-2023&quot;&gt;Goals for 2023&lt;a class=&quot;zola-anchor&quot; href=&quot;#goals-for-2023&quot; aria-label=&quot;Anchor link for: goals-for-2023&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I met most of my goals this year, so that&#x27;s a nice feeling. Contributing to open source projects needs a lot more focus in the coming year. I&#x27;m not likely to publish a &lt;em&gt;new&lt;&#x2F;em&gt; ebook in 2023. Instead, I&#x27;m planning to update my existing books and that will probably take more than a year. Apart from catching up to new features and improving existing examples&#x2F;exercises, I&#x27;ll also focus on changing book titles and cover images. And, I&#x27;ll likely create interactive apps for exercises.&lt;&#x2F;p&gt;
&lt;p&gt;I need to also find something other than books to keep me creatively busy. It has been more than 4 years since I first published an ebook and 6 years since I started writing programming tutorials.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;Here&#x27;s wishing you a very happy, healthy and prosperous 2023 👍 😇&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 21: sorting iterables based on a key</title>
		<published>2022-12-28T00:00:00+00:00</published>
		<updated>2022-12-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-21/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-21/</id>
		<content type="html">&lt;p&gt;You can use the &lt;code&gt;sort()&lt;&#x2F;code&gt; method for sorting lists inplace. The &lt;code&gt;sorted()&lt;&#x2F;code&gt; function can be used to get a sorted list from any iterable.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;key&lt;&#x2F;code&gt; argument accepts the name of a function (i.e. function object) for custom sorting. If two elements are deemed equal based on the result of the function, the original order will be maintained (&lt;em&gt;stable sorting&lt;&#x2F;em&gt;). Here are some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# based on the absolute value of an element
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that the input order is maintained for all three values of &amp;quot;4&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;309&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;309&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# based on the length of an element
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;morello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;irk&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fuliginous&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;crusado&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;seam&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(words, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fuliginous&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;morello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;crusado&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;seam&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;irk&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some examples using &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;tutorial&#x2F;controlflow.html#lambda-expressions&quot;&gt;lambda expressions&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# sorting dictionaries based on values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;vehicles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bus&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;jeep&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cycle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(vehicles, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;: vehicles[k])
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;jeep&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cycle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bus&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(vehicles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;: t[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]))
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;jeep&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cycle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bus&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# based on file extension
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;report.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hello.py&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;calc.sh&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tictactoe.py&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(files, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rsplit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hello.py&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tictactoe.py&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;calc.sh&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;report.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;howto&#x2F;sorting.html&quot;&gt;docs.python HOWTOs: Sorting&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;ERWykO67GTU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 19: working with buffers</title>
		<published>2022-12-20T00:00:00+00:00</published>
		<updated>2022-12-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-19/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-19/</id>
		<content type="html">&lt;p&gt;Multiple files can be opened in Vim within the same tab page and&#x2F;or in different tabs. From &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;windows.txt.html#windows-intro&quot;&gt;:h windows-intro&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A buffer is the in-memory text of a file.&lt;&#x2F;li&gt;
&lt;li&gt;A window is a viewport on a buffer.&lt;&#x2F;li&gt;
&lt;li&gt;A tab page is a collection of windows.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:e&lt;&#x2F;kbd&gt; refreshes the current buffer (&lt;code&gt;:e&lt;&#x2F;code&gt; is short for &lt;code&gt;:edit&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:e filename&lt;&#x2F;kbd&gt; open a particular file by its path, in the same window&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:e #&lt;&#x2F;kbd&gt; switch back to the previous buffer, won&#x27;t work if that buffer is not named&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;6&lt;&#x2F;kbd&gt; switch back to the previous buffer, works even if that buffer is not named
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;^&lt;&#x2F;kbd&gt; can also be used&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:e #1&lt;&#x2F;kbd&gt; open the first buffer, and so on&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:buffers&lt;&#x2F;kbd&gt; show all buffers
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:ls&lt;&#x2F;kbd&gt; or &lt;kbd&gt;:files&lt;&#x2F;kbd&gt; can also be used&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:bn&lt;&#x2F;kbd&gt; open the next file in the buffer list (&lt;code&gt;:bn&lt;&#x2F;code&gt; is short for &lt;code&gt;:bnext&lt;&#x2F;code&gt;)
&lt;ul&gt;
&lt;li&gt;opens the first buffer if you are on the last buffer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:bp&lt;&#x2F;kbd&gt; open the previous file in the buffer list (&lt;code&gt;:bp&lt;&#x2F;code&gt; is short for &lt;code&gt;:bprevious&lt;&#x2F;code&gt;)
&lt;ul&gt;
&lt;li&gt;opens the last buffer if you are on the first buffer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Use &lt;kbd&gt;:set hidden&lt;&#x2F;kbd&gt; if you want to switch to another buffer even if there are unsaved changes in the current buffer. Instead of this setting, you can also use &lt;kbd&gt;:hide edit filename&lt;&#x2F;kbd&gt; to hide the current unsaved buffer. You&#x27;ll still get an error if you try to quit Vim without saving such buffers, unless you use the &lt;code&gt;!&lt;&#x2F;code&gt; modifier.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html#%27autowrite%27&quot;&gt;:h &#x27;autowrite&#x27;&lt;&#x2F;a&gt; option if you want to automatically save changes when moving to another buffer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;usr_22.txt.html#22.4&quot;&gt;:h 22.4&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;windows.txt.html#buffer-hidden&quot;&gt;:h buffer-hidden&lt;&#x2F;a&gt; for user and reference manuals on working with buffer list.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;dJO16IwfSko&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 20: expand and unexpand</title>
		<published>2022-12-14T00:00:00+00:00</published>
		<updated>2022-12-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-20/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-20/</id>
		<content type="html">&lt;p&gt;These two commands will help you convert tabs to spaces and vice versa. Both these commands support options to customize the width of tab stops and which occurrences should be converted.&lt;&#x2F;p&gt;
&lt;p&gt;The default expansion aligns at multiples of &lt;code&gt;8&lt;&#x2F;code&gt; columns (calculated in terms of bytes).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;apple&amp;#39; = 5 bytes, \t converts to 3 spaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;banana&amp;#39; = 6 bytes, \t converts to 2 spaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;a&amp;#39; and &amp;#39;b&amp;#39; = 1 byte, \t converts to 7 spaces
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\tbanana\tcherry\na\tb\tc\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; expand
&lt;&#x2F;span&gt;&lt;span&gt;apple   banana  cherry
&lt;&#x2F;span&gt;&lt;span&gt;a       b       c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;αλε&amp;#39; = 6 bytes, \t converts to 2 spaces
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;αλε\tπού\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; expand
&lt;&#x2F;span&gt;&lt;span&gt;αλε  πού
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By default, the &lt;code&gt;unexpand&lt;&#x2F;code&gt; command converts initial blank (space or tab) characters to tabs. The first occurrence of a non-blank character will stop the conversion. By default, every &lt;code&gt;8&lt;&#x2F;code&gt; columns worth of blanks is converted to a tab.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# input is 8 spaces followed by &amp;#39;a&amp;#39; and then more characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# the initial 8 spaces is converted to a tab character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;a&amp;#39; stops any further conversion, since it is a non-blank character
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;        a       b       c\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; unexpand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ia&lt;&#x2F;span&gt;&lt;span&gt;       b       c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# input is 9 spaces followed by &amp;#39;a&amp;#39; and then more characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# the initial 8 spaces is converted to a tab character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remaining space is left as is
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;         a       b       c\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; unexpand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;I&lt;&#x2F;span&gt;&lt;span&gt; a       b       c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;tsJCtE6oZDs&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;expand-unexpand.html&quot;&gt;expand and unexpand&lt;&#x2F;a&gt; chapter my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; ebook for more examples, options, etc.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Interactive Linux CLI Text Processing Exercises</title>
		<published>2022-12-09T00:00:00+00:00</published>
		<updated>2025-01-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/interactive-linux-cli-exercises/" type="text/html"/>
		<id>https://learnbyexample.github.io/interactive-linux-cli-exercises/</id>
		<content type="html">&lt;p&gt;Having an interactive program that automatically loads questions and checks the solution is wonderful to have while learning a topic. This &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;CLI-Exercises&quot;&gt;TUI app&lt;&#x2F;a&gt; has 60+ beginner to intermediate level exercises for Linux CLI text processing tools.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;main&#x2F;CLI-Exercises&#x2F;cli_exercises.png&quot; alt=&quot;Sample screenshot for CLI exercises&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Last month, I started learning a Python TUI framework called &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;&quot;&gt;Textual&lt;&#x2F;a&gt;. After working on a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;SquareTicTacToe&quot;&gt;4x4 board game&lt;&#x2F;a&gt;, I made an interactive app to help you test your CLI text processing skills with 60+ beginner to intermediate level exercises.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll need Python for this. This app is available on PyPI as &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;cliexercises&#x2F;&quot;&gt;cliexercises&lt;&#x2F;a&gt;. Example installation instructions are shown below, adjust them based on your preferences and OS.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# virtual environment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; venv textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd textual_apps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; source bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pip install cliexercises
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# launch the app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cliexercises
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To run the app without having to enter the virtual environment again, add this alias to &lt;code&gt;.bashrc&lt;&#x2F;code&gt; (or equivalent):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# you&amp;#39;ll have to change the path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;cliexercises&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;path&#x2F;to&#x2F;textual_apps&#x2F;bin&#x2F;cliexercises&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an alternative to manually managing such virtual environments, you can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;pipx&lt;&#x2F;a&gt; instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pipx install cliexercises
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cliexercises
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As yet another alternative, you can install &lt;code&gt;textual==0.85.2&lt;&#x2F;code&gt; (see &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;getting_started&#x2F;&quot;&gt;Textual documentation&lt;&#x2F;a&gt; for more details), clone my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&quot;&gt;TUI-apps repository&lt;&#x2F;a&gt; and run the &lt;code&gt;cli_exercises.py&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;Adjust the terminal dimensions for the widgets to appear properly, for example 84x25 (characters x lines).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;video-demo&quot;&gt;Video demo&lt;a class=&quot;zola-anchor&quot; href=&quot;#video-demo&quot; aria-label=&quot;Anchor link for: video-demo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;lcm_F7zPzRY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;brief-guide&quot;&gt;Brief Guide&lt;a class=&quot;zola-anchor&quot; href=&quot;#brief-guide&quot; aria-label=&quot;Anchor link for: brief-guide&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+p&lt;&#x2F;strong&gt; and &lt;strong&gt;Ctrl+n&lt;&#x2F;strong&gt; to navigate the questions list.&lt;&#x2F;li&gt;
&lt;li&gt;Type the command in the box below the question.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Enter&lt;&#x2F;strong&gt; to execute the command.
&lt;ul&gt;
&lt;li&gt;Output would be displayed below the command box.&lt;&#x2F;li&gt;
&lt;li&gt;If the output matches the expected results, the command box will turn &lt;em&gt;green&lt;&#x2F;em&gt; and a reference solution will also be shown.&lt;&#x2F;li&gt;
&lt;li&gt;Issues due to errors and timeout (about &lt;code&gt;2&lt;&#x2F;code&gt; seconds) will be displayed in &lt;em&gt;red&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+s&lt;&#x2F;strong&gt; to toggle the reference solution box.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+t&lt;&#x2F;strong&gt; to toggle between light and dark themes.&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;strong&gt;Ctrl+q&lt;&#x2F;strong&gt; to quit the app.&lt;&#x2F;li&gt;
&lt;li&gt;Some basic readline-like shortcuts are supported, for example &lt;strong&gt;Ctrl+u&lt;&#x2F;strong&gt;, &lt;strong&gt;Ctrl+k&lt;&#x2F;strong&gt;, &lt;strong&gt;Ctrl+w&lt;&#x2F;strong&gt;, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Your progress is automatically saved and restored. Already answered questions will be skipped.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; There is no safeguard against the command you are executing. They are treated as if you typed them from a shell session.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For more detailed instructions, visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;CLI-Exercises&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;CLI-Exercises&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;ebook&quot;&gt;Ebook&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook&quot; aria-label=&quot;Anchor link for: ebook&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The exercises in this app have been adapted from my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&#x2F;&quot;&gt;Command Line&lt;&#x2F;a&gt; ebooks.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d highly appreciate your feedback. Please file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;issues&quot;&gt;an issue&lt;&#x2F;a&gt; if there are bugs, crashes, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Hope you find this TUI app useful. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 20: saving and loading json</title>
		<published>2022-12-07T00:00:00+00:00</published>
		<updated>2022-12-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-20/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-20/</id>
		<content type="html">&lt;p&gt;JSON (JavaScript Object Notation) is one of the ways you can store and retrieve data necessary for functioning of an application. For example, my projects &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;tree&#x2F;master&#x2F;interactive_exercises&quot;&gt;Python regex exercises&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;CLI-Exercises&quot;&gt;Linux CLI text processing exercises&lt;&#x2F;a&gt; need to load questions and save user progress. You might wonder why not just a plain text file? I needed &lt;code&gt;dict&lt;&#x2F;code&gt; in the code anyway and JSON offered seamless transition. Also, this arrangement avoided having to write extra code and test it for potential parsing issues.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;json&lt;&#x2F;code&gt; builtin module is handy for such purposes. Here&#x27;s an example of saving a &lt;code&gt;dict&lt;&#x2F;code&gt; object:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rahul&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;86&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rajan&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;79&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;marks.json&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;w&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span&gt;json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;dump&lt;&#x2F;span&gt;&lt;span&gt;(marks, f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;indent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above example, &lt;code&gt;indent&lt;&#x2F;code&gt; is used for pretty printing. Here&#x27;s how the file looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;$ cat marks.json
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Rahul&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;86&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Ravi&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Rohit&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Rajan&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;79
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s an example of loading a JSON file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;marks.json&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span&gt;marks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(f)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rahul&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;86&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rajan&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;79&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;json.html&quot;&gt;docs.python: json&lt;&#x2F;a&gt; for documentation, more examples, other methods, caveats and so on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Fd28UTqcU3k&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 18: moving within long lines</title>
		<published>2022-11-29T00:00:00+00:00</published>
		<updated>2022-11-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-18/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-18/</id>
		<content type="html">&lt;p&gt;Here are Normal mode commands you can use to move within long lines that are spread over multiple screen lines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;g0&lt;&#x2F;kbd&gt; move to the beginning of the current screen line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;g^&lt;&#x2F;kbd&gt; move to the first non-blank character of the current screen line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;g$&lt;&#x2F;kbd&gt; move to the end of the current screen line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gj&lt;&#x2F;kbd&gt; move down by one screen line, prefix a count to move down by that many screen lines&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gk&lt;&#x2F;kbd&gt; move up by one screen line, prefix a count to move up by that many screen lines&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gm&lt;&#x2F;kbd&gt; move to the middle of the current screen line
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; that this is based on the screen width, not the number of characters in the line!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gM&lt;&#x2F;kbd&gt; move to the middle of the current line
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; that this is based on the total number of characters in the line&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;motion.txt.html#left-right-motions&quot;&gt;:h left-right-motions&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;VfN_LJIiyaI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 19: extended globs</title>
		<published>2022-11-23T00:00:00+00:00</published>
		<updated>2022-11-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-19/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-19/</id>
		<content type="html">&lt;p&gt;The Bash shell provides &lt;code&gt;extglob&lt;&#x2F;code&gt; option for advanced pattern matching of filenames. These will help you apply regexp like quantifiers, provide alternate patterns and negation. From &lt;code&gt;man bash&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Extended glob&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;?(pattern-list)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Matches zero or one occurrence of the given patterns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;*(pattern-list)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Matches zero or more occurrences of the given patterns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;+(pattern-list)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Matches one or more occurrences of the given patterns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;@(pattern-list)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Matches one of the given patterns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;!(pattern-list)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Matches anything except one of the given patterns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Extended globs are disabled by default. You can use &lt;code&gt;shopt -s extglob&lt;&#x2F;code&gt; and &lt;code&gt;shopt -u extglob&lt;&#x2F;code&gt; to set and unset this option respectively.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some examples (visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&#x2F;raw&#x2F;master&#x2F;example_files&#x2F;scripts&#x2F;globs.sh&quot;&gt;globs.sh&lt;&#x2F;a&gt; to get the script used below).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ source globs.sh
&lt;&#x2F;span&gt;&lt;span&gt;$ ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;.sh   f1.txt      f4.txt    hi.sh   math.h         report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span&gt;.log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;.txt   f2_old.txt  f7.txt    ip.txt  notes.txt      report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;04&lt;&#x2F;span&gt;&lt;span&gt;.log
&lt;&#x2F;span&gt;&lt;span&gt;calc.py  f2.txt      hello.py  main.c  report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt;.log  report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;98&lt;&#x2F;span&gt;&lt;span&gt;.log
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# one or more digits followed by &amp;#39;.&amp;#39; and then zero or more characters
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;.sh  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: ls *.c *.sh
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.@(c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;sh)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;.sh  hi.sh  main.c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# not ending with &amp;#39;.txt&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.txt)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;.sh   hello.py  main.c  report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt;.log  report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;04&lt;&#x2F;span&gt;&lt;span&gt;.log
&lt;&#x2F;span&gt;&lt;span&gt;calc.py  hi.sh     math.h  report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span&gt;.log  report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;98&lt;&#x2F;span&gt;&lt;span&gt;.log
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# not ending with &amp;#39;.txt&amp;#39; or &amp;#39;.log&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;log)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;.sh  calc.py  hello.py  hi.sh  main.c  math.h
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;9DF0PBWfiX0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Linux Command Line Computing&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Festive deals for books on Python, Linux, JavaScript, Regular Expressions and more</title>
		<published>2022-11-22T00:00:00+00:00</published>
		<updated>2022-11-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/programming-deals-2022/" type="text/html"/>
		<id>https://learnbyexample.github.io/programming-deals-2022/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;Here are some exciting deals for my programming ebooks as well as from other creators.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;my-ebooks&quot;&gt;My ebooks&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-ebooks&quot; aria-label=&quot;Anchor link for: my-ebooks&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Offers valid till 30-Nov-2022:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;FestiveOffer&quot;&gt;All 13 Books Bundle&lt;&#x2F;a&gt; — $10 (normal price $28)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_projects&#x2F;FestiveOffer&quot;&gt;Practice Python Projects&lt;&#x2F;a&gt; — FREE (normal price $10)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;js_regexp&#x2F;FestiveOffer&quot;&gt;JavaScript RegExp&lt;&#x2F;a&gt; — FREE (normal price $10)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&#x2F;FestiveOffer&quot;&gt;Learn by example Python bundle&lt;&#x2F;a&gt; — $3 (normal price $15)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;FestiveOffer&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;all_books_bundle.png&quot; alt=&quot;All books bundle&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;indie-creators&quot;&gt;Indie creators&lt;a class=&quot;zola-anchor&quot; href=&quot;#indie-creators&quot; aria-label=&quot;Anchor link for: indie-creators&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;2022&#x2F;11&#x2F;22&#x2F;python-black-friday-cyber-monday-sales-2022&#x2F;&quot;&gt;Python books by Michael Driscoll&lt;&#x2F;a&gt; — $10 off for all books, 20% off for Teach Me Python&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pythonmorsels.com&#x2F;pricing&#x2F;&quot;&gt;Python Morsels&lt;&#x2F;a&gt; — save up to $108 a year on Python Morsels, until Nov 28 (skill-honing system that helps developers deepen their Python skills)
&lt;ul&gt;
&lt;li&gt;see also author&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;treyhunner.com&#x2F;2022&#x2F;11&#x2F;python-black-friday-and-cyber-monday-sales-2022&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; for comprehensive links to other Python deals&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;adamchainz.gumroad.com&#x2F;l&#x2F;byddx&quot;&gt;Boost Your Django DX&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;adamchainz.gumroad.com&#x2F;l&#x2F;suydt&quot;&gt;Speed Up Your Django Tests&lt;&#x2F;a&gt; — 50% off (plus further 50% off based on GDP) until Nov 28
&lt;ul&gt;
&lt;li&gt;see also author&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;adamj.eu&#x2F;tech&#x2F;2022&#x2F;11&#x2F;21&#x2F;django-black-friday-deals-2022&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; for comprehensive links to other Django-related deals&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;reuvenmlerner&#x2F;status&#x2F;1595402066213601280&quot;&gt;Python, Git, and Pandas courses&lt;&#x2F;a&gt; — 40% off&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bhavaniravi.gumroad.com&#x2F;l&#x2F;technical-blogging&#x2F;WRITELIKEPRO&quot;&gt;Practical Guide to Technical Blogging&lt;&#x2F;a&gt; is 34% off and &lt;a href=&quot;https:&#x2F;&#x2F;bhavaniravi.gumroad.com&#x2F;l&#x2F;LaFSj&#x2F;BLACKPYTHON&quot;&gt;Python To Projects bootcamp&lt;&#x2F;a&gt; is 20% off&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shrutibalasa.gumroad.com&#x2F;l&#x2F;css-flex-and-grid&#x2F;BlackFriday22&quot;&gt;Complete Guide to CSS Flex and Grid&lt;&#x2F;a&gt; — 60% off on all versions of the eBook (4 days starting from Nov 24)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;OzolinsJanis&#x2F;status&#x2F;1595743978531348480&quot;&gt;Explain Ideas Visually&lt;&#x2F;a&gt; — 50% OFF&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;a class=&quot;zola-anchor&quot; href=&quot;#miscellaneous&quot; aria-label=&quot;Anchor link for: miscellaneous&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;blog&#x2F;2022-holiday-gift-guide&quot;&gt;NoStarch Press&lt;&#x2F;a&gt; — Holiday Gift Guide, 35% off until Nov 28&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;media.pragprog.com&#x2F;newsletters&#x2F;2022-11-18.html&quot;&gt;The Pragmatic Bookshelf&lt;&#x2F;a&gt; — 40% off on all ebooks and audio books&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;deals.manning.com&#x2F;thanksgiving&#x2F;&quot;&gt;Manning Publications&lt;&#x2F;a&gt; — save 50% when you buy 2 or more eBooks, liveProjects, or liveVideos&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mailchi.mp&#x2F;leanpub&#x2F;monthly-sale-2022-november-black-friday&quot;&gt;Leanpub Monthly Sale&lt;&#x2F;a&gt; — offers for programming books, bundles and courses&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;realpython.com&#x2F;giveaway&#x2F;black-friday&#x2F;&quot;&gt;Real Python Giveaway&lt;&#x2F;a&gt; — a chance to win one of three prizes, until Nov 25&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x90n&#x2F;InfoSec-Black-Friday&quot;&gt;InfoSec Hack Friday&lt;&#x2F;a&gt; — InfoSec related software&#x2F;tools&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;opsdisk.gumroad.com&#x2F;l&#x2F;cphlab&#x2F;blackfriday2022&quot;&gt;The Cyber Plumber&#x27;s Lab Guide and Interactive Access&lt;&#x2F;a&gt; — 50% OFF&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;trungdq88&#x2F;Awesome-Black-Friday-Cyber-Monday&quot;&gt;Huge list of awesome deals&lt;&#x2F;a&gt; — tools, productivity, books, courses, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 19: manipulating string case</title>
		<published>2022-11-16T00:00:00+00:00</published>
		<updated>2022-11-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-19/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-19/</id>
		<content type="html">&lt;p&gt;Here are five string methods you can use for changing the case of characters. Word level transformation is determined by consecutive occurrences of alphabets, not limited to separation by whitespace characters.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;thIs iS a saMple StrIng&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;capitalize&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This is a sample string&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This Is A Sample String&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;lower&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;this is a sample string&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;upper&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;THIS IS A SAMPLE STRING&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;swapcase&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;THiS Is A SAmPLE sTRiNG&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;string.capwords()&lt;&#x2F;code&gt; method is similar to &lt;code&gt;title()&lt;&#x2F;code&gt; but also allows a specific separator (default is whitespace).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;phrase &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;this-IS-a:colon:separated,PHRASE&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# every word is transformed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;phrase.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This-Is-A:Colon:Separated,Phrase&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# colon character is used as the text boundary
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;string.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;capwords&lt;&#x2F;span&gt;&lt;span&gt;(phrase, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This-is-a:Colon:Separated,phrase&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;HnwjKY6nK3Y&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building TUIs with textual: first impressions</title>
		<published>2022-11-15T00:00:00+00:00</published>
		<updated>2022-12-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/textual-first-impressions/" type="text/html"/>
		<id>https://learnbyexample.github.io/textual-first-impressions/</id>
		<content type="html">&lt;p&gt;Last week, I finally started exploring &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;&quot;&gt;textual&lt;&#x2F;a&gt;. The main motivation was to start implementing a few project ideas I&#x27;ve had in my todo list for years. I don&#x27;t particularly have a preference between TUI (terminal user interface) and GUI (graphical user interface) for these projects. Seeing a few Textual demos on twitter (courtesy &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;willmcgugan&quot;&gt;Will McGugan&lt;&#x2F;a&gt;) over the past few months, I felt like exploring this framework first.&lt;&#x2F;p&gt;
&lt;p&gt;For my first app, I picked a 4x4 board game — like Tic Tac Toe but form a square instead of a line. I came up with this variation in high school and been fond of coding it since college days.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation-and-tutorials&quot;&gt;Installation and Tutorials&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation-and-tutorials&quot; aria-label=&quot;Anchor link for: installation-and-tutorials&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;getting_started&#x2F;&quot;&gt;Getting started&lt;&#x2F;a&gt; page of the documentation will give you all the relevant installation instructions. I used &lt;code&gt;pip install &#x27;textual[dev]&#x27;&lt;&#x2F;code&gt; since the development mode has nice features like &lt;em&gt;live editing&lt;&#x2F;em&gt;. As I looked up the &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;guide&#x2F;devtools&#x2F;&quot;&gt;Devtools&lt;&#x2F;a&gt; page to link here in this blog post, I found that there&#x27;s a &lt;code&gt;console&lt;&#x2F;code&gt; command for &lt;code&gt;print()&lt;&#x2F;code&gt; based debugging! That would&#x27;ve been handy while I was working on the game — sigh, I should&#x27;ve been more proactive in exploring the documentation site.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;em&gt;Getting started&lt;&#x2F;em&gt; page, you&#x27;ll also be informed about &lt;code&gt;python -m textual&lt;&#x2F;code&gt; (builtin demo) and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Textualize&#x2F;textual&#x2F;tree&#x2F;main&#x2F;examples&quot;&gt;other examples&lt;&#x2F;a&gt; in the GitHub repo.&lt;&#x2F;p&gt;
&lt;p&gt;After playing with the demo a bit, I went through the &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;tutorial&#x2F;&quot;&gt;tutorial&lt;&#x2F;a&gt; — shows how to build a Stopwatch app step-by-step.&lt;&#x2F;p&gt;
&lt;p&gt;The documentation also includes &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;guide&#x2F;&quot;&gt;Guide&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;reference&#x2F;&quot;&gt;Reference&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;api&#x2F;&quot;&gt;API&lt;&#x2F;a&gt;, etc. I gave them a cursory glance and decided to start building my game.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; I should note that while I got introduced to programming in school about 20 years ago, I don&#x27;t have much experience with projects that need more than a few hundred lines. I&#x27;m good with command-line tools and text processing with scripting languages like Python. I had a horrible experience writing an Android app a few years back, mainly due to object-oriented programming and the complexity of the project. I&#x27;ve improved a bit since then, but still feel like a newbie when it comes to working with classes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;building-square-tic-tac-toe-board-game&quot;&gt;Building Square Tic Tac Toe board game&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-square-tic-tac-toe-board-game&quot; aria-label=&quot;Anchor link for: building-square-tic-tac-toe-board-game&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Similar to the step-by-step Textual tutorial, I built the game by adding features incrementally. I &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1590357173519155200&quot;&gt;tweeted my progress&lt;&#x2F;a&gt; along with screenshots and recordings. Here&#x27;s a summary:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Managed to place 16 buttons in a grid layout&lt;&#x2F;li&gt;
&lt;li&gt;Buttons now respond to clicking! And in response, the computer plays a random move&lt;&#x2F;li&gt;
&lt;li&gt;Recording below shows 3 games: User wins, AI wins, Tie&lt;&#x2F;li&gt;
&lt;li&gt;Added Easy&#x2F;Hard modes — it is impossible to beat the AI in hard mode&lt;&#x2F;li&gt;
&lt;li&gt;Almost done! Layout is better now and starting new game is now a button instead of a shortcut keybinding&lt;&#x2F;li&gt;
&lt;li&gt;Cleaned up code a bit and posted on GitHub&lt;&#x2F;li&gt;
&lt;li&gt;Next step: write a blog post (this post!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;SquareTicTacToe&quot;&gt;my GitHub repo&lt;&#x2F;a&gt; for the code, game rules and other details.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I had made a &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;square_tic_tac_toe&#x2F;square_tic_tac_toe.html&quot;&gt;GUI version of this game using tkinter&lt;&#x2F;a&gt; last year. I copied most of the game logic from there, so I didn&#x27;t much struggle with object-oriented programming in this case. Here&#x27;s a sample screenshot from the finished code:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;textual&#x2F;square_tictactoe.png&quot; alt=&quot;Sample screenshot for Square Tic Tac Toe game&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-i-liked&quot;&gt;What I liked&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-i-liked&quot; aria-label=&quot;Anchor link for: what-i-liked&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned before, Textual supports &lt;em&gt;live editing&lt;&#x2F;em&gt; mode. The command is &lt;code&gt;textual run --dev script.py&lt;&#x2F;code&gt; and this helps you experiment with CSS. I found this very helpful while trying out layout combinations, margin, padding, etc.&lt;&#x2F;p&gt;
&lt;p&gt;The default colors were great too. I didn&#x27;t have to think about choosing colors (except for setting background color for header and game status). The framework even provides an easy way to allow users to switch between dark and light themes! Though, I haven&#x27;t yet figured out how to set light theme as the default (I worked around by explicitly adding a call to the theme toggle method).&lt;&#x2F;p&gt;
&lt;p&gt;Overall, the code was significantly shorter compared to the &lt;code&gt;tkinter&lt;&#x2F;code&gt; version I did last year. That version had a few more features, but I&#x27;d say Textual felt much easier to reason about. I remember having to spend days shifting through stackoverflow threads and &lt;a href=&quot;https:&#x2F;&#x2F;tkdocs.com&#x2F;index.html&quot;&gt;tkdocs&lt;&#x2F;a&gt; to get the GUI version working.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;what-gave-me-trouble&quot;&gt;What gave me trouble&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-gave-me-trouble&quot; aria-label=&quot;Anchor link for: what-gave-me-trouble&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Struggling with layout isn&#x27;t new for me. I started with 4x4 grid for the board, which was fairly straightforward. Problems arose when I wanted to add status text area to the left and control buttons to the right. Placing them left&#x2F;right was easy to do with &lt;em&gt;dock&lt;&#x2F;em&gt; in CSS. But, I couldn&#x27;t get them to align well — too much spacing around the 4x4 board. I was trying to give 50% to 60% for the board and the remaining evenly divided for the other two elements. After some experimentation, what worked was giving 20% to status, 25% to control and &lt;em&gt;not&lt;&#x2F;em&gt; assigning a width value for the board.&lt;&#x2F;p&gt;
&lt;p&gt;I initially used a button for the status because I couldn&#x27;t find a &lt;em&gt;textbox&lt;&#x2F;em&gt; widget (edit: Textual now has a &lt;code&gt;Label&lt;&#x2F;code&gt; widget). I knew that &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;widgets&#x2F;static&#x2F;&quot;&gt;Static&lt;&#x2F;a&gt; widget can display text, but I didn&#x27;t find how to dynamically change the text from that documentation page. I thought I&#x27;ll have to make a custom widget, but when I went to &lt;a href=&quot;https:&#x2F;&#x2F;textual.textualize.io&#x2F;guide&#x2F;widgets&#x2F;&quot;&gt;Widgets guide&lt;&#x2F;a&gt;, I found that &lt;code&gt;Static&lt;&#x2F;code&gt; already has an &lt;code&gt;update()&lt;&#x2F;code&gt; method!&lt;&#x2F;p&gt;
&lt;p&gt;I probably missed something (or perhaps part of the roadmap), but I found it strange to have a single &lt;code&gt;on_button_pressed()&lt;&#x2F;code&gt; method to handle on click event for every &lt;code&gt;Button&lt;&#x2F;code&gt; widget. I&#x27;d prefer a way to bind a method to the buttons, like &lt;code&gt;tkinter&lt;&#x2F;code&gt; provides.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;a class=&quot;zola-anchor&quot; href=&quot;#next-steps&quot; aria-label=&quot;Anchor link for: next-steps&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned before, I have several projects in my todo list. The next one I want to try is an app for interactive exercises for &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&#x2F;&quot;&gt;my ebooks&lt;&#x2F;a&gt;. Last year, I made one for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;tree&#x2F;master&#x2F;interactive_exercises&quot;&gt;Python regular expressions&lt;&#x2F;a&gt; using &lt;code&gt;tkinter&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Computing from the Command Line: sales report</title>
		<published>2022-11-14T00:00:00+00:00</published>
		<updated>2022-11-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/cli-computing-sales/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/cli-computing-sales/</id>
		<content type="html">&lt;p&gt;I&#x27;ve previously written about events and strategies that led to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;wild-ride-2021&#x2F;#book-sales&quot;&gt;increased ebook sales during the last quarter of 2021&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Very pleased to inform that I continue to see more than expected sales during release week. My 13th ebook &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Computing from the Command Line&lt;&#x2F;a&gt; was published on November 1st. Here&#x27;s how the sales looked on Gumroad during the first ten days:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;cli-computing-release-gumroad-sales.png&quot; alt=&quot;Ten days Gumroad sales chart&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I used to offer my ebooks for free on release. For the past few releases, I have also added heavily discounted ebook bundles which seems to be the major factor in increased paid sales I&#x27;m seeing. Luck certainly plays a role too in reaching users through social media. Here are some of the ways I promoted my latest ebook:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;p&#x2F;announcing-computing-from-the-command-line-free-discount-offers-and-more&quot;&gt;Announcement post on Gumroad&lt;&#x2F;a&gt; and sending an email to existing readers (1000+ users opened the email as per Gumroad analytics)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1587443517823275009&quot;&gt;Pinned tweet&lt;&#x2F;a&gt; — more than 300 link clicks as per Twitter analytics&lt;&#x2F;li&gt;
&lt;li&gt;Posting on &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;commandline&#x2F;comments&#x2F;yk1izp&#x2F;i_wrote_a_book_on_linux_cli_tools_and_shell&#x2F;&quot;&gt;&#x2F;r&#x2F;commandline&#x2F;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;linux&#x2F;comments&#x2F;yk1n8y&#x2F;i_wrote_a_book_on_linux_cli_tools_and_shell&#x2F;&quot;&gt;&#x2F;r&#x2F;linux&#x2F;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;linux4noobs&#x2F;comments&#x2F;ykzuia&#x2F;i_wrote_a_book_on_linux_cli_tools_and_shell&#x2F;&quot;&gt;&#x2F;r&#x2F;linux4noobs&#x2F;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;FreeEBOOKS&#x2F;comments&#x2F;yoj33g&#x2F;computing_from_the_command_line_linux_tools_and&#x2F;&quot;&gt;&#x2F;r&#x2F;FreeEBOOKS&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=33449401&quot;&gt;Show HN post on Hacker News&lt;&#x2F;a&gt; — wasn&#x27;t lucky this time to reach front page&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;PS5XEemn164&quot;&gt;Promo video on youtube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Mentioned in my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; newsletter&lt;&#x2F;li&gt;
&lt;li&gt;And of course, I wrote a release post &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;computing-from-the-command-line-announcement&#x2F;&quot;&gt;on this blog&lt;&#x2F;a&gt; and also mentioned it on my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&quot;&gt;GitHub Readme&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Apart from Gumroad, 400+ readers downloaded the ebook from &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;cli_computing&quot;&gt;Leanpub&lt;&#x2F;a&gt; and I got a few paid sales as well. I wrote about &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;my-book-writing-experience&#x2F;#leanpub-vs-gumroad&quot;&gt;pros and cons of Gumroad&#x2F;Leanpub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; PS: Make sure to read the rules and be a regular user before self-promoting your content on the social media platforms mentioned above.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 17: setting options</title>
		<published>2022-11-08T00:00:00+00:00</published>
		<updated>2022-11-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-17/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-17/</id>
		<content type="html">&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html&quot;&gt;:h options.txt&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vim has a number of internal variables and switches which can be set to achieve special effects. These options come in three forms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;boolean&lt;&#x2F;strong&gt; can only be on or off&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;number&lt;&#x2F;strong&gt;  has a numeric value&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;string&lt;&#x2F;strong&gt;  has a string value&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here are examples for each of these forms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:set cursorline&lt;&#x2F;kbd&gt; highlight the line containing the cursor&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:set history=200&lt;&#x2F;kbd&gt; increase default history from 50 to 200&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:set ww+=[,]&lt;&#x2F;kbd&gt; allow left and right arrow keys to move across lines in Insert mode
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+=&lt;&#x2F;code&gt; allows you to append to an existing string value&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Usage guidelines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set {option}&lt;&#x2F;code&gt; switch on the given boolean setting
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:set expandtab&lt;&#x2F;kbd&gt; use spaces for tab expansion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;set {option}!&lt;&#x2F;code&gt; toggle the given boolean setting
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:set expandtab!&lt;&#x2F;kbd&gt; if previously tabs were expanded, it will be turned off and vice versa&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;set inv{option}&lt;&#x2F;code&gt; can also be used&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;set no{option}&lt;&#x2F;code&gt; switch off the given boolean setting
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:set noexpandtab&lt;&#x2F;kbd&gt; disable expanding tab to spaces&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;set {option}?&lt;&#x2F;code&gt; get the current value of the given option (works for all three forms)
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:set expandtab?&lt;&#x2F;kbd&gt; output will be &lt;code&gt;expandtab&lt;&#x2F;code&gt; or &lt;code&gt;noexpandtab&lt;&#x2F;code&gt; depending on whether it is switched on or off&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;set {option}&lt;&#x2F;code&gt; get the current value of number or string option
&lt;ul&gt;
&lt;li&gt;for example, try &lt;kbd&gt;:set history&lt;&#x2F;kbd&gt; or &lt;kbd&gt;:set ww&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html&quot;&gt;:h options.txt&lt;&#x2F;a&gt; for complete list of usage guidelines and available options.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;hjHEn7t2zUM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 18: inserting file contents using GNU sed</title>
		<published>2022-11-02T00:00:00+00:00</published>
		<updated>2022-11-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-18/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-18/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;r&lt;&#x2F;code&gt; command accepts a filename as argument and when the address is satisfied, entire contents of the given file is added &lt;em&gt;after&lt;&#x2F;em&gt; the matching line. This is a robust way to add multiline text literally.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; sky
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; apple
&lt;&#x2F;span&gt;&lt;span&gt;$ cat fav_colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;deep red
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;reddish
&lt;&#x2F;span&gt;&lt;span&gt;brown
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# space between r and filename is optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# adds entire contents of &amp;#39;ip.txt&amp;#39; after each line containing &amp;#39;red&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;red&#x2F;r ip.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; fav_colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;deep red
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; sky
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; apple
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;reddish
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; sky
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; apple
&lt;&#x2F;span&gt;&lt;span&gt;brown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;e&lt;&#x2F;code&gt; flag is the easiest way to insert file contents &lt;em&gt;before&lt;&#x2F;em&gt; the matching lines. Similar to the &lt;code&gt;r&lt;&#x2F;code&gt; command, the output of an external command (&lt;code&gt;cat&lt;&#x2F;code&gt; in the below example) is inserted literally.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;red&#x2F;e cat ip.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; fav_colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; sky
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; apple
&lt;&#x2F;span&gt;&lt;span&gt;deep red
&lt;&#x2F;span&gt;&lt;span&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; sky
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; apple
&lt;&#x2F;span&gt;&lt;span&gt;reddish
&lt;&#x2F;span&gt;&lt;span&gt;brown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;adding-content-from-file.html&quot;&gt;Adding content from file&lt;&#x2F;a&gt; chapter from my &lt;strong&gt;GNU sed&lt;&#x2F;strong&gt; ebook for many more examples, gotchas, details about the &lt;code&gt;R&lt;&#x2F;code&gt; command and so on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;p1CFOCs3gGM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;CLI text processing with GNU sed&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 18: arbitrary number of arguments</title>
		<published>2022-10-26T00:00:00+00:00</published>
		<updated>2022-10-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-18/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-18/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;print()&lt;&#x2F;code&gt; function can accept zero or more values separated by a comma. Here&#x27;s how the function arguments are shown in &lt;code&gt;help(print)&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;sys.stdout, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some examples with varying number of arguments passed to the &lt;code&gt;print()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;hello
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42 3.142857142857143 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can write your own functions to accept arbitrary number of arguments as well. The packing syntax is similar to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;python-tip-14&#x2F;&quot;&gt;sequence unpacking&lt;&#x2F;a&gt;. A &lt;code&gt;*&lt;&#x2F;code&gt; prefix to an argument name will allow it to accept zero or more values. Such an argument will be packed as a &lt;code&gt;tuple&lt;&#x2F;code&gt; data type and it should always be specified after positional arguments (if any). &lt;code&gt;args&lt;&#x2F;code&gt; is often used as the variable name for this purpose. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;many&lt;&#x2F;span&gt;&lt;span&gt;(x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;args):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{x = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;{args = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;many&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Traceback &lt;&#x2F;span&gt;&lt;span&gt;(most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;many&lt;&#x2F;span&gt;&lt;span&gt;() missing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;required positional argument: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;x&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;many&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;many&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;two&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;two&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s a more practical example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sum_nums&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;args):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;args:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...         &lt;&#x2F;span&gt;&lt;span&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;n
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;total
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sum_nums&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sum_nums&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sum_nums&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;15
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sum_nums&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;15
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Use &lt;code&gt;**&lt;&#x2F;code&gt; prefix to accept arbitrary number of keyword arguments. See also &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;tutorial&#x2F;controlflow.html#arbitrary-argument-lists&quot;&gt;docs.python: Arbitrary Argument Lists&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;kp0TQgguiBI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 16: terminal mode</title>
		<published>2022-10-18T00:00:00+00:00</published>
		<updated>2022-10-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-16/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-16/</id>
		<content type="html">&lt;p&gt;Terminal mode is one way to use shell commands from within Vim.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:terminal&lt;&#x2F;kbd&gt; open a new terminal window as a horizontal split
&lt;ul&gt;
&lt;li&gt;opens above the current window unless &lt;code&gt;splitbelow&lt;&#x2F;code&gt; option is set&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:vertical :terminal&lt;&#x2F;kbd&gt; open a new terminal window as a vertical split
&lt;ul&gt;
&lt;li&gt;opens to the left of the current window unless &lt;code&gt;splitright&lt;&#x2F;code&gt; option is set&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some shortcuts to navigate between windows and change modes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;w&lt;&#x2F;kbd&gt; or &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; move to the next window
&lt;ul&gt;
&lt;li&gt;helps you to easily switch back and forth if you have one text editing window and one terminal window&lt;&#x2F;li&gt;
&lt;li&gt;see the &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;vim-tip-14&#x2F;&quot;&gt;Splitting&lt;&#x2F;a&gt; tip for more such commands&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;N&lt;&#x2F;kbd&gt; goes to Terminal-Normal mode which will help you to move around using Normal mode commands, copy text, etc (note that you need to use uppercase &lt;code&gt;N&lt;&#x2F;code&gt; here)
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;\&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;n&lt;&#x2F;kbd&gt; another way to go to Terminal-Normal mode&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:tnoremap &amp;lt;Esc&amp;gt; &amp;lt;C-w&amp;gt;N&lt;&#x2F;kbd&gt; map &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt; key to go to Terminal-Normal mode&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;:&lt;&#x2F;kbd&gt; go to Command-line mode from terminal window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Depending on your shell, you can use the &lt;code&gt;exit&lt;&#x2F;code&gt; command to end the terminal session. &lt;code&gt;Ctrl+d&lt;&#x2F;code&gt; might work too.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; There are lot of features in this mode, see &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;terminal.txt.html&quot;&gt;:h terminal.txt&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;fuBCeOEE1jo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 17: common and unique lines</title>
		<published>2022-10-12T00:00:00+00:00</published>
		<updated>2022-10-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-17/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-17/</id>
		<content type="html">&lt;p&gt;Consider these sample input files that are already sorted and the default output from &lt;code&gt;comm&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ paste colors_1.txt colors_2.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue    Black
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Brown   Blue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange  Green
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Purple  Orange
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Red     Pink
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Teal    Red
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;White   White
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ comm colors_1.txt colors_2.txt
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Black
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Brown
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Green
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Pink
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Purple
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Red
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Teal
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;White
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The following &lt;code&gt;comm&lt;&#x2F;code&gt; options will help you construct solutions to get common and unique lines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-1&lt;&#x2F;code&gt; suppress lines unique to the first file&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-2&lt;&#x2F;code&gt; suppress lines unique to the second file&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-3&lt;&#x2F;code&gt; suppress lines common to both the files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# common lines
&lt;&#x2F;span&gt;&lt;span&gt;$ comm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; colors_1.txt colors_2.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Red
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;White
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lines unique to colors_2.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ comm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt; colors_1.txt colors_2.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Black
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Green
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Pink
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the input files are not already sorted, or if you want to preserve the order of input lines, you can use &lt;code&gt;awk&lt;&#x2F;code&gt; instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# common lines
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; colors_1.txt colors_2.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Red
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;White
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lines unique to colors_2.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR==FNR{a[$0]; next} !($0 in a)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; colors_1.txt colors_2.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Black
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Green
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Pink
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can also use &lt;code&gt;grep -Fxf colors_1.txt colors_2.txt&lt;&#x2F;code&gt; (add &lt;code&gt;-v&lt;&#x2F;code&gt; for unique lines) but this wouldn&#x27;t scale well for larger input files.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;LbAZMZteDpw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Linux Command Line Computing&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 17: counting frequency of items</title>
		<published>2022-10-06T00:00:00+00:00</published>
		<updated>2022-10-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-17/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-17/</id>
		<content type="html">&lt;p&gt;One of the ways to count the frequency of items is to make use of the &lt;code&gt;dict.get()&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;vehicles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;jeep&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bike&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bus&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bike&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;hist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;vehicles:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span&gt;hist[v] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;hist.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(v, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;hist
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;jeep&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bike&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bus&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s a solution using the built-in &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;collections.html&quot;&gt;collections&lt;&#x2F;a&gt; module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from &lt;&#x2F;span&gt;&lt;span&gt;collections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Counter
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;vehicles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;jeep&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bike&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bus&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bike&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Counter&lt;&#x2F;span&gt;&lt;span&gt;(vehicles)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Counter&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bike&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;jeep&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bus&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abracadabra&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Counter&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;b&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;r&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;d&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;3496518&#x2F;4082052&quot;&gt;stackoverflow: using a dictionary to count items&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;2161752&#x2F;4082052&quot;&gt;stackoverflow: count frequency of elements&lt;&#x2F;a&gt; for more ways to solve this problem.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Vv950-4CL-E&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 15: moving within current line</title>
		<published>2022-09-27T00:00:00+00:00</published>
		<updated>2022-09-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-15/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-15/</id>
		<content type="html">&lt;p&gt;Here are some of the Normal mode commands for moving within the current line:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;0&lt;&#x2F;kbd&gt; move to the beginning of the current line (i.e. column number 1)
&lt;ul&gt;
&lt;li&gt;you can also use the &lt;kbd&gt;Home&lt;&#x2F;kbd&gt; key&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;^&lt;&#x2F;kbd&gt; move to the beginning of the first non-blank character of the current line (useful for indented lines)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;$&lt;&#x2F;kbd&gt; move to the end of the current line
&lt;ul&gt;
&lt;li&gt;you can also use the &lt;kbd&gt;End&lt;&#x2F;kbd&gt; key&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3$&lt;&#x2F;kbd&gt; move to the end of 2 lines below the current line&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;g_&lt;&#x2F;kbd&gt; move to the last non-blank character of the current line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3|&lt;&#x2F;kbd&gt; move to the third column character
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;|&lt;&#x2F;kbd&gt; is same as &lt;kbd&gt;0&lt;&#x2F;kbd&gt; or &lt;kbd&gt;1|&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;VfN_LJIiyaI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 16: transpose tables</title>
		<published>2022-09-21T00:00:00+00:00</published>
		<updated>2022-09-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-16/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-16/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;datamash&#x2F;&quot;&gt;GNU datamash&lt;&#x2F;a&gt; has plenty of nifty features for field based operations. Here&#x27;s an example of transposing comma delimited data:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat scores.csv 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Maths&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Physics&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Chemistry
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ith&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Cy&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;98&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;95
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Lin&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Er&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;90
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ datamash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;t, transpose &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;scores.csv 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ith&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Cy&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Lin&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Er
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Maths&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Physics&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;98&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;70
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Chemistry&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;95&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;90
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s an alternate solution using &lt;code&gt;tr&lt;&#x2F;code&gt;, &lt;code&gt;wc&lt;&#x2F;code&gt; and &lt;code&gt;pr&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# divide input into five parts and join them vertically
&lt;&#x2F;span&gt;&lt;span&gt;$ seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; pr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;5ts,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# tr converts input table into single field per line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# wc calculates number of rows and pr does the rest
&lt;&#x2F;span&gt;&lt;span&gt;$ tr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;,&amp;#39; &amp;#39;\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;scores.csv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; pr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;$(wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;scores.csv)ts,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ith&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Cy&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Lin&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Er
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Maths&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Physics&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;98&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;70
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Chemistry&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;95&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;90
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;q&#x2F;308631&#x2F;109046&quot;&gt;unix.stackexchange: How to process an x-column text file to get a y-column one?&lt;&#x2F;a&gt; for many more ways to deal with such problems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;vFMMjTICMJg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Linux Command Line Computing&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 16: delete list elements using index or slice</title>
		<published>2022-09-14T00:00:00+00:00</published>
		<updated>2022-09-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-16/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-16/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;pop()&lt;&#x2F;code&gt; method removes the last element of a &lt;code&gt;list&lt;&#x2F;code&gt; by default. You can pass an index to delete that specific item and the list will be automatically re-arranged. Return value is the element being deleted.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;primes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;primes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;primes
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;student &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;learnbyexample&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2022&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Linux&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Vim&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Python&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;student.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2022
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;student[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Vim&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;student
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;learnbyexample&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Linux&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Python&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To remove multiple elements using slicing notation, use the &lt;code&gt;del&lt;&#x2F;code&gt; statement. Unlike the &lt;code&gt;pop()&lt;&#x2F;code&gt; method, you won&#x27;t get the elements being deleted as the return value.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;books &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mistborn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;legends &amp;amp; lattes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sourdough&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; del &lt;&#x2F;span&gt;&lt;span&gt;books[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;books
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cradle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mistborn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;legends &amp;amp; lattes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; del &lt;&#x2F;span&gt;&lt;span&gt;books[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;books
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;legends &amp;amp; lattes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;student &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;learnbyexample&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2022&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Linux&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Vim&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Python&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; del &lt;&#x2F;span&gt;&lt;span&gt;student[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;student
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;learnbyexample&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2022&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Linux&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Python&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;mLYVt8Nmxv8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 14: horizontal and vertical splits</title>
		<published>2022-09-06T00:00:00+00:00</published>
		<updated>2022-09-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-14/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-14/</id>
		<content type="html">&lt;p&gt;You can have multiple windows within the same tab page.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:split filename&lt;&#x2F;kbd&gt; open file for editing in a new horizontal window, above the current window
&lt;ul&gt;
&lt;li&gt;you can also use &lt;kbd&gt;:sp&lt;&#x2F;kbd&gt; instead of &lt;kbd&gt;:split&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:set splitbelow&lt;&#x2F;kbd&gt; open horizontal splits below the current window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:vsplit filename&lt;&#x2F;kbd&gt; open file for editing in a new vertical window, to the left of the current window
&lt;ul&gt;
&lt;li&gt;you can also use &lt;kbd&gt;:vs&lt;&#x2F;kbd&gt; instead of &lt;kbd&gt;:vsplit&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:set splitright&lt;&#x2F;kbd&gt; open vertical splits to the right of the current window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some shortcuts to navigate between windows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;w&lt;&#x2F;kbd&gt; switch to the below&#x2F;right window for horizontal&#x2F;vertical splits respectively
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; also performs the same function&lt;&#x2F;li&gt;
&lt;li&gt;switches to the first split if you are on the last split&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;W&lt;&#x2F;kbd&gt; switch to the above&#x2F;left window for horizontal&#x2F;vertical splits respectively
&lt;ul&gt;
&lt;li&gt;switches to the last split if you are on the first split&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; followed by &lt;code&gt;hjkl&lt;&#x2F;code&gt; or arrow keys, switch in the respective direction&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;t&lt;&#x2F;kbd&gt; or &lt;kbd&gt;b&lt;&#x2F;kbd&gt; switch to the top (first) or bottom (last) window&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;w&lt;&#x2F;kbd&gt; followed by &lt;code&gt;HJKL&lt;&#x2F;code&gt; (uppercase), moves the current split to the farthest possible location in the respective direction&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If filename is not provided, the current one is used.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Vim adds a highlighted horizontal bar containing the filename for each split.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;6xtHzEdFtFs&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 15: text generation with printf and brace expansion</title>
		<published>2022-08-31T00:00:00+00:00</published>
		<updated>2022-08-31T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-15/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-15/</id>
		<content type="html">&lt;p&gt;You can use &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;bash&#x2F;manual&#x2F;bash.html#Brace-Expansion&quot;&gt;brace expansion&lt;&#x2F;a&gt; for generating a sequence of numbers and alphabets. &lt;code&gt;printf&lt;&#x2F;code&gt; helps you to display multiple arguments using the same format specifier. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ echo {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 2 3
&lt;&#x2F;span&gt;&lt;span&gt;$ echo {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}{a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;b}
&lt;&#x2F;span&gt;&lt;span&gt;1a 1b 2a 2b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;\n&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; apple banana cherry
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Combining the two, you can generate multiple lines of text. Here are some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;\n&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; id_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;id_3
&lt;&#x2F;span&gt;&lt;span&gt;id_2
&lt;&#x2F;span&gt;&lt;span&gt;id_1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;\n&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; item_{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;item_100
&lt;&#x2F;span&gt;&lt;span&gt;item_104
&lt;&#x2F;span&gt;&lt;span&gt;item_108
&lt;&#x2F;span&gt;&lt;span&gt;item_112
&lt;&#x2F;span&gt;&lt;span&gt;item_116
&lt;&#x2F;span&gt;&lt;span&gt;item_120
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s a practical example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# the string before %.s is repeated based on the number of arguments
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%.s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; a b c
&lt;&#x2F;span&gt;&lt;span&gt;x x x 
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%.s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- - - - - 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: seq 10 | paste -d, - - - - -
&lt;&#x2F;span&gt;&lt;span&gt;$ seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d, $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%.s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ n=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;$ seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d, $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%.s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; $(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$n&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ n=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;$ seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d, $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%.s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; $(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$n&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;5349718&#x2F;4082052&quot;&gt;this stackoverflow thread&lt;&#x2F;a&gt; for other alternatives, avoiding &lt;code&gt;printf&lt;&#x2F;code&gt; for large numbers, etc.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Br0sQ-Qj4LQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Linux Command Line Computing&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 15: string transliteration</title>
		<published>2022-08-24T00:00:00+00:00</published>
		<updated>2022-08-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-15/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-15/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;str.translate()&lt;&#x2F;code&gt; method accepts a table of codepoints (numerical value of a character) mapped to another character or codepoint. Map to &lt;code&gt;None&lt;&#x2F;code&gt; for characters that have to be deleted. You can use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions.html#ord&quot;&gt;ord()&lt;&#x2F;a&gt; built-in function to get the codepoint of characters. Or, you can use the &lt;code&gt;str.maketrans()&lt;&#x2F;code&gt; method to generate the mapping for you.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;A&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;65
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;greeting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;have a nice day&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# map &amp;#39;a&amp;#39; to &amp;#39;A&amp;#39;, &amp;#39;e&amp;#39; to &amp;#39;E&amp;#39; and &amp;#39;i&amp;#39; to None
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;greeting.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;65&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;101&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;E&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;105&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hAvE A ncE dAy&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# first and second arguments specify the one-to-one mapping of characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# third argument is optional, specifies characters to be deleted
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maketrans&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ae&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;AE&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;i&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;65&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;101&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;69&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;105&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;greeting.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maketrans&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ae&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;AE&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;i&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hAvE A ncE dAy&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;string.html&quot;&gt;string module&lt;&#x2F;a&gt; has a collection of constants that are often useful in text processing. Here&#x27;s an example of deleting punctuation characters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from &lt;&#x2F;span&gt;&lt;span&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;punctuation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;punctuation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;!&amp;quot;#$%&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;()*+,-.&#x2F;:;&amp;lt;=&amp;gt;?@[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;]^_`{|}~&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;para &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;Hi&amp;quot;, there! How *are* you? All fine here.&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;para.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maketrans&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, punctuation))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi there How are you All fine here&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;chars_to_delete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(punctuation) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;.!?&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;para.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maketrans&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, chars_to_delete))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi there! How are you? All fine here.&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;FS7nyQOxoeI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 13: repeat last change</title>
		<published>2022-08-16T00:00:00+00:00</published>
		<updated>2022-08-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-13/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-13/</id>
		<content type="html">&lt;p&gt;It is way too easy to repeat the last change you made:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;.&lt;&#x2F;kbd&gt; the Normal mode &lt;strong&gt;dot&lt;&#x2F;strong&gt; command repeats the last change
&lt;ul&gt;
&lt;li&gt;you can also use a number prefix to override the count of the last change&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example,&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;if the last change was &lt;kbd&gt;2dd&lt;&#x2F;kbd&gt; (delete current line and the line below), dot key will repeat &lt;code&gt;2dd&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;using &lt;kbd&gt;3.&lt;&#x2F;kbd&gt; will mean &lt;code&gt;3dd&lt;&#x2F;code&gt; and not &lt;code&gt;6dd&lt;&#x2F;code&gt;, since the count prefix replaces the earlier number&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;if the last change was &lt;kbd&gt;5x&lt;&#x2F;kbd&gt; (delete current character and four characters to the right), dot key will repeat &lt;code&gt;5x&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;if the last change was &lt;kbd&gt;C123&amp;lt;Esc&amp;gt;&lt;&#x2F;kbd&gt; and dot key is pressed, it will clear from the current character to the end of the line, insert &lt;code&gt;123&lt;&#x2F;code&gt; and go back to Normal mode&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;usr_04.txt.html#04.3&quot;&gt;:h 4.3&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;kbd&gt;.&lt;&#x2F;kbd&gt; command works for all changes you make, except for &lt;kbd&gt;u&lt;&#x2F;kbd&gt; (undo), &lt;kbd&gt;CTRL-R&lt;&#x2F;kbd&gt; (redo) and commands that start with a colon (&lt;code&gt;:&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;repeat.txt.html&quot;&gt;:h repeat.txt&lt;&#x2F;a&gt; for complex repeats, using Vim scripts, etc.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;9JrIcNS0eow&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Programming ebooks by Sundeep Agarwal</title>
		<published>2022-08-09T00:00:00+00:00</published>
		<updated>2024-12-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/books/" type="text/html"/>
		<id>https://learnbyexample.github.io/books/</id>
		<content type="html">&lt;p&gt;This post lists my programming ebooks with details like PDF&#x2F;EPUB purchase links, GitHub repos, web versions, testimonials, etc. All my ebooks are self-published. You can get these ebooks individually or as part of bundles. You can also read them online for free.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;bundles-books&quot;&gt;&lt;p style=&quot;color: #c05b4d&quot;&gt;Bundles 📚&lt;&#x2F;h1&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;all_books_bundle.png&quot; alt=&quot;All books bundle&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Poster created using &lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;&quot;&gt;Canva&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;All books bundle&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;learnbyexample-all-books&quot;&gt;leanpub&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&quot;&gt;gumroad&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;13 programming ebooks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Linux CLI Text Processing bundle&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;linux-cli-text-processing&quot;&gt;leanpub&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;linux-cli-text-processing&quot;&gt;gumroad&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;GNU grep, sed, awk, Perl and Ruby one-liners, GNU coreutils, CLI computing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Awesome regex&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;regex&quot;&gt;leanpub&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;regex&quot;&gt;gumroad&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Python, Ruby, JavaScript Regular expressions&lt;&#x2F;li&gt;
&lt;li&gt;GNU grep, ripgrep, GNU sed, GNU awk CLI tools (BRE&#x2F;ERE, PCRE, Rust regex crate, PCRE2)&lt;&#x2F;li&gt;
&lt;li&gt;Vim regexp&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Magical one-liners&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;oneliners&quot;&gt;leanpub&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;oneliners&quot;&gt;gumroad&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;GNU grep, ripgrep, GNU sed, GNU awk, Ruby, Perl CLI tools&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Learn by example Python bundle&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;python-bundle&quot;&gt;leanpub&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&quot;&gt;gumroad&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Intro, Regular expressions and Projects&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Ruby Text processing&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;ruby-textprocessing&quot;&gt;leanpub&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;ruby-textprocessing&quot;&gt;gumroad&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Ruby regular expressions, Ruby One-Liners Guide&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Bundles with other indie authors:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;theindiepythonextravaganza&quot;&gt;The Indie Python Extravaganza&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Understanding Python re(gex)?, Practice Python Projects (my books)&lt;&#x2F;li&gt;
&lt;li&gt;Python 101, Pydon&#x27;ts, Clean Architectures in Python (authored by others)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;python101pythonregex&quot;&gt;Python 101 + Understanding Python re(gex)?&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;python201_and_regex&quot;&gt;Python 201: Intermediate Python + Understanding Python re(gex)?&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Python 101&#x2F;201 is authored by &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;&quot;&gt;Michael Driscoll&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;testimonials-heart-eyes&quot;&gt;&lt;p style=&quot;color: #c05b4d&quot;&gt;Testimonials 😍&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I love your books on regex...As a student from the Digital VLSI space, it is indeed useful now and definitely in the future. It&#x27;s really well written and really easy to understand the examples.&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;Python&#x2F;comments&#x2F;i0m2sy&#x2F;i_know_python_basics_what_next&#x2F;fzql5gh&#x2F;&quot;&gt;feedback on reddit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#x27;s very thorough, written with care, and presented in a way that makes sense. Even as an intermediate Python programmer, I found use in this book.&lt;&#x2F;p&gt;
&lt;p&gt;— feedback by &lt;a href=&quot;https:&#x2F;&#x2F;healeycodes.com&#x2F;&quot;&gt;Andrew Healey&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=26082464&quot;&gt;Hacker News&lt;&#x2F;a&gt; for &amp;quot;100 Page Python Intro&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Step up your cli fu with this fabulous intro &amp;amp; deep dive into awk. I learned a ton of tricks!&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;killchain&#x2F;status&#x2F;1246820137455452163&quot;&gt;feedback on twitter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Your Practice Python Projects book is really helping me to reinforce my knowledge and mastery of Python as I&#x27;m learning.&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tayporware&#x2F;status&#x2F;1446499855988400129&quot;&gt;feedback on twitter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In my opinion the book does a great job of quickly presenting examples of how commands can be used and then paired up to achieve new or interesting ways of manipulating data. Throughout the text there are little highlights offering tips on extra functionality or limitations of certain commands. For instance, when discussing the &lt;em&gt;shuf&lt;&#x2F;em&gt; command we&#x27;re warned that &lt;em&gt;shuf&lt;&#x2F;em&gt; will not work with multiple files. However, we can merge multiple files together (using the &lt;em&gt;cat&lt;&#x2F;em&gt; command) and then pass them to &lt;em&gt;shuf&lt;&#x2F;em&gt;. These little gems of wisdom add a dimension to the book and will likely save the reader some time wondering why their scripts are not working as expected.&lt;&#x2F;p&gt;
&lt;p&gt;— book review by Jesse Smith on &lt;a href=&quot;https:&#x2F;&#x2F;distrowatch.com&#x2F;weekly.php?issue=20211206#book&quot;&gt;distrowatch.com&lt;&#x2F;a&gt; for &amp;quot;Command line text processing with GNU Coreutils&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Literally was having a mini-breakdown about not understanding Regex in algorithm solutions the other day and now I&#x27;m feeling so much better, so thank YOU! I genuinely feel like I&#x27;m developing the skill for spotting when and where to use them after so much practice!&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;codingwithlucy&#x2F;status&#x2F;1450668315635036160&quot;&gt;feedback on twitter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This Ruby one-liners cookbook is incredible. Pretty mind boggling all the stuff you can do.&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jbrancha&#x2F;status&#x2F;1506766118756786189&quot;&gt;feedback on twitter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, great work releasing this! Trying to explain vim concisely is always an interesting challenge and I had a great time reading your attempt in this book. I always find it really interesting on how people try to group certain vim functions in a way that makes sense to people that don&#x27;t use vim. I think you cover that idea pretty well in your &#x27;Vim philosophy and features&#x27; section whilst not making it overly abstract and keeping it relatable.&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30684232&quot;&gt;feedback on Hacker News&lt;&#x2F;a&gt; by doix for &amp;quot;Vim Reference Guide&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I consider myself pretty experienced at shell-fu and capable of doing most things I set out to achieve in either bash scripts or fearless one-liners. However, my awk is rudimentary at best, I think mostly because it&#x27;s such an unforgiving environment to experiment in. These books you&#x27;ve written are great for a bit of first principles insight and then quickly building up to functional usage. I will have no hesitation in referring colleagues to them!&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=31930840&quot;&gt;feedback on Hacker News&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you for choosing to write and share your knowledge. I read your books on CLI and sed - I think they are very comprehensive and very well explained. Keep up the great work&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;le_anh_phuong&#x2F;status&#x2F;1628149732760604672&quot;&gt;feedback on twitter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This is fantastic! 👏 I use Perl one-liners for record and text processing a lot and this will be definitely something I will keep coming back to - I’ve already learned a trick from “Context Matching” (9) 🙂&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;programming.dev&#x2F;comment&#x2F;3277968&quot;&gt;feedback on Linux@lemmy.ml&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Nice book! I just started trying to get into linux today and you have some tips I haven’t found elsewhere and the text is an enjoyable read so far.&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;linux4noobs&#x2F;comments&#x2F;1adrx6c&#x2F;linux_guide_for_beginners&#x2F;kk3dypr&#x2F;&quot;&gt;feedback on reddit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I discovered your books recently and they’re awesome, thank you! As a 20 year *nix they made me realize how much more there are to these rock solid and ancient tools, once you spend the time to actually learn the intricacies of them.&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;commandline&#x2F;comments&#x2F;1byumd6&#x2F;learn_gnu_coreutils_text_processing_tools_like&#x2F;l2pk5bd&#x2F;&quot;&gt;feedback on reddit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I love the whole learn by example premise. Those exercises at the end are so valuable, as it often times leads me to find multiple solutions which helps me conceptualize how commands work with each other much better!&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;linux4noobs&#x2F;comments&#x2F;lkbr65&#x2F;learn_grep_sed_awk_perl_oneliners_with_hundreds&#x2F;l6btf13&#x2F;?context=3&quot;&gt;feedback on reddit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h1 id=&quot;100-page-python-intro&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;100 Page Python Intro&lt;&#x2F;h1&gt;
&lt;p&gt;Short, introductory guide for the Python programming language, suited for those already familiar with programming basics.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;100_page_python_intro&#x2F;main&#x2F;images&#x2F;py_intro_ls.png&quot; alt=&quot;100 Page Python Intro cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&#x2F;blob&#x2F;main&#x2F;sample_chapters&#x2F;100_page_python_intro_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;100pagepythonintro&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;100pagepythonintro&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;understanding-python-re-gex&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;h1&gt;
&lt;p&gt;Learn Python Regular Expressions step-by-step from beginner to advanced levels with 300+ examples. Both &lt;code&gt;re&lt;&#x2F;code&gt; and &lt;code&gt;regex&lt;&#x2F;code&gt; modules are covered. Exercises are also included to test your understanding.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;master&#x2F;images&#x2F;py_regex_ls.png&quot; alt=&quot;Understanding Python re(gex)? cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;blob&#x2F;master&#x2F;sample_chapters&#x2F;py_regex_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;practice-python-projects&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;Practice Python Projects&lt;&#x2F;h1&gt;
&lt;p&gt;Know Python basics but don&#x27;t know what to do next? Take the next step in your programming journey with real world inspired Python projects.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;py_projects.png&quot; alt=&quot;Practice Python Projects cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&#x2F;blob&#x2F;main&#x2F;sample_chapters&#x2F;practice_python_projects_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_projects&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_projects&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;understanding-javascript-regexp&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;Understanding JavaScript RegExp&lt;&#x2F;h1&gt;
&lt;p&gt;Learn JavaScript Regular Expressions step-by-step from beginner to advanced levels with hundreds of examples and exercises.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;learn_js_regexp&#x2F;master&#x2F;images&#x2F;js_regexp_ls.png&quot; alt=&quot;Understanding JavaScript RegExp cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&#x2F;blob&#x2F;master&#x2F;sample_chapters&#x2F;js_regexp_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;js_regexp&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;js_regexp&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_js_regexp&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;cli-text-processing-with-gnu-grep-and-ripgrep&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;h1&gt;
&lt;p&gt;Example based guide to mastering GNU grep and ripgrep. Exercises are also included to test your understanding.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&#x2F;master&#x2F;images&#x2F;grep_ls.png&quot; alt=&quot;CLI text processing with GNU grep and ripgrep cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&#x2F;blob&#x2F;master&#x2F;sample_chapters&#x2F;gnu_grep_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnugrep_ripgrep&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;gnugrep_ripgrep&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnugrep_ripgrep&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;cli-text-processing-with-gnu-sed&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;CLI text processing with GNU sed&lt;&#x2F;h1&gt;
&lt;p&gt;Example based guide to mastering GNU sed. Exercises are also included to test your understanding.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;learn_gnused&#x2F;master&#x2F;images&#x2F;sed_ls.png&quot; alt=&quot;CLI text processing with GNU sed cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&#x2F;blob&#x2F;master&#x2F;sample_chapters&#x2F;gnu_sed_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnu_sed&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;gnu_sed&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;cli-text-processing-with-gnu-awk&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;h1&gt;
&lt;p&gt;Example based guide to mastering GNU awk one-liners. Exercises are also included to test your understanding.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;learn_gnuawk&#x2F;master&#x2F;images&#x2F;gawk_ls.png&quot; alt=&quot;CLI text processing with GNU awk cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&#x2F;blob&#x2F;master&#x2F;sample_chapters&#x2F;gnu_awk_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnu_awk&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;gnu_awk&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnuawk&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;understanding-ruby-regexp&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;Understanding Ruby Regexp&lt;&#x2F;h1&gt;
&lt;p&gt;Learn Ruby Regular Expressions step-by-step from beginner to advanced levels with hundreds of examples and exercises.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;Ruby_Regexp&#x2F;master&#x2F;images&#x2F;ruby_regexp_ls.png&quot; alt=&quot;Understanding Ruby Regexp cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Ruby_Regexp&#x2F;blob&#x2F;master&#x2F;sample_chapters&#x2F;ruby_regexp_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Pay what you want for pdf&#x2F;epub:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;rubyregexp&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;rubyregexp&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Ruby_Regexp&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;Ruby_Regexp&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;ruby-one-liners-guide&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;Ruby One-Liners Guide&lt;&#x2F;h1&gt;
&lt;p&gt;Example based guide for text processing with Ruby from the command line. Exercises are also included to test your understanding.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;learn_ruby_oneliners&#x2F;master&#x2F;images&#x2F;ruby_oneliners_ls.png&quot; alt=&quot;Ruby One-Liners Guide cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_ruby_oneliners&#x2F;blob&#x2F;master&#x2F;sample_chapters&#x2F;ruby_oneliners_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;ruby-oneliners&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;ruby-oneliners&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_ruby_oneliners&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_ruby_oneliners&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;perl-one-liners-guide&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;Perl One-Liners Guide&lt;&#x2F;h1&gt;
&lt;p&gt;Example based guide for text processing with Perl from the command line. Exercises are also included to test your understanding.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&#x2F;main&#x2F;images&#x2F;perl_oneliners_ls.png&quot; alt=&quot;Perl One-Liners Guide cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&#x2F;blob&#x2F;main&#x2F;sample_chapters&#x2F;perl_oneliners_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;perl-oneliners&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;perl-oneliners&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_perl_oneliners&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;cli-text-processing-with-gnu-coreutils&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;CLI text processing with GNU Coreutils&lt;&#x2F;h1&gt;
&lt;p&gt;You might be already aware of popular coreutils commands like &lt;code&gt;head&lt;&#x2F;code&gt;, &lt;code&gt;tail&lt;&#x2F;code&gt;, &lt;code&gt;tr&lt;&#x2F;code&gt;, &lt;code&gt;sort&lt;&#x2F;code&gt; and so on. This book will teach you more than twenty of such specialized text processing tools provided by the &lt;code&gt;GNU coreutils&lt;&#x2F;code&gt; package.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&#x2F;main&#x2F;images&#x2F;cli_coreutils_ls.png&quot; alt=&quot;CLI text processing with GNU Coreutils cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&#x2F;blob&#x2F;main&#x2F;sample_chapters&#x2F;cli_text_processing_coreutils_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;cli_coreutils&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;cli_coreutils&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;GitHub repo for code snippets and more&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;vim-reference-guide&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;Vim Reference Guide&lt;&#x2F;h1&gt;
&lt;p&gt;This is intended as a concise learning resource for beginner to intermediate level Vim users. It has more in common with cheatsheets than a typical text book. Topics like Regular Expressions and Macros have more detailed explanations and examples due to their complexity.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;images&#x2F;vim_reference_guide_ls.png&quot; alt=&quot;Vim Reference Guide cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&#x2F;blob&#x2F;master&#x2F;sample_chapters&#x2F;vim_reference_guide_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;vim_reference_guide&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;vim_reference_guide&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;GitHub repo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;linux-command-line-computing&quot;&gt;&lt;p style=&quot;color: #ff9933&quot;&gt;Linux Command Line Computing&lt;&#x2F;h1&gt;
&lt;p&gt;This ebook aims to teach &lt;strong&gt;Linux command line tools and Shell Scripting&lt;&#x2F;strong&gt; for &lt;strong&gt;beginner to intermediate&lt;&#x2F;strong&gt; level users. The main focus is towards &lt;strong&gt;managing your files&lt;&#x2F;strong&gt; and performing &lt;strong&gt;text processing tasks&lt;&#x2F;strong&gt;. Plenty of &lt;strong&gt;examples&lt;&#x2F;strong&gt; are provided to make it easier to understand a particular tool and its various features. &lt;strong&gt;Exercises&lt;&#x2F;strong&gt; at the end of chapters will help you practice what you&#x27;ve learned and &lt;strong&gt;solutions&lt;&#x2F;strong&gt; are provided for reference. I hope this ebook would make it much easier for you to discover CLI tools, features and learning resources than my own blundering experience.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli-computing&#x2F;images&#x2F;cli_computing_ls.png&quot; alt=&quot;Linux Command Line Computing cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&#x2F;blob&#x2F;master&#x2F;sample_chapters&#x2F;cli_computing_sample.pdf&quot;&gt;Sample chapters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Buy pdf&#x2F;epub from:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;cli_computing&quot;&gt;gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;cli_computing&quot;&gt;leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;GitHub repo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli-computing&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Feedback: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 14: specify permissions during directory creation</title>
		<published>2022-08-09T00:00:00+00:00</published>
		<updated>2022-08-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-14/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-14/</id>
		<content type="html">&lt;p&gt;You can use &lt;code&gt;mkdir -m&lt;&#x2F;code&gt; instead of creating a directory with &lt;code&gt;mkdir&lt;&#x2F;code&gt; first and then changing the directory permissions with the &lt;code&gt;chmod&lt;&#x2F;code&gt; command. The argument to the &lt;code&gt;-m&lt;&#x2F;code&gt; (mode) option uses the same syntax as the &lt;code&gt;chmod&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# instead of this
&lt;&#x2F;span&gt;&lt;span&gt;$ mkdir back_up
&lt;&#x2F;span&gt;&lt;span&gt;$ chmod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;750&lt;&#x2F;span&gt;&lt;span&gt; back_up
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# do this
&lt;&#x2F;span&gt;&lt;span&gt;$ mkdir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;750&lt;&#x2F;span&gt;&lt;span&gt; back_up
&lt;&#x2F;span&gt;&lt;span&gt;$ stat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%a %A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; back_up
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;750&lt;&#x2F;span&gt;&lt;span&gt; drwxr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some more examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ mkdir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;rx dummy_dir
&lt;&#x2F;span&gt;&lt;span&gt;$ stat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%a %A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; dummy_dir
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;555&lt;&#x2F;span&gt;&lt;span&gt; dr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;xr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;xr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ mkdir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;rwx dot_files
&lt;&#x2F;span&gt;&lt;span&gt;$ stat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%a %A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; dot_files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;700&lt;&#x2F;span&gt;&lt;span&gt; drwx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;------
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;8PFWbzFue14&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Linux Command Line Computing&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 14: sequence unpacking</title>
		<published>2022-08-03T00:00:00+00:00</published>
		<updated>2022-08-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-14/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-14/</id>
		<content type="html">&lt;p&gt;You can assign the individual elements of a sequence to multiple variables. This is known as &lt;strong&gt;sequence unpacking&lt;&#x2F;strong&gt; and it is handy in many situations.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;details &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2018-10-25&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2346&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;purchase_date, vehicle, qty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;details
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;purchase_date
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2018-10-25&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;vehicle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;car&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;qty
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2346
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s how you can easily assign and swap multiple variables.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# multiple assignments
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;num1, num2, num3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# swapping values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;num1, num2, num3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;num3, num1, num2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{num1 = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;{num2 = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;{num3 = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;span&gt;num3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unpacking isn&#x27;t limited to mapping every element of the sequence. You can use a &lt;code&gt;*&lt;&#x2F;code&gt; prefix to catch all the remaining values (if any is left) in a &lt;code&gt;list&lt;&#x2F;code&gt; variable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;values &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;first&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;last&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;x
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;first&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;y
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;last&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;nums, s2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;first&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;last&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;mathspp.com&#x2F;blog&#x2F;pydonts&#x2F;unpacking-with-starred-assignments&quot;&gt;Unpacking with starred assignments&lt;&#x2F;a&gt; for more examples and explanations.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;0hOl2YSkO4w&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 12: save and restore sessions</title>
		<published>2022-07-26T00:00:00+00:00</published>
		<updated>2022-07-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-12/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-12/</id>
		<content type="html">&lt;p&gt;You can save and restore Vim sessions to continue working with the same setup before you had to quit Vim for reasons like switching off the machine, switching to another project, etc.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:mksession proj.vim&lt;&#x2F;kbd&gt; save the current Vim session with details like cursor position, file list, layout, etc
&lt;ul&gt;
&lt;li&gt;you can customize things to be saved using the &lt;code&gt;sessionoptions&lt;&#x2F;code&gt; setting&lt;&#x2F;li&gt;
&lt;li&gt;for example, &lt;kbd&gt;:set sessionoptions+=resize&lt;&#x2F;kbd&gt; will save resized window information as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:mksession! proj.vim&lt;&#x2F;kbd&gt; overwrite existing session&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;:source proj.vim&lt;&#x2F;kbd&gt; restore Vim session from &lt;code&gt;proj.vim&lt;&#x2F;code&gt; file
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vim -S proj.vim&lt;&#x2F;code&gt; restore a session from the command line when launching Vim&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;usr_21.txt.html#21.4&quot;&gt;:h 21.4&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;starting.txt.html#views-sessions&quot;&gt;:h views-sessions&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html#%27sessionoptions%27&quot;&gt;:h &#x27;sessionoptions&#x27;&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;1642611&#x2F;4082052&quot;&gt;stackoverflow: How to save and restore multiple different sessions in Vim?&lt;&#x2F;a&gt; for custom settings to automate the save and restore process and other tips and tricks. See also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iggredible&#x2F;Learn-Vim&#x2F;blob&#x2F;master&#x2F;ch20_views_sessions_viminfo.md&quot;&gt;Learn-Vim: Views, Sessions, and Viminfo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;8FERF0M2Dm4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 13: join lines of two files based on the first field</title>
		<published>2022-07-20T00:00:00+00:00</published>
		<updated>2022-07-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-13/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-13/</id>
		<content type="html">&lt;p&gt;By default, &lt;code&gt;join&lt;&#x2F;code&gt; combines two files based on the first field content (also referred as &lt;strong&gt;key&lt;&#x2F;strong&gt;). Only the lines with common keys will be part of the output. The key field will be displayed first in the output (this distinction will come into play if the first field isn&#x27;t the key). Rest of the line will have the remaining fields from the first and second files, in that order. One or more blanks (space or tab) will be considered as the input field separator and a single space will be used as the output field separator. If present, blank characters at the start of the input lines will be ignored.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# sample sorted input files
&lt;&#x2F;span&gt;&lt;span&gt;$ cat jan.txt
&lt;&#x2F;span&gt;&lt;span&gt;apple   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;banana  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;20
&lt;&#x2F;span&gt;&lt;span&gt;soap    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;tshirt  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;$ cat feb.txt
&lt;&#x2F;span&gt;&lt;span&gt;banana  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;15
&lt;&#x2F;span&gt;&lt;span&gt;fig     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;pen     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;soap    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# combine common lines based on the first field
&lt;&#x2F;span&gt;&lt;span&gt;$ join jan.txt feb.txt
&lt;&#x2F;span&gt;&lt;span&gt;banana &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;20 15
&lt;&#x2F;span&gt;&lt;span&gt;soap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an &lt;code&gt;awk&lt;&#x2F;code&gt; version to do the same. Helpful if you want to do some additional processing that won&#x27;t be possible with the &lt;code&gt;join&lt;&#x2F;code&gt; command. Another advantage is that this solution will work even if the input files are not sorted.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR==FNR{a[$1]=$2; next} $1 in a{print $1, a[$1], $2}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; jan.txt feb.txt
&lt;&#x2F;span&gt;&lt;span&gt;banana &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;20 15
&lt;&#x2F;span&gt;&lt;span&gt;soap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Pjku4w7J6Zg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;join.html&quot;&gt;join chapter&lt;&#x2F;a&gt; from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; ebook for more details and examples.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 13: formatting numbers with underscore separation</title>
		<published>2022-07-13T00:00:00+00:00</published>
		<updated>2022-07-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-13/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-13/</id>
		<content type="html">&lt;p&gt;For readability purposes, you can use underscores while declaring large numbers. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1_000_000_000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1000000000
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0b1000_1111
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;143
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Did you know that you can also format numbers with underscore separation?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;14310023
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# underscore separation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:_&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;14_310_023&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# you can also use comma separation for integers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:,&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;14,310,023&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some examples for displaying numbers in binary, octal and hexadecimal formats:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;14310023
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:_b&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1101_1010_0101_1010_1000_0111&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:#_b&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0b1101_1010_0101_1010_1000_0111&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:#_x&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0xda_5a87&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:#_o&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0o6645_5207&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s an example with zero filling:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:09_b&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0000&lt;&#x2F;span&gt;&lt;span&gt;_0011
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;_0100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;_1100
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;lexical_analysis.html#f-strings&quot;&gt;docs.python: Formatted string literals&lt;&#x2F;a&gt; for documentation and other examples.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;wFg0wS8nY4o&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 11: replace characters in Normal mode</title>
		<published>2022-07-06T00:00:00+00:00</published>
		<updated>2022-07-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-11/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-11/</id>
		<content type="html">&lt;p&gt;Often, you just need to change one character. For example, changing &lt;code&gt;i&lt;&#x2F;code&gt; to &lt;code&gt;j&lt;&#x2F;code&gt;, &lt;code&gt;2&lt;&#x2F;code&gt; to &lt;code&gt;4&lt;&#x2F;code&gt;, &lt;code&gt;&#x27;&lt;&#x2F;code&gt; to &lt;code&gt;&amp;quot;&lt;&#x2F;code&gt; and so on.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;rj&lt;&#x2F;kbd&gt; replace the character under the cursor with &lt;code&gt;j&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;ry&lt;&#x2F;kbd&gt; replace the character under the cursor with &lt;code&gt;y&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3ra&lt;&#x2F;kbd&gt; replace the character under cursor as well as the two characters to the right with &lt;code&gt;aaa&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;no changes will be made if there aren&#x27;t sufficient characters to match&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To replace multiple characters with different characters, use &lt;code&gt;R&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Rlion&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt; replace the character under cursor and three characters to the right with &lt;code&gt;lion&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Esc&lt;&#x2F;kbd&gt; key marks the completion of &lt;code&gt;R&lt;&#x2F;code&gt; command&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; key will act as an undo command to give back the character that was replaced&lt;&#x2F;li&gt;
&lt;li&gt;if you are replacing at the end of a line, the line will be automatically extended if needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The advantage of &lt;code&gt;r&lt;&#x2F;code&gt; and &lt;code&gt;R&lt;&#x2F;code&gt; commands is that you remain in the Normal mode, without needing to switch to Insert mode and back.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;cNRNiwIcqNc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 12: squeeze empty lines</title>
		<published>2022-06-29T00:00:00+00:00</published>
		<updated>2022-06-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-12/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-12/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;awk&lt;&#x2F;code&gt; has a builtin feature to process input content paragraph wise (by setting &lt;code&gt;RS&lt;&#x2F;code&gt; to an empty string). But, did you know that &lt;code&gt;cat&lt;&#x2F;code&gt;, &lt;code&gt;less&lt;&#x2F;code&gt; and &lt;code&gt;grep&lt;&#x2F;code&gt; can also be used to squeeze empty lines?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cat -s&lt;&#x2F;code&gt; (and &lt;code&gt;less -s&lt;&#x2F;code&gt;) will squeeze multiple empty lines in the input to a single empty line in the output. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tea coffee
&lt;&#x2F;span&gt;&lt;span&gt;chocolate
&lt;&#x2F;span&gt;&lt;span&gt;$ cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tea coffee
&lt;&#x2F;span&gt;&lt;span&gt;chocolate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an example with empty lines at the start&#x2F;end of the input:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\n\n\ndragon\n\n\nunicorn\n\n\n&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;dragon
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;unicorn
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\n\n\ndragon\n\n\nunicorn\n\n\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;dragon
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;unicorn
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s a solution with &lt;code&gt;awk&lt;&#x2F;code&gt;. Unlike the &lt;code&gt;-s&lt;&#x2F;code&gt; option, this will completely remove empty lines at the start&#x2F;end of the input.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print s $0; s=&amp;quot;\n&amp;quot;}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tea coffee
&lt;&#x2F;span&gt;&lt;span&gt;chocolate
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\n\n\ndragon\n\n\nunicorn\n\n\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print s $0; s=&amp;quot;\n&amp;quot;}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;dragon
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;unicorn
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;awk&lt;&#x2F;code&gt; solution would be easier to extend, given its programmable features. For example, two empty lines between the groups:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print s $0; s=&amp;quot;\n\n&amp;quot;}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tea coffee
&lt;&#x2F;span&gt;&lt;span&gt;chocolate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s a surprising &lt;code&gt;GNU grep&lt;&#x2F;code&gt; solution, with a customizable group separator:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# single empty line
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;separator= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;A0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;cherry
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tea coffee
&lt;&#x2F;span&gt;&lt;span&gt;chocolate
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# double empty line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# empty lines at the start&#x2F;end of the input are removed too
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\n\n\ndragon\n\n\nunicorn\n\n\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;separator=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; -A0 &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;dragon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;unicorn
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;DjNF2Sbwyxk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;CLI text processing with GNU Coreutils&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;a&gt; ebooks.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 12: negate a regex grouping</title>
		<published>2022-06-22T00:00:00+00:00</published>
		<updated>2022-06-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-12/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-12/</id>
		<content type="html">&lt;p&gt;You might be familiar with negating a character class, for example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove first two columns
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;:]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple:42:banana:1000:cherry:512&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;banana:1000:cherry:512&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# filter all elements not ending with `r` or `t`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;surrender&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;unicorn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;newer&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;door&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;empty&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;eel&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;pest&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;rt]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, w)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;unicorn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;empty&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;eel&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But do you know how to match characters based on a negated group? You can use a combination of negative lookahead and quantifiers as shown in the examples below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,parrot&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match if &amp;#39;do&amp;#39; is not present between &amp;#39;at&amp;#39; and &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;at((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;do)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, pets))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match if &amp;#39;go&amp;#39; is not present between &amp;#39;at&amp;#39; and &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;at((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;go)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, pets))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# easier to understand by looking at the matched portions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;at((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;go)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, pets)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;at,dog,par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, pets)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;.&lt;&#x2F;code&gt; in &lt;code&gt;((?!go).)*&lt;&#x2F;code&gt; will match a character only if the sequence of current and next characters are not &lt;code&gt;go&lt;&#x2F;code&gt;. Similarly, the &lt;code&gt;.&lt;&#x2F;code&gt; in &lt;code&gt;((?!par).)*&lt;&#x2F;code&gt; matches a character only if the current and next two characters are not &lt;code&gt;par&lt;&#x2F;code&gt;. The &lt;code&gt;*&lt;&#x2F;code&gt; quantifier is applied on the outer group to match zero or more characters satisfying the given condition.&lt;&#x2F;p&gt;
&lt;p&gt;The outer group in the above examples are capturing groups, though it wasn&#x27;t required. Just makes the pattern concise. However, capturing groups affect the behavior of functions like &lt;code&gt;re.split&lt;&#x2F;code&gt; and &lt;code&gt;re.findall&lt;&#x2F;code&gt;. You can use non-capturing groups in such cases:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# capture group affects the behavior of &amp;#39;re.findall&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;42)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a422b good bad42 nice100&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;d&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# so, use a non-capturing group here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(?:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;42)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a422b good bad42 nice100&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;good&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;nice100&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Test your understanding by solving this exercise. Construct a regex solution that works for all three sample transformations shown below:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Power(x,2)&lt;&#x2F;code&gt; should be replaced with &lt;code&gt;(x)*(x)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Power(Power(x,2) + x,2)&lt;&#x2F;code&gt; should be changed to &lt;code&gt;((x)*(x) + x)*((x)*(x) + x)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Power(x + Power(x,2),2)&lt;&#x2F;code&gt; should be changed to &lt;code&gt;(x + (x)*(x))*(x + (x)*(x))&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If that was easy, make it work for general powers instead of just &lt;code&gt;2&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Power(Power(x,2),3)&lt;&#x2F;code&gt; translates to &lt;code&gt;((x)*(x))*((x)*(x))*((x)*(x))&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The above exercise is based on &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;67214116&#x2F;4082052&quot;&gt;this stackoverflow Q&amp;amp;A&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;bkPS1dWZ2xU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 10: Undo and Redo</title>
		<published>2022-06-15T00:00:00+00:00</published>
		<updated>2022-06-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-10/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-10/</id>
		<content type="html">&lt;p&gt;In Normal mode, you can undo and redo changes using the following commands:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;u&lt;&#x2F;kbd&gt; undo last change
&lt;ul&gt;
&lt;li&gt;press &lt;kbd&gt;u&lt;&#x2F;kbd&gt; again for further undos&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;U&lt;&#x2F;kbd&gt; undo latest changes on last edited line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;r&lt;&#x2F;kbd&gt; redo a change undone by &lt;kbd&gt;u&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;U&lt;&#x2F;kbd&gt; redo changes undone by &lt;kbd&gt;U&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;usr_32.txt.html#32.3&quot;&gt;:h 32.3&lt;&#x2F;a&gt; for details on &lt;kbd&gt;g-&lt;&#x2F;kbd&gt; and &lt;kbd&gt;g+&lt;&#x2F;kbd&gt; commands that you can use to undo branches.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;ScTAZ0f6e-Q&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 11: longest line length</title>
		<published>2022-06-08T00:00:00+00:00</published>
		<updated>2022-06-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-11/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-11/</id>
		<content type="html">&lt;p&gt;You can use &lt;code&gt;wc -L&lt;&#x2F;code&gt; to report the length of the longest line in the input (excluding the newline character of a line).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# last line not ending with newline won&amp;#39;t be a problem
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\nbanana&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat greeting.txt
&lt;&#x2F;span&gt;&lt;span&gt;hi there
&lt;&#x2F;span&gt;&lt;span&gt;have a nice day
&lt;&#x2F;span&gt;&lt;span&gt;$ wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;greeting.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;15
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If multiple files are passed, the last line summary will show the maximum length among the given inputs.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt; greeting.txt sample.txt para.txt
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt; greeting.txt
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt; sample.txt
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt; para.txt
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt; total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;-L&lt;&#x2F;code&gt; won&#x27;t count non-printable characters and tabs are converted to equivalent spaces. You can use &lt;code&gt;awk&lt;&#x2F;code&gt; if these are not acceptable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# tab characters can occupy up to 8 columns
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\t&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\t)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\t)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print length()}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# non-printable characters aren&amp;#39;t counted
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\34)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\34)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print length()}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the &lt;code&gt;awk&lt;&#x2F;code&gt; command in the above illustration is similar to &lt;code&gt;wc -L&lt;&#x2F;code&gt; only for single line inputs. For multiple lines, you can use the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{len = length(); if(len &amp;gt; max) max = len} END{print max}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Multibyte characters and &lt;a href=&quot;https:&#x2F;&#x2F;unicode.org&#x2F;reports&#x2F;tr29&#x2F;#Grapheme_Cluster_Boundaries&quot;&gt;grapheme clusters&lt;&#x2F;a&gt; will each be counted as &lt;code&gt;1&lt;&#x2F;code&gt;, assuming the current locale is set appropriately:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# multibyte characters are counted as 1 each in supported locales
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;αλεπού&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# grapheme cluster example
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cag̈e&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# non-supported locales can cause them to be treated as non-printable
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;αλεπού&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;LC_ALL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt; wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;a6Mk0d0bqWU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bash compound commands and redirection</title>
		<published>2022-06-04T00:00:00+00:00</published>
		<updated>2022-06-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/bash-compound-commands-redirection/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/bash-compound-commands-redirection/</id>
		<content type="html">&lt;p&gt;I&#x27;ve been using Linux for about 15 years. There are a lot of features I don&#x27;t know and some that I&#x27;ve used but not often enough or to the full extent of possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;Recently, I had written a &lt;code&gt;bash&lt;&#x2F;code&gt; function, which required saving the output of a &lt;code&gt;for&lt;&#x2F;code&gt; loop to a file. I knew that &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;bash&#x2F;manual&#x2F;bash.html#Compound-Commands&quot;&gt;compound commands&lt;&#x2F;a&gt; support &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;bash&#x2F;manual&#x2F;bash.html#Redirections&quot;&gt;redirection&lt;&#x2F;a&gt;, but it didn&#x27;t strike me at that time as I haven&#x27;t had to use them often.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a simplified version of the function I wrote first:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;pf&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; input.txt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;; do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;.bkp&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; input.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;; done
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt; input.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; output.txt
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Having to empty the file using &lt;code&gt;&amp;gt; input.txt&lt;&#x2F;code&gt; got me thinking that perhaps I was missing some obvious solution. Few days later, I realized that instead of using &lt;code&gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt; during every iteration of the loop, I should have just applied &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; to the loop itself.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;pf&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;; do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;.bkp&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;; done &amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; input.txt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt; input.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; output.txt
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;code&gt;echo&lt;&#x2F;code&gt; and &lt;code&gt;cmd&lt;&#x2F;code&gt; in the above examples are just placeholders for illustration purposes. I needed both &lt;code&gt;input.txt&lt;&#x2F;code&gt; and &lt;code&gt;output.txt&lt;&#x2F;code&gt; after calling the function, which is why I didn&#x27;t use &lt;code&gt;|&lt;&#x2F;code&gt; or process substitution.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 11: capture external command output</title>
		<published>2022-06-01T00:00:00+00:00</published>
		<updated>2022-06-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-11/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-11/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;subprocess&lt;&#x2F;code&gt; module provides plethora of features to execute external commands, capturing output being one of them. There are two ways to do so:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;passing &lt;code&gt;capture_output=True&lt;&#x2F;code&gt; to &lt;code&gt;subprocess.run()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;subprocess.check_output()&lt;&#x2F;code&gt; if you only want &lt;code&gt;stdout&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By default, results are provided as &lt;code&gt;bytes&lt;&#x2F;code&gt; data type. You can change that by passing &lt;code&gt;text=True&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;subprocess
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;date&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;-u&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(cmd, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;capture_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;p
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;CompletedProcess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;date&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;-u&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;returncode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Wednesday&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;stderr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;p.stdout
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Wednesday&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;check_output&lt;&#x2F;span&gt;&lt;span&gt;(cmd, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Wednesday&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With &lt;code&gt;check_output()&lt;&#x2F;code&gt;, you&#x27;ll get an exception if something goes wrong with the command being executed. With &lt;code&gt;run()&lt;&#x2F;code&gt;, you&#x27;ll get that information from &lt;code&gt;stderr&lt;&#x2F;code&gt; and &lt;code&gt;returncode&lt;&#x2F;code&gt; as part of the &lt;code&gt;CompletedProcess&lt;&#x2F;code&gt; object.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ls&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xyz.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(cmd, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;capture_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;CompletedProcess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ls&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xyz.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;returncode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;stderr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;ls: cannot access &amp;#39;xyz.txt&amp;#39;: No such file or directory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;check_output&lt;&#x2F;span&gt;&lt;span&gt;(cmd, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;ls: cannot access &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xyz.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: No such file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Traceback &lt;&#x2F;span&gt;&lt;span&gt;(most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;subprocess.py&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;415&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;check_output
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;popenargs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;PIPE&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;timeout, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;subprocess.py&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;516&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;run
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;raise&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;CalledProcessError&lt;&#x2F;span&gt;&lt;span&gt;(retcode, process.args,
&lt;&#x2F;span&gt;&lt;span&gt;subprocess.CalledProcessError: Command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;xyz.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;)&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;returned
&lt;&#x2F;span&gt;&lt;span&gt;                               non&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;zero exit status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can also use legacy methods &lt;code&gt;subprocess.getstatusoutput()&lt;&#x2F;code&gt; and &lt;code&gt;subprocess.getoutput()&lt;&#x2F;code&gt; but they lack in features and do not provide secure options. See &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;subprocess.html#legacy-shell-invocation-functions&quot;&gt;docs.python: subprocess Legacy Shell Invocation Functions&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;uffQilOq9PA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 9: named registers</title>
		<published>2022-05-24T00:00:00+00:00</published>
		<updated>2022-05-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-9/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-9/</id>
		<content type="html">&lt;p&gt;In Normal mode, you can use lowercase alphabets &lt;code&gt;a-z&lt;&#x2F;code&gt; to save some content for future use. You can also append some more content to those registers by using the corresponding uppercase alphabets &lt;code&gt;A-Z&lt;&#x2F;code&gt; at a later stage.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;&amp;quot;ayy&lt;&#x2F;kbd&gt; copy the current line to the &lt;code&gt;&amp;quot;a&lt;&#x2F;code&gt; register&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;quot;bdip&lt;&#x2F;kbd&gt; delete the current paragraph, contents will also be saved to the &lt;code&gt;&amp;quot;b&lt;&#x2F;code&gt; register&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;quot;Ayj&lt;&#x2F;kbd&gt; append the current line and the line below to the &lt;code&gt;&amp;quot;a&lt;&#x2F;code&gt; register
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;&amp;quot;ayy&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;&amp;quot;Ayj&lt;&#x2F;kbd&gt; will result in total three lines in the &lt;code&gt;&amp;quot;a&lt;&#x2F;code&gt; register&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;quot;ap&lt;&#x2F;kbd&gt; paste content from the &lt;code&gt;&amp;quot;a&lt;&#x2F;code&gt; register&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;quot;eyiw&lt;&#x2F;kbd&gt; copy word under the cursor to the &lt;code&gt;&amp;quot;e&lt;&#x2F;code&gt; register&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can use &lt;kbd&gt;:reg&lt;&#x2F;kbd&gt; (short for &lt;code&gt;:registers&lt;&#x2F;code&gt;) to view the contents of the registers. Specifying one or more characters (next to each other as a single string) will display contents only for those registers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; The named registers are also used for saving macros. You can record an empty macro to clear the contents, for example &lt;kbd&gt;qbq&lt;&#x2F;kbd&gt; clears the &lt;code&gt;&amp;quot;b&lt;&#x2F;code&gt; register.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;GBOtpKFcZSA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Debug woes 3: matching uppercase letters</title>
		<published>2022-05-13T00:00:00+00:00</published>
		<updated>2022-05-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/debug-woes-3/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/debug-woes-3/</id>
		<content type="html">&lt;p&gt;So, I was going through &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;bash&#x2F;manual&#x2F;bash.html#Shell-Parameter-Expansion&quot;&gt;GNU bash manual: Shell Parameter Expansion&lt;&#x2F;a&gt; and trying out examples to check if I was understanding the features well.&lt;&#x2F;p&gt;
&lt;p&gt;When it came to case conversion, it was a bit confusing to know that you can only use a single character length glob. Here are the examples for lowercase to uppercase conversion that I used:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ fruit=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# all characters to uppercase
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;${fruit^^}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;APPLE
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# convert any character that matches [g-z] to uppercase
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;${fruit^^[g-z]}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;aPPLe
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this won&amp;#39;t work since &amp;#39;sky-&amp;#39; is not a single character
&lt;&#x2F;span&gt;&lt;span&gt;$ c=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sky-rose&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;${c^^*-}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;sky&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;rose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To convert uppercase to lowercase, you just need to use &lt;code&gt;,&lt;&#x2F;code&gt; instead of &lt;code&gt;^&lt;&#x2F;code&gt;. Sounds simple right? It really is. But, I got stuck while trying to modify the above examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ fruit=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;APPLE&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# worked as expected
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;${fruit,,}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# expected &amp;#39;ApplE&amp;#39; but got &amp;#39;APPLE&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# can you spot the mistake?
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;${fruit,,[g-z]}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;APPLE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I usually go through documentation and stackexchange sites when I&#x27;m stuck. After going through some threads, I came across &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;q&#x2F;500274&#x2F;109046&quot;&gt;this unix.stackexchange&lt;&#x2F;a&gt; example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ str=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;HELLO&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;\n&amp;#39; &amp;quot;${str,,[HEO]}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;heLLo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Okay, I thought, this seems similar to what I wanted. Need to check out if this works on my machine. Before I even finished typing the example, my brain&#x27;s light bulb turned on. I should have used &lt;code&gt;G-Z&lt;&#x2F;code&gt; instead of lowercase range.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;${fruit,,[G-Z]}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ApplE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 10: version sort</title>
		<published>2022-05-13T00:00:00+00:00</published>
		<updated>2022-05-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-10/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-10/</id>
		<content type="html">&lt;p&gt;You can use &lt;code&gt;sort -V&lt;&#x2F;code&gt; for sorting numerical input that is mixed with other characters. It also helps when you want to treat digits after a decimal point as whole numbers, for example if &lt;code&gt;1.10&lt;&#x2F;code&gt; should be greater than &lt;code&gt;1.2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1.5\n1.10\n1.2&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sort &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;n
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.5
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1.5\n1.10\n1.2&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sort &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;V
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat versions.txt
&lt;&#x2F;span&gt;&lt;span&gt;file2
&lt;&#x2F;span&gt;&lt;span&gt;cmd5.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;file10
&lt;&#x2F;span&gt;&lt;span&gt;cmd1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span&gt;file5
&lt;&#x2F;span&gt;&lt;span&gt;cmd5.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;$ sort &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; versions.txt
&lt;&#x2F;span&gt;&lt;span&gt;cmd1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span&gt;cmd5.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;cmd5.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;file2
&lt;&#x2F;span&gt;&lt;span&gt;file5
&lt;&#x2F;span&gt;&lt;span&gt;file10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an example of dealing with numbers reported by the &lt;code&gt;time&lt;&#x2F;code&gt; command (assuming all the entries have the same format).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat timings.txt
&lt;&#x2F;span&gt;&lt;span&gt;5m35.363s
&lt;&#x2F;span&gt;&lt;span&gt;3m20.058s
&lt;&#x2F;span&gt;&lt;span&gt;4m11.130s
&lt;&#x2F;span&gt;&lt;span&gt;3m42.833s
&lt;&#x2F;span&gt;&lt;span&gt;4m3.083s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ sort &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; timings.txt
&lt;&#x2F;span&gt;&lt;span&gt;3m20.058s
&lt;&#x2F;span&gt;&lt;span&gt;3m42.833s
&lt;&#x2F;span&gt;&lt;span&gt;4m3.083s
&lt;&#x2F;span&gt;&lt;span&gt;4m11.130s
&lt;&#x2F;span&gt;&lt;span&gt;5m35.363s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;coreutils&#x2F;manual&#x2F;html_node&#x2F;Version-sort-overview.html&quot;&gt;GNU coreutils manual: Version sort ordering&lt;&#x2F;a&gt; for more details. Also, note that the &lt;code&gt;ls&lt;&#x2F;code&gt; command uses lowercase &lt;code&gt;-v&lt;&#x2F;code&gt; for this task.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;QKZbdZ-XmCQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;sort.html&quot;&gt;sort command&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; ebook for more details.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 10: removeprefix and removesuffix string methods</title>
		<published>2022-05-11T00:00:00+00:00</published>
		<updated>2022-05-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-10/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-10/</id>
		<content type="html">&lt;p&gt;Python supports a lot of string methods that reduces the need for regular expressions. The &lt;code&gt;removeprefix()&lt;&#x2F;code&gt; and &lt;code&gt;removesuffix()&lt;&#x2F;code&gt; string methods were added in Python 3.9 version. See &lt;a href=&quot;https:&#x2F;&#x2F;peps.python.org&#x2F;pep-0616&#x2F;&quot;&gt;PEP 616&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;These methods will help you delete an exact substring from the start and end of the input string respectively. Here are some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove &amp;#39;sp&amp;#39; if it matches at the start of the input string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;removeprefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sp&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;are&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;par&amp;#39; is present in the input, but not at the start
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;removeprefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove &amp;#39;me&amp;#39; if it matches at the end of the input string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# only one occurrence of the match will be removed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;this meme&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;removesuffix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;me&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;this me&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# unlike strip methods, substring has to match exactly in the same order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;this meme&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;removesuffix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;em&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;this meme&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These remove methods will delete the given substring only once from the start or end of the string. On the other hand, the strip methods treat the argument as a set of characters to be matched any number of times in any order until a non-matching character is found. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;these memes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;removesuffix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;esm&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;these memes&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;these memes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rstrip&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;esm&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;these &amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;b--A6OM3PyI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python 3.11: possessive quantifiers and atomic grouping added to re module</title>
		<published>2022-05-07T00:00:00+00:00</published>
		<updated>2023-04-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/python-regex-possessive-quantifier/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-regex-possessive-quantifier/</id>
		<content type="html">&lt;p&gt;Quoting from &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3.11&#x2F;whatsnew&#x2F;3.11.html&quot;&gt;What&#x27;s New In Python 3.11&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Atomic grouping (&lt;code&gt;(?&amp;gt;...)&lt;&#x2F;code&gt;) and possessive quantifiers (&lt;code&gt;*+&lt;&#x2F;code&gt;, &lt;code&gt;++&lt;&#x2F;code&gt;, &lt;code&gt;?+&lt;&#x2F;code&gt;, &lt;code&gt;{m,n}+&lt;&#x2F;code&gt;) are now supported in regular expressions. (Contributed by Jeffrey C. Jacobs and Serhiy Storchaka in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;python&#x2F;cpython&#x2F;issues&#x2F;34627&quot;&gt;bpo-433030&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_possessive_quantifiers.png&quot; alt=&quot;Python possessive quantifiers and atomic grouping&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Poster created using &lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;&quot;&gt;Canva&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If you are not familiar with regular expressions, see my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebook to get started.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;backtracking&quot;&gt;Backtracking&lt;a class=&quot;zola-anchor&quot; href=&quot;#backtracking&quot; aria-label=&quot;Anchor link for: backtracking&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Greedy quantifiers match as much as possible, provided the overall regex is satisfied. For example, &lt;code&gt;:.*&lt;&#x2F;code&gt; will match &lt;code&gt;:&lt;&#x2F;code&gt; followed by rest of the input line. However, if you change the pattern to &lt;code&gt;:.*apple&lt;&#x2F;code&gt;, the &lt;code&gt;.*&lt;&#x2F;code&gt; portion cannot simply consume the rest of the input line. The regex engine will have to find the largest portion such that &lt;code&gt;apple&lt;&#x2F;code&gt; is also part of the match (provided the input has such a string, of course).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig:mango:pineapple:guava:apples:orange&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:mango:pineapple:guava:apples:orange&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:mango:pineapple:guava:apple&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For the &lt;code&gt;:.*apple&lt;&#x2F;code&gt; case, the Python regular expression engine actually does consume all the characters on seeing &lt;code&gt;.*&lt;&#x2F;code&gt;. Then realizing that the overall match failed, it gives back one character from the end of line and checks again. This process is repeated until a match is found or failure is confirmed. In regular expression parlance, this is called &lt;strong&gt;backtracking&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This type of exploring matches to satisfy overall regex also applies to non-greedy quantifiers. &lt;code&gt;.*?&lt;&#x2F;code&gt; will start with zero characters followed by one, two, three and so on until a match is found.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig:mango:pineapple:guava:apples:orange&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:mango:pineapple&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Note that some regex engines like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;re2&quot;&gt;re2&lt;&#x2F;a&gt; do not use backtracking.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;possessive-quantifiers&quot;&gt;Possessive quantifiers&lt;a class=&quot;zola-anchor&quot; href=&quot;#possessive-quantifiers&quot; aria-label=&quot;Anchor link for: possessive-quantifiers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Until Python 3.10, you had to use alternatives like the third-party &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;regex module&lt;&#x2F;a&gt; for possessive quantifiers. The &lt;code&gt;re&lt;&#x2F;code&gt; module supports possessive quantifiers from Python 3.11 version.&lt;&#x2F;p&gt;
&lt;p&gt;The difference between greedy and possessive quantifiers is that possessive will not backtrack to find a match. In other words, possessive quantifiers will always consume every character that matches the pattern on which it is applied. Syntax wise, you need to append &lt;code&gt;+&lt;&#x2F;code&gt; to greedy quantifiers to make it possessive, similar to adding &lt;code&gt;?&lt;&#x2F;code&gt; for non-greedy case.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike greedy or non-greedy quantifiers, &lt;code&gt;:.*+apple&lt;&#x2F;code&gt; will never match, because &lt;code&gt;.*+&lt;&#x2F;code&gt; will consume rest of the line, leaving no way to match &lt;code&gt;apple&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;$ python3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;.11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;q
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig:mango:pineapple:guava:apples:orange&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:mango:pineapple:guava:apples:orange&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s a more practical example. Suppose you want to match integer numbers greater than or equal to &lt;code&gt;100&lt;&#x2F;code&gt; where these numbers can optionally have leading zeros.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 314 001 12 00984&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this solution fails because 0* and \d{3,} can both match leading zeros
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# and greedy quantifiers will give up characters to help overall regex succeed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;001&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# here 0*+ will not give back leading zeros after they are consumed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# workaround if possessive quantifiers are not supported
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1-9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s another example. The goal is to match lines whose first non-whitespace character is not a &lt;code&gt;#&lt;&#x2F;code&gt; character. A matching line should have at least one non-&lt;code&gt;#&lt;&#x2F;code&gt; character, so empty lines and those with only whitespace characters should not match.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;#comment&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c = &amp;quot;#&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt; #comment&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this solution fails because \s* can backtrack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# and [^#] can match a whitespace character as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;#]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, e)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c = &amp;quot;#&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt; #comment&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this works because \s*+ will not give back any whitespace characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;#]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, e)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c = &amp;quot;#&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# workaround if possessive quantifiers are not supported
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, e)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c = &amp;quot;#&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Y7XuZOLdG0o&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;atomic-grouping&quot;&gt;Atomic grouping&lt;a class=&quot;zola-anchor&quot; href=&quot;#atomic-grouping&quot; aria-label=&quot;Anchor link for: atomic-grouping&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;(?&amp;gt;pat)&lt;&#x2F;code&gt; is an atomic group, where &lt;code&gt;pat&lt;&#x2F;code&gt; is the pattern you want to safeguard from further backtracking by isolating it from other parts of the regex.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example with greedy quantifier:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 314 001 12 00984&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# 0* is greedy and the (?&amp;gt;) grouping prevents backtracking
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: re.findall(r&amp;#39;0*+\d{3,}&amp;#39;, numbers)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, numbers)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;314&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;00984&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an example with non-greedy quantifier:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig::mango::pineapple::guava::apples::orange&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this matches from the first &amp;#39;::&amp;#39; to the first occurrence of &amp;#39;::apple&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;::apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;::mango::pineapple::guava::apple&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;(?&amp;gt;::.*?::)&amp;#39; will match only from &amp;#39;::&amp;#39; to the very next &amp;#39;::&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;::mango::&amp;#39; fails because &amp;#39;apple&amp;#39; isn&amp;#39;t found afterwards
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# similarly &amp;#39;::pineapple::&amp;#39; fails
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;::guava::&amp;#39; succeeds because it is followed by &amp;#39;apple&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;::)apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;::guava::apple&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;DQfcST_XN_E&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; The &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;regex module&lt;&#x2F;a&gt; has a &lt;code&gt;regex.REVERSE&lt;&#x2F;code&gt; flag to match from right-to-left making it better suited than atomic grouping for certain cases.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;regex
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fig::mango::pineapple::guava::apples::orange&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;regex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;r)::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;::apple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;::guava::apple&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this won&amp;#39;t be possible with just atomic grouping
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;and this book is good and those are okay and that movie is bad&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;regex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;r)th&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;is bad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;that movie is bad&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;catastrophic-backtracking&quot;&gt;Catastrophic Backtracking&lt;a class=&quot;zola-anchor&quot; href=&quot;#catastrophic-backtracking&quot; aria-label=&quot;Anchor link for: catastrophic-backtracking&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Backtracking can become significantly time consuming for certain corner cases. Which is why some regex engines do not use them, at the cost of not supporting some features like lookarounds. If your application accepts user defined regex, you might need to protect against such catastrophic patterns. From &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Redos&quot;&gt;wikipedia: ReDoS&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A regular expression denial of service (ReDoS) is an algorithmic complexity attack that produces a denial-of-service by providing a regular expression and&#x2F;or an input that takes a long time to evaluate. The attack exploits the fact that many regular expression implementations have super-linear worst-case complexity; on certain regex-input pairs, the time taken can grow polynomially or exponentially in relation to the input size. An attacker can thus cause a program to spend substantial time by providing a specially crafted regular expression and&#x2F;or input. The program will then slow down or becoming unresponsive.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from &lt;&#x2F;span&gt;&lt;span&gt;timeit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;timeit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;greedy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;possessive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# string that&amp;#39;ll match the above patterns
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aaaaaaaaaaaaaaaa:123&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# string that does NOT match the above patterns
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;s2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aaaaaaaaaaaaaaaa-123&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# no issues when input string has a match
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;greedy.search(s1)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.016464739997900324
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;possessive.search(s1)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.016358205997676123
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# if input doesn&amp;#39;t match, greedy version suffers from catastrophic backtracking
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that &amp;#39;number&amp;#39; parameter is reduced to 10 since it takes a long time
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;greedy.search(s2)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;53.71723825200024
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;possessive.search(s2)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.00019008600065717474
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;(a+|\w+)*:&lt;&#x2F;code&gt; is a silly regex pattern, since it can be rewritten as &lt;code&gt;\w*:&lt;&#x2F;code&gt; which will not suffer from catastrophic backtracking. But this example shows how quantifiers applied to a group with multiple alternatives using quantifiers can lead to explosive results. More such patterns and mitigation strategies can be found in the following links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rexegg.com&#x2F;regex-explosive-quantifiers.html&quot;&gt;The Explosive Quantifier Trap&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.regular-expressions.info&#x2F;catastrophic.html&quot;&gt;Runaway Regular Expressions: Catastrophic Backtracking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;details-of-the-cloudflare-outage-on-july-2-2019&#x2F;&quot;&gt;Details of the Cloudflare outage on July 2, 2019&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 8: join lines</title>
		<published>2022-05-04T00:00:00+00:00</published>
		<updated>2022-05-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-8/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-8/</id>
		<content type="html">&lt;p&gt;In Normal mode, you can join lines using &lt;code&gt;J&lt;&#x2F;code&gt; and &lt;code&gt;gJ&lt;&#x2F;code&gt; commands. These differ in how the end-of-line character and indentation at the start of lines being joined are handled.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;J&lt;&#x2F;kbd&gt; joins the current line and the next line
&lt;ul&gt;
&lt;li&gt;the deleted &lt;code&gt;&amp;lt;EOL&amp;gt;&lt;&#x2F;code&gt; character is replaced with a space (unless there are trailing spaces or the next line starts with a &lt;code&gt;)&lt;&#x2F;code&gt; character)&lt;&#x2F;li&gt;
&lt;li&gt;indentation from the lines being joined are removed, &lt;em&gt;except the current line&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3J&lt;&#x2F;kbd&gt; joins the current line and next two lines with one space in between the lines&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gJ&lt;&#x2F;kbd&gt; joins the current line and the next line
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;EOL&amp;gt;&lt;&#x2F;code&gt; character is deleted (space character won&#x27;t be added)&lt;&#x2F;li&gt;
&lt;li&gt;indentation won&#x27;t be removed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;code&gt;joinspaces&lt;&#x2F;code&gt;, &lt;code&gt;cpoptions&lt;&#x2F;code&gt; and &lt;code&gt;formatoptions&lt;&#x2F;code&gt; settings will affect the behavior of these commands. See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#J&quot;&gt;:h J&lt;&#x2F;a&gt; and scroll down for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;rubhH6v4lN0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 9: awk paragraph mode</title>
		<published>2022-04-27T00:00:00+00:00</published>
		<updated>2022-04-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-9/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-9/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;awk&lt;&#x2F;code&gt; provides a handy shortcut to process input content paragraph wise. When &lt;code&gt;RS&lt;&#x2F;code&gt; is set to empty string, one or more consecutive empty lines is used as the input record separator. Consider the below sample file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat para.txt
&lt;&#x2F;span&gt;&lt;span&gt;hi there
&lt;&#x2F;span&gt;&lt;span&gt;how are you
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; apples
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; bananas
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;blue sky
&lt;&#x2F;span&gt;&lt;span&gt;yellow sun
&lt;&#x2F;span&gt;&lt;span&gt;brown earth
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some simple examples to filter paragraphs based on some criteria:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# paragraphs containing &amp;#39;sun&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;sun&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; para.txt
&lt;&#x2F;span&gt;&lt;span&gt;blue sky
&lt;&#x2F;span&gt;&lt;span&gt;yellow sun
&lt;&#x2F;span&gt;&lt;span&gt;brown earth
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# paragraphs containing any digit character
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;[0-9]&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; para.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; apples
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; bananas
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# print the first paragraph
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR==1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; para.txt
&lt;&#x2F;span&gt;&lt;span&gt;hi there
&lt;&#x2F;span&gt;&lt;span&gt;how are you
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnuawk&#x2F;record-separators.html#paragraph-mode&quot;&gt;Paragraph mode section from my GNU awk ebook&lt;&#x2F;a&gt; for more examples and corner cases.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;OmljHVH-SCw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; ebook if you are interested in learning about the &lt;code&gt;GNU awk&lt;&#x2F;code&gt; command in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 9: applying set-like operations for dictionaries</title>
		<published>2022-04-16T00:00:00+00:00</published>
		<updated>2022-04-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-9/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-9/</id>
		<content type="html">&lt;p&gt;You can merge two dictionaries using the &lt;code&gt;|&lt;&#x2F;code&gt; operator (similar to union of sets). If a key is found in both the dictionaries, the insertion order of the first dictionary will be maintained, but the value of the second dictionary will be used. In other words, keys are updated to the new value during the merge.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rahul&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;86&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;89&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use unpacking, i.e. {**d1, **d2} for Python 3.8 and below versions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;marks_2
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rahul&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;86&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;89&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use &lt;code&gt;update()&lt;&#x2F;code&gt; method if you want to modify instead of getting a new dictionary.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(marks_2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_1
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rahul&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;86&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;89&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;keys()&lt;&#x2F;code&gt; and &lt;code&gt;values()&lt;&#x2F;code&gt; dictionary methods return set-like objects, but with insertion order maintained. You get a set object as output when you apply set operators on these objects.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rahul&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;86&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;92&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;89&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# union of keys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;marks_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rahul&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# common keys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;marks_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Ravi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rohit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# difference: keys not present in the other dict
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;marks_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rahul&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;marks_1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# symmetric difference: union of above two differences
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;marks_1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span&gt;marks_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Jo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Joe&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Rahul&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;ILI7RQnKaZE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 7: changing case in Normal mode</title>
		<published>2022-04-12T00:00:00+00:00</published>
		<updated>2022-04-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-7/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-7/</id>
		<content type="html">&lt;p&gt;You can use the following commands to change the case of characters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;~&lt;&#x2F;kbd&gt; invert the case of the character under the cursor (i.e. lowercase becomes UPPERCASE and vice versa)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;g~&lt;&#x2F;kbd&gt; followed by motion inverts the case of those characters
&lt;ul&gt;
&lt;li&gt;for example: &lt;kbd&gt;g~e&lt;&#x2F;kbd&gt;, &lt;kbd&gt;g~$&lt;&#x2F;kbd&gt;, &lt;kbd&gt;g~iw&lt;&#x2F;kbd&gt;, etc &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gu&lt;&#x2F;kbd&gt; followed by motion changes those characters to lowercase
&lt;ul&gt;
&lt;li&gt;for example: &lt;kbd&gt;gue&lt;&#x2F;kbd&gt;, &lt;kbd&gt;gu$&lt;&#x2F;kbd&gt;, &lt;kbd&gt;guiw&lt;&#x2F;kbd&gt;, etc &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gU&lt;&#x2F;kbd&gt; followed by motion changes those characters to UPPERCASE
&lt;ul&gt;
&lt;li&gt;for example: &lt;kbd&gt;gUe&lt;&#x2F;kbd&gt;, &lt;kbd&gt;gU$&lt;&#x2F;kbd&gt;, &lt;kbd&gt;gUiw&lt;&#x2F;kbd&gt;, etc &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can also provide a count prefix to these commands. For example, &lt;kbd&gt;3~&lt;&#x2F;kbd&gt; will invert the case of the current character and two characters to the right.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;TLhEznBrEG8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 8: extract from start of file until matching line</title>
		<published>2022-04-06T00:00:00+00:00</published>
		<updated>2022-04-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-8/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-8/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;GNU sed&lt;&#x2F;code&gt; command has a couple of handy commands to extract text from the start of input until a matching line is found. The &lt;code&gt;q&lt;&#x2F;code&gt; and &lt;code&gt;Q&lt;&#x2F;code&gt; commands are similar, except how they process the matching line.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;q&lt;&#x2F;code&gt; command will exit &lt;code&gt;sed&lt;&#x2F;code&gt; immediately, after printing the current pattern space if applicable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# quit after a line containing &amp;#39;st&amp;#39; is found
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\nsea\neast\ndust&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;st&#x2F;q&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;sea
&lt;&#x2F;span&gt;&lt;span&gt;east
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Q&lt;&#x2F;code&gt; command is similar to &lt;code&gt;q&lt;&#x2F;code&gt; but won&#x27;t print the matching line.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# matching line won&amp;#39;t be printed in this case
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\nsea\neast\ndust&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;st&#x2F;Q&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;apple
&lt;&#x2F;span&gt;&lt;span&gt;sea
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;tac+sed+tac&lt;&#x2F;code&gt; will help you get lines starting from the last occurrence of the search string till the end of the input.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\nsea\neast\ndust\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; tac &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;ea&#x2F;q&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; tac
&lt;&#x2F;span&gt;&lt;span&gt;east
&lt;&#x2F;span&gt;&lt;span&gt;dust
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; Be careful if you want to use &lt;code&gt;q&lt;&#x2F;code&gt; or &lt;code&gt;Q&lt;&#x2F;code&gt; commands with multiple files, as &lt;code&gt;sed&lt;&#x2F;code&gt; will stop even if there are other files left to be processed. You can use &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;selective-editing.html#address-range&quot;&gt;mixed address ranges&lt;&#x2F;a&gt; as a workaround. See also &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;q&#x2F;309514&#x2F;109046&quot;&gt;unix.stackexchange: applying q to multiple files&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;OA6Onqw2bfA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;CLI text processing with GNU sed&lt;&#x2F;a&gt; ebook if you are interested in learning about the &lt;code&gt;GNU sed&lt;&#x2F;code&gt; command in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim Reference Guide: two week sales report</title>
		<published>2022-03-31T00:00:00+00:00</published>
		<updated>2022-03-31T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/vim-reference-guide-sales/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/vim-reference-guide-sales/</id>
		<content type="html">&lt;p&gt;I&#x27;ve previously written about events and strategies that led to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;wild-ride-2021&#x2F;#book-sales&quot;&gt;increased ebook sales during the last quarter of 2021&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Very pleased to inform that I continue to see more than expected sales. I had released my 12th ebook &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; on March 15th. Here&#x27;s how the sales looked on Gumroad during the first two weeks:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;vim-release-gumroad-sales.png&quot; alt=&quot;Two week Gumroad sales chart&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I used to offer my ebooks for free on release. For the past couple of releases, I have also added heavily discounted ebook bundles which seems to be the major factor in increased paid sales I&#x27;m seeing. Luck certainly plays a role too, reaching front page of Hacker News and top of subreddits cannot be always counted upon. Here are some of the ways I promoted my latest ebook:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;p&#x2F;announcing-vim-reference-guide-free-discount-offers-and-more&quot;&gt;Announcement post on Gumroad&lt;&#x2F;a&gt; and sending an email to existing readers&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30684232&quot;&gt;Show HN post on Hacker News&lt;&#x2F;a&gt;, got lucky to be placed in top 10&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1503752985708736512&quot;&gt;Pinned tweet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Posting on &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;commandline&#x2F;comments&#x2F;tjzxn9&#x2F;i_wrote_a_vim_reference_guide&#x2F;&quot;&gt;&#x2F;r&#x2F;commandline&#x2F;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;linux&#x2F;comments&#x2F;toll6i&#x2F;i_wrote_a_vim_reference_guide&#x2F;&quot;&gt;&#x2F;r&#x2F;linux&#x2F;&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;You might wonder why not &#x2F;r&#x2F;vim? Somebody else posted before I could, and unfortunately it got downvoted. I&#x27;ll probably make my own post after I release the next version&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;SyQe6zzOGZ0&quot;&gt;Promo video on youtube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Mentioned in two of my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; newsletter issues&lt;&#x2F;li&gt;
&lt;li&gt;And of course, I wrote a release post &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim-reference-guide-announcement&#x2F;&quot;&gt;on this blog&lt;&#x2F;a&gt; and also mentioned it on my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&quot;&gt;GitHub Readme&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Apart from Gumroad, 500+ readers downloaded the guide from &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;vim_reference_guide&quot;&gt;Leanpub&lt;&#x2F;a&gt; and I got a few paid sales as well. I wrote about &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;my-book-writing-experience&#x2F;#leanpub-vs-gumroad&quot;&gt;pros and cons of Gumroad&#x2F;Leanpub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; PS: Make sure to read the rules and be a regular user before self-promoting your content on the social media platforms mentioned above.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 8: dict.fromkeys() method</title>
		<published>2022-03-30T00:00:00+00:00</published>
		<updated>2022-03-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-8/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-8/</id>
		<content type="html">&lt;p&gt;A lesser known way to create a dictionary is to use the &lt;code&gt;fromkeys()&lt;&#x2F;code&gt; method that accepts an iterable and an optional value (default is &lt;code&gt;None&lt;&#x2F;code&gt;). The same value will be assigned to all the keys, so be careful if you want to use a mutable object.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;green&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fromkeys&lt;&#x2F;span&gt;&lt;span&gt;(colors)
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;green&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fromkeys&lt;&#x2F;span&gt;&lt;span&gt;(colors, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;green&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you iterate over a dictionary object, you&#x27;ll get only the keys. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;fruits &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;banana&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;papaya&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mango&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span&gt;fruit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;fruits:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(fruit)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span&gt;banana
&lt;&#x2F;span&gt;&lt;span&gt;papaya
&lt;&#x2F;span&gt;&lt;span&gt;mango
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Recent Python versions ensure that the insertion order is maintained for a dictionary. So, you can remove duplicate items from a list while maintaining the order by building a dictionary using the &lt;code&gt;fromkeys()&lt;&#x2F;code&gt; method and converting it back to a list.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove duplicates, if you don&amp;#39;t care about the element order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(nums))
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove duplicates, if you want to maintain the element order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fromkeys&lt;&#x2F;span&gt;&lt;span&gt;(nums))
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;ChL65D87uJg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 6: search word nearest to the cursor</title>
		<published>2022-03-24T00:00:00+00:00</published>
		<updated>2022-03-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-6/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-6/</id>
		<content type="html">&lt;p&gt;Vim provides handy commands to match words under (or near to) the cursor. You can choose to match whole or part of a longer word. If a match is found, the cursor will move to the next match in the chosen direction.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;*&lt;&#x2F;kbd&gt; searches the word nearest to the cursor in the forward direction (matches only the whole word)
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; followed by &lt;strong&gt;left mouse click&lt;&#x2F;strong&gt; can also be used if mouse is enabled&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;g*&lt;&#x2F;kbd&gt; searches the word nearest to the cursor in the forward direction (matches as part of another word as well)
&lt;ul&gt;
&lt;li&gt;for example, if you apply this command on the word &lt;code&gt;the&lt;&#x2F;code&gt;, you&#x27;ll also get matches for &lt;code&gt;them&lt;&#x2F;code&gt;, &lt;code&gt;lather&lt;&#x2F;code&gt;, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;#&lt;&#x2F;kbd&gt; searches the word nearest to the cursor in the backward direction (matches only the whole word)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;g#&lt;&#x2F;kbd&gt; searches the word nearest to the cursor in the backward direction (matches as part of another word as well)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;motion.txt.html#word&quot;&gt;:h word&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A word consists of a sequence of letters, digits and underscores, or a sequence of other non-blank characters, separated with white space (spaces, tabs, &lt;code&gt;&amp;lt;EOL&amp;gt;&lt;&#x2F;code&gt;). This can be changed with the &lt;code&gt;iskeyword&lt;&#x2F;code&gt; option.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Sequence of non-blank characters will be used only at the end of the line. Otherwise, the above commands will use the next word found on that line which is made up of letters, digits and underscores.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can also provide a count prefix to these commands. For example, &lt;kbd&gt;2*&lt;&#x2F;kbd&gt; will take you to the second match in the forward direction.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;abDN559M5yQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 7: limiting number of filtered lines</title>
		<published>2022-03-16T00:00:00+00:00</published>
		<updated>2022-06-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-7/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-7/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;grep&lt;&#x2F;code&gt; supports &lt;code&gt;-m&lt;&#x2F;code&gt; option to specify the maximum number of matching lines in the output.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# all input lines containing &amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;goal
&lt;&#x2F;span&gt;&lt;span&gt;rate
&lt;&#x2F;span&gt;&lt;span&gt;eat
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# maximum of 2 matching lines
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;goal
&lt;&#x2F;span&gt;&lt;span&gt;rate
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;pi&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;pit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# example with -v option
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;goal
&lt;&#x2F;span&gt;&lt;span&gt;pit
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;goal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With multiple file input, the restriction is applied for each file &lt;em&gt;separately&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat table.txt 
&lt;&#x2F;span&gt;&lt;span&gt;brown bread mat cake &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;blue cake mug shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;yellow banana window shoes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;i&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; table.txt ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;table.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;blue cake mug shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;ip.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;pit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use &amp;#39;cat&amp;#39; if you want to operate on combined input
&lt;&#x2F;span&gt;&lt;span&gt;$ cat table.txt ip.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;i&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;blue cake mug shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;$ cat table.txt ip.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;go&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;goal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;9W5jNjmE_04&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;a&gt; ebook if you are interested in learning about &lt;code&gt;GNU grep&lt;&#x2F;code&gt; and &lt;code&gt;ripgrep&lt;&#x2F;code&gt; commands in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 7: creating a deepcopy of collections</title>
		<published>2022-03-09T00:00:00+00:00</published>
		<updated>2022-06-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-7/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-7/</id>
		<content type="html">&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;copy.html#module-copy&quot;&gt;copy&lt;&#x2F;a&gt; built-in module:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The shared binding is helpful for cases like in-place modification of lists within a user defined function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(ip):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span&gt;ip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, ip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;321&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5.3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(nums)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;321&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5.3&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use the &lt;code&gt;copy.deepcopy()&lt;&#x2F;code&gt; method if you wish to recursively create new copies of all the elements of a mutable object:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;copy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums_2d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;], [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;], [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums_2d_deepcopy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;copy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;deepcopy&lt;&#x2F;span&gt;&lt;span&gt;(nums_2d)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums_2d_deepcopy[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;yay&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums_2d_deepcopy
&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;yay&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;], [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;], [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums_2d
&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;], [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;], [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;nbBYeNPQ-no&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;mutability.html&quot;&gt;Mutability&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for more details on this topic.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 5: jumping back and forth in Normal mode</title>
		<published>2022-03-02T00:00:00+00:00</published>
		<updated>2022-03-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-5/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-5/</id>
		<content type="html">&lt;p&gt;Find yourself working on a large file? Or perhaps handling multiple buffers? Vim makes it easy to navigate previous locations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;o&lt;&#x2F;kbd&gt; navigate to the previous location in the jump list (think &lt;code&gt;o&lt;&#x2F;code&gt; as old)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;i&lt;&#x2F;kbd&gt; navigate to the next location in the jump list (&lt;code&gt;i&lt;&#x2F;code&gt; and &lt;code&gt;o&lt;&#x2F;code&gt; are usually next to each other)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;g;&lt;&#x2F;kbd&gt; go to the previous change location&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;g,&lt;&#x2F;kbd&gt; go to the newer change location&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;gi&lt;&#x2F;kbd&gt; place the cursor at the same position where it was left last time in the Insert mode&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Use &lt;kbd&gt;:jumps&lt;&#x2F;kbd&gt; to view the jump list. See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;motion.txt.html#jump-motions&quot;&gt;:h jump-motions&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;eId_8aCcmQE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 6: filtering lines based on multiple conditions</title>
		<published>2022-02-23T00:00:00+00:00</published>
		<updated>2022-06-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-6/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-6/</id>
		<content type="html">&lt;p&gt;Usually, &lt;code&gt;grep&lt;&#x2F;code&gt; is used for filtering lines based on a regexp pattern. Matching multiple patterns as a conditional OR is easy to apply using alternation. For example, &lt;code&gt;grep -E &#x27;bread|banana&#x27;&lt;&#x2F;code&gt; matches lines containing either &lt;code&gt;bread&lt;&#x2F;code&gt; or &lt;code&gt;banana&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, conditional AND requires multiple &lt;code&gt;grep&lt;&#x2F;code&gt; commands or the use of lookarounds if PCRE feature is available. A simpler alternative is to use &lt;code&gt;awk&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat table.txt
&lt;&#x2F;span&gt;&lt;span&gt;brown bread mat cake &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;blue cake mug shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;yellow banana window shoes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# line containing &amp;#39;cake&amp;#39; but not &amp;#39;at&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: grep &amp;#39;cake&amp;#39; table.txt | grep -v &amp;#39;at&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# with PCRE: grep -P &amp;#39;^(?!.*at).*cake&amp;#39; table.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;cake&#x2F; &amp;amp;&amp;amp; !&#x2F;at&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; table.txt
&lt;&#x2F;span&gt;&lt;span&gt;blue cake mug shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# first field containing &amp;#39;low&amp;#39; or the last field is less than 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# not easy to construct a grep solution here due to field&#x2F;numeric comparison
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1 ~ &#x2F;low&#x2F; || $NF&amp;lt;0&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; table.txt
&lt;&#x2F;span&gt;&lt;span&gt;blue cake mug shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;yellow banana window shoes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Gasxb9wiEKk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; ebook if you are interested in learning about the &lt;code&gt;awk&lt;&#x2F;code&gt; command in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 6: inplace file editing</title>
		<published>2022-02-15T00:00:00+00:00</published>
		<updated>2022-06-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-6/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-6/</id>
		<content type="html">&lt;p&gt;The built-in &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;fileinput.html&quot;&gt;fileinput module&lt;&#x2F;a&gt; has nice features for file processing, especially handy for multiple files and inplace editing. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# inplace.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fileinput
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;fileinput.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;inplace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# do some processing
&lt;&#x2F;span&gt;&lt;span&gt;        op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;search&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;replace&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# print() the text you want to write back to the input files
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(op, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By default, files passed as CLI arguments will be processed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python3 inplace.py &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If you already know which inputs have to be processed, use the &lt;code&gt;files&lt;&#x2F;code&gt; argument. Use the &lt;code&gt;backup&lt;&#x2F;code&gt; argument if you want to make copies of original files in case something goes wrong. See my blog post &lt;a href=&quot;https:&#x2F;&#x2F;www.python-engineer.com&#x2F;posts&#x2F;inplace-file-editing&#x2F;&quot;&gt;In-place file editing with fileinput module&lt;&#x2F;a&gt; for more details and examples.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;CGw_yf5XD6E&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for a short, introductory guide for the Python programming language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 4: reposition current line in Normal mode</title>
		<published>2022-02-09T00:00:00+00:00</published>
		<updated>2022-02-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-4/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-4/</id>
		<content type="html">&lt;p&gt;You&#x27;re likely to be familiar with commands to scroll through the contents like &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;d&lt;&#x2F;kbd&gt; or &lt;kbd&gt;f&lt;&#x2F;kbd&gt; or &lt;kbd&gt;u&lt;&#x2F;kbd&gt; or &lt;kbd&gt;b&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Did you know that Vim also has handy options to keep the cursor on the current line while moving the contents around?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;zz&lt;&#x2F;kbd&gt; reposition the current line to the middle of the visible window
&lt;ul&gt;
&lt;li&gt;useful to see context around lines that are nearer to the top&#x2F;bottom of the visible window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;zt&lt;&#x2F;kbd&gt; reposition the current line to the top of the visible window&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;zb&lt;&#x2F;kbd&gt; reposition the current line to the bottom of the visible window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html#%27scrolloff%27&quot;&gt;:h &#x27;scrolloff&#x27;&lt;&#x2F;a&gt; option if you want to always show context around the current line.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;XRXO4Ns8rPE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>PyDev of the Week</title>
		<published>2022-02-02T00:00:00+00:00</published>
		<updated>2022-02-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/pydev-interview/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/pydev-interview/</id>
		<content type="html">&lt;p&gt;Last month I had the wonderful opportunity to be part of &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;category&#x2F;pydevoftheweek&#x2F;&quot;&gt;PyDev of the Week&lt;&#x2F;a&gt; series organized by &lt;strong&gt;Michael Driscoll&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It was a pleasure to walk down the memory lane for this interview: &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;2022&#x2F;01&#x2F;31&#x2F;pydev-of-the-week-sundeep-agarwal&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;2022&#x2F;01&#x2F;31&#x2F;pydev-of-the-week-sundeep-agarwal&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I got to discuss about my education, career, writing ebooks and more. Hope you enjoy the interview!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 5: aligning columns</title>
		<published>2022-02-02T00:00:00+00:00</published>
		<updated>2022-06-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-5/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-5/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;column&lt;&#x2F;code&gt; command is a nifty tool to align input data column wise. By default, whitespace is used as the input delimiter. Space character is used to align the output columns, so whitespace characters like tab will get converted to spaces.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;one two three\nfour five six\n&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;one two three
&lt;&#x2F;span&gt;&lt;span&gt;four five six
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;one two three\nfour five six\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;t
&lt;&#x2F;span&gt;&lt;span&gt;one   two   three
&lt;&#x2F;span&gt;&lt;span&gt;four  five  six
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use the &lt;code&gt;-s&lt;&#x2F;code&gt; option to customize the input delimiter. Note that the output delimiter will still be made up of spaces only.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat scores.csv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Maths&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Physics&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Chemistry
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ith&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Cy&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;98&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;95
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Lin&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;t scores.csv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Name  Maths  Physics  Chemistry
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Ith   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100    100      100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Cy    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;97     98       95
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Lin   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;78     83       80
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1:-:2:-:3\napple:-:banana:-:cherry\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;s:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-: -&lt;&#x2F;span&gt;&lt;span&gt;t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1      2       3
&lt;&#x2F;span&gt;&lt;span&gt;apple  banana  cherry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; Input should have a newline at the end, otherwise you&#x27;ll get an error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1 2 3\na   b   c&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;column:&lt;&#x2F;span&gt;&lt;span&gt; line too long
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1  2  3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;0IrFBSjFgPQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli-computing&quot;&gt;Linux Command Line Computing&lt;&#x2F;a&gt; ebook and &lt;code&gt;man column&lt;&#x2F;code&gt; for more details.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 5: random choice and sample</title>
		<published>2022-01-25T00:00:00+00:00</published>
		<updated>2022-06-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-5/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-5/</id>
		<content type="html">&lt;p&gt;Here are a couple of commonly used methods for the built-in &lt;code&gt;random&lt;&#x2F;code&gt; module:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choice()&lt;&#x2F;code&gt; method helps you get a random element&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sample()&lt;&#x2F;code&gt; method helps you get a &lt;code&gt;list&lt;&#x2F;code&gt; of a specific count of random elements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;random
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;choice&lt;&#x2F;span&gt;&lt;span&gt;(nums)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;(nums, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;490&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;745&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;919&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Both these methods will work on any sequence object. The &lt;code&gt;sample()&lt;&#x2F;code&gt; method also accepts a &lt;code&gt;set&lt;&#x2F;code&gt; object, but that will be deprecated.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;KMEQ0zto3l4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for a short, introductory guide for the Python programming language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Brag post: Hacker News Front Page entries</title>
		<published>2022-01-21T00:00:00+00:00</published>
		<updated>2023-09-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/hacker-news-front-page-brag/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/hacker-news-front-page-brag/</id>
		<content type="html">&lt;p&gt;In case you haven&#x27;t yet read this nice post &lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;brag-documents&#x2F;&quot;&gt;&amp;quot;Get your work recognized: write a brag document&amp;quot;&lt;&#x2F;a&gt; by Julia Evans, please do that first.&lt;&#x2F;p&gt;
&lt;p&gt;I definitely found it nice to collect which of my content have reached Hacker News front page over the past 4 years. As I wrote in &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;my-book-writing-experience&#x2F;&quot;&gt;my book writing experience post&lt;&#x2F;a&gt;, the responses I got for my GNU awk one-liners collection was one of the stepping stones towards my career as a technical author.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the list so far, ordered by oldest first:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=15549318&quot;&gt;Learn to use Awk with hundreds of examples&lt;&#x2F;a&gt; — &lt;em&gt;478 points, Oct 2017, 116 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20212622&quot;&gt;Show HN: I wrote a book on GNU grep and ripgrep&lt;&#x2F;a&gt; — &lt;em&gt;182 points, June 2019, 53 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20645319&quot;&gt;Show HN: I wrote a book on Python regular expressions&lt;&#x2F;a&gt; — &lt;em&gt;193 points, Aug 2019, 50 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=22758217&quot;&gt;Show HN: An eBook with hundreds of GNU Awk one-liners&lt;&#x2F;a&gt; — &lt;em&gt;539 points, April 2020, 48 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24637797&quot;&gt;Show HN: Ruby One-Liners Cookbook&lt;&#x2F;a&gt; — &lt;em&gt;191 points, Sept 2020, 36 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25006829&quot;&gt;Perl One-Liners Cookbook&lt;&#x2F;a&gt; — &lt;em&gt;126 points, Nov 2020, 47 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=26076721&quot;&gt;Show HN: &amp;quot;100 Page Python Intro&amp;quot; eBook&lt;&#x2F;a&gt; — &lt;em&gt;107 points, Feb 2021, 26 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=26356095&quot;&gt;Paying my bills with &#x27;free&#x27; ebooks&lt;&#x2F;a&gt; — &lt;em&gt;85 points, Mar 2021, 22 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=28798095&quot;&gt;Show HN: &amp;quot;Command line text processing with GNU Coreutils&amp;quot; eBook&lt;&#x2F;a&gt; — &lt;em&gt;117 points, Oct 2021, 20 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29391107&quot;&gt;Show HN: Improve your Python regex skills with 75 interactive exercises&lt;&#x2F;a&gt; — &lt;em&gt;175 points, Nov 2021, 12 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29837543&quot;&gt;Vim prank: alias vim=&#x27;vim -y&#x27;&lt;&#x2F;a&gt; — &lt;em&gt;341 points, Jan 2022, 259 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30684232&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; — &lt;em&gt;244 points, Mar 2022, 110 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=33931677&quot;&gt;Show HN: Interactive exercises for Linux CLI text processing commands&lt;&#x2F;a&gt; — &lt;em&gt;69 points, Dec 2022, 7 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=37290356&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; — &lt;em&gt;419 points, Aug 2023, 129 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;As is the case with other social media platforms, being an active participant on Hacker News definitely helps. Apart from commenting on other topics, I also post links to projects and resources that I felt were useful. The number of such links reaching front page outnumbers my own content links.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Removing duplicates irrespective of field order</title>
		<published>2022-01-19T00:00:00+00:00</published>
		<updated>2023-01-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/duplicates-irrespective-field-order/" type="text/html"/>
		<id>https://learnbyexample.github.io/duplicates-irrespective-field-order/</id>
		<content type="html">&lt;p&gt;I posted a coding challenge in the tenth issue of &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt;. I discuss the problem and various solutions in this blog post.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;problem-statement&quot;&gt;Problem statement&lt;a class=&quot;zola-anchor&quot; href=&quot;#problem-statement&quot; aria-label=&quot;Anchor link for: problem-statement&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Retain only the first copy of duplicate lines irrespective of the order of the fields. Input order should be maintained. Assume space as the field separator with exactly two fields on each line. For example, &lt;code&gt;hehe haha&lt;&#x2F;code&gt; and &lt;code&gt;haha hehe&lt;&#x2F;code&gt; will be considered as duplicates.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat twos.txt
&lt;&#x2F;span&gt;&lt;span&gt;hehe haha
&lt;&#x2F;span&gt;&lt;span&gt;door floor
&lt;&#x2F;span&gt;&lt;span&gt;haha hehe
&lt;&#x2F;span&gt;&lt;span&gt;6;8 3-4
&lt;&#x2F;span&gt;&lt;span&gt;true blue
&lt;&#x2F;span&gt;&lt;span&gt;hehe bebe
&lt;&#x2F;span&gt;&lt;span&gt;floor door
&lt;&#x2F;span&gt;&lt;span&gt;3-4 6;8
&lt;&#x2F;span&gt;&lt;span&gt;tru eblue
&lt;&#x2F;span&gt;&lt;span&gt;haha hehe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Expected output for the above sample:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;hehe haha
&lt;&#x2F;span&gt;&lt;span&gt;door floor
&lt;&#x2F;span&gt;&lt;span&gt;6;8 3-4
&lt;&#x2F;span&gt;&lt;span&gt;true blue
&lt;&#x2F;span&gt;&lt;span&gt;hehe bebe
&lt;&#x2F;span&gt;&lt;span&gt;tru eblue
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;python-solution&quot;&gt;Python solution&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-solution&quot; aria-label=&quot;Anchor link for: python-solution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s one possible solution for this problem:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;twos.txt&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;keys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(filename) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;        fields &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        key1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]} {fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        key2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]} {fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span&gt;(key1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;keys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;key2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;keys):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(line, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            keys.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(key1)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main trick in the above solution is to check the input field order as well as the reversed order against elements in a set. A subtle point to note is that the &lt;code&gt;split()&lt;&#x2F;code&gt; string method also removes whitespaces from the start and end of the input line. If you had to use another field delimiter (for example, comma) you&#x27;ll have to remove the line ending before splitting the input.&lt;&#x2F;p&gt;
&lt;p&gt;And here&#x27;s a generic solution for any number of fields, which also makes the solution look simpler:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;twos.txt&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;keys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(filename) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;        fields &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        sorted_key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(fields))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;sorted_key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span&gt;keys:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(line, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            keys.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(sorted_key)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In case you are wondering why space is used to join the field contents, it is necessary to avoid false matches. &lt;code&gt;tru eblue&lt;&#x2F;code&gt; shouldn&#x27;t be considered as a duplicate of &lt;code&gt;true blue&lt;&#x2F;code&gt; or &lt;code&gt;blue true&lt;&#x2F;code&gt;. Space is a safe character to use since it is the field separator.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook if you already know programming basics but new to Python.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;gnu-awk-one-liner&quot;&gt;GNU awk one-liner&lt;a class=&quot;zola-anchor&quot; href=&quot;#gnu-awk-one-liner&quot; aria-label=&quot;Anchor link for: gnu-awk-one-liner&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a solution for CLI enthusiasts:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;!(($1,$2) in seen || ($2,$1) in seen); {seen[$1,$2]}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;twos.txt
&lt;&#x2F;span&gt;&lt;span&gt;hehe haha
&lt;&#x2F;span&gt;&lt;span&gt;door floor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;true blue
&lt;&#x2F;span&gt;&lt;span&gt;hehe bebe
&lt;&#x2F;span&gt;&lt;span&gt;tru eblue
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above solution is similar to the first Python solution with a notable difference. The fields are joined using &lt;code&gt;\034&lt;&#x2F;code&gt; (a non-printing character), which is usually not present in text files.&lt;&#x2F;p&gt;
&lt;p&gt;A solution using the field separator instead of &lt;code&gt;\034&lt;&#x2F;code&gt; would look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;!(($1 FS $2) in seen || ($2 FS $1) in seen); {seen[$1 FS $2]}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; ebook if you are interested in such one-liners.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 3: autocomplete words and lines in Insert mode</title>
		<published>2022-01-18T00:00:00+00:00</published>
		<updated>2022-01-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-3/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-3/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Autocomplete word&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;p&lt;&#x2F;kbd&gt; autocomplete word based on matching words in the backward direction&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;n&lt;&#x2F;kbd&gt; autocomplete word based on matching words in the forward direction&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If more than one word matches, they are displayed using a popup menu. You can use &lt;kbd&gt;↑&lt;&#x2F;kbd&gt;&#x2F;&lt;kbd&gt;↓&lt;&#x2F;kbd&gt; arrow keys or &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;p&lt;&#x2F;kbd&gt;&#x2F;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;n&lt;&#x2F;kbd&gt; to move through this list.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; With multiple matches, you&#x27;ll notice that the first match is automatically inserted and moving through the list doesn&#x27;t change the text that was inserted. You&#x27;ll have to press &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;y&lt;&#x2F;kbd&gt; or &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt; key to choose a different completion text. If you were satisfied with the first match, typing any character will make the popup menu disappear and insert whatever character you had typed. Or press &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt; to select the first match and go to Normal mode.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Autocomplete line&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;x&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;l&lt;&#x2F;kbd&gt; autocomplete line based on matching lines in the backward direction&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If more than one line matches, they are displayed using a popup menu. You can use &lt;kbd&gt;↑&lt;&#x2F;kbd&gt;&#x2F;&lt;kbd&gt;↓&lt;&#x2F;kbd&gt; arrow keys or &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;p&lt;&#x2F;kbd&gt;&#x2F;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;n&lt;&#x2F;kbd&gt; to move through this list. You can also use &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;l&lt;&#x2F;kbd&gt; to move up the list.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Autocomplete assist&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;e&lt;&#x2F;kbd&gt; cancels autocomplete
&lt;ul&gt;
&lt;li&gt;you&#x27;ll retain the text you had typed before invoking autocomplete&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;y&lt;&#x2F;kbd&gt; or &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt; change the autocompletion text to the currently selected item from the popup menu&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;insert.txt.html#ins-completion&quot;&gt;:h ins-completion&lt;&#x2F;a&gt; for more details and other autocomplete features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;GJrsWOtcmqM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Regexp gotcha 1: grouping common portions</title>
		<published>2022-01-14T00:00:00+00:00</published>
		<updated>2022-05-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/regexp-gotcha-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/regexp-gotcha-1/</id>
		<content type="html">&lt;p&gt;Similar to &lt;code&gt;a(b+c)d = abd+acd&lt;&#x2F;code&gt; in maths, you get &lt;code&gt;a(b|c)d = abd|acd&lt;&#x2F;code&gt; in regular expressions. However, you&#x27;ll have to be careful if quantifiers are involved.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code&gt;(a*|b*)&lt;&#x2F;code&gt; isn&#x27;t the same as &lt;code&gt;(a|b)*&lt;&#x2F;code&gt;. Can you reason out why? Here&#x27;s a railroad diagram to help you out:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;mini&#x2F;regexp_gotcha_1.png&quot; alt=&quot;Regexp grouping with quantifiers gotcha&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Credit: &lt;a href=&quot;https:&#x2F;&#x2F;www.debuggex.com&#x2F;&quot;&gt;debuggex.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The difference is that &lt;code&gt;(a*|b*)&lt;&#x2F;code&gt; only matches same letter sequences like &lt;code&gt;a&lt;&#x2F;code&gt;, &lt;code&gt;bb&lt;&#x2F;code&gt;, &lt;code&gt;aaaaaa&lt;&#x2F;code&gt;, etc. But &lt;code&gt;(a|b)*&lt;&#x2F;code&gt; can match mixed sequences like &lt;code&gt;ababbba&lt;&#x2F;code&gt; too. You can also simplify &lt;code&gt;(a|b)*&lt;&#x2F;code&gt; to &lt;code&gt;[ab]*&lt;&#x2F;code&gt; since it is just single character alternation in this particular example.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an illustration using Python:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abbaba&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aaabbb&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bbbbb&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fullmatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, s)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bbbbb&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fullmatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;b)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, s)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abbaba&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aaabbb&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bbbbb&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Want to learn regular expressions from the basics with plenty of examples and exercises? I&#x27;ve written &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&quot;&gt;regexp ebooks for Python, JavaScript, Ruby and CLI tools&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 4: serialize file contents to a single line</title>
		<published>2022-01-12T00:00:00+00:00</published>
		<updated>2022-06-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-4/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-4/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;-s&lt;&#x2F;code&gt; option is one of the useful, but lesser known feature of the &lt;code&gt;paste&lt;&#x2F;code&gt; command. It helps you to serialize input file contents to a single output line.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;blue
&lt;&#x2F;span&gt;&lt;span&gt;white
&lt;&#x2F;span&gt;&lt;span&gt;orange
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;sd, colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;blue,white,orange
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If multiple files are passed, serialization of each file is displayed on separate output lines.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;sd: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5 9&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The advantage of using &lt;code&gt;paste&lt;&#x2F;code&gt; instead of other options like &lt;code&gt;tr&lt;&#x2F;code&gt;, &lt;code&gt;awk&lt;&#x2F;code&gt;, etc is that you do not have to worry about trailing delimiters, newlines, etc. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# issue 1: trailing comma
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# issue 2: no newline at the end
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;colors.txt tr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\n&amp;#39; &amp;#39;,&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;blue,white,orange,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# correcting the above two issues
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;colors.txt tr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\n&amp;#39; &amp;#39;,&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;,$&#x2F;\n&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;blue,white,orange
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an equivalent &lt;code&gt;awk&lt;&#x2F;code&gt; solution for single file input. While slower and complicated compared to the &lt;code&gt;paste&lt;&#x2F;code&gt; solution, you get more flexibility since &lt;code&gt;awk&lt;&#x2F;code&gt; is a programming language. For example, it is pretty easy to use multicharacter output delimiter.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR&amp;gt;1{print &amp;quot;,&amp;quot;} 1; END{print &amp;quot;\n&amp;quot;}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;blue,white,orange
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR&amp;gt;1{print &amp;quot; : &amp;quot;} 1; END{print &amp;quot;\n&amp;quot;}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; white &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; orange
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;NX91QlHWAio&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;paste.html&quot;&gt;paste command&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; ebook for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;CLI text processing with GNU awk&lt;&#x2F;a&gt; ebook if you are interested in learning about the &lt;code&gt;awk&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Automating Excel with Python - book review</title>
		<published>2022-01-11T00:00:00+00:00</published>
		<updated>2022-12-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/automating-excel-with-python-review/" type="text/html"/>
		<id>https://learnbyexample.github.io/automating-excel-with-python-review/</id>
		<content type="html">&lt;p&gt;In this post, I review &lt;strong&gt;Automating Excel with Python&lt;&#x2F;strong&gt; by &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;&quot;&gt;Michael Driscoll&lt;&#x2F;a&gt;. From the introduction chapter of this book:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The purpose of this book is to help you learn how to use Python to work with Excel. You will be using a package called OpenPyXL to create, read, and edit Excel documents with Python. While the focus of this book will be on OpenPyXL, you will also learn about other Python packages that you can use to interact with Excel using the Python programming language.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;book-details&quot;&gt;Book details&lt;a class=&quot;zola-anchor&quot; href=&quot;#book-details&quot; aria-label=&quot;Anchor link for: book-details&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;automating_excel&#x2F;automating_excel_with_python.jpg&quot; alt=&quot;Automating Excel with Python book cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Book cover&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;dp&#x2F;B09M5551W2&quot;&gt;Amazon&lt;&#x2F;a&gt; — Paperback, Kindle&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;driscollis.gumroad.com&#x2F;l&#x2F;openpyxl&quot;&gt;Gumroad&lt;&#x2F;a&gt; — PDF, EPUB, Mobi&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;openpyxl&quot;&gt;Leanpub&lt;&#x2F;a&gt; — PDF, EPUB, Mobi&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;driscollis&#x2F;automating_excel_with_python&quot;&gt;GitHub&lt;&#x2F;a&gt; — code examples and sample spreadsheets used in the book&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;59974445-automating-excel-with-python&quot;&gt;Goodreads&lt;&#x2F;a&gt; — book reviews&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;review&quot;&gt;Review&lt;a class=&quot;zola-anchor&quot; href=&quot;#review&quot; aria-label=&quot;Anchor link for: review&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My very first job assignment (at a semiconductor company) required me to use spreadsheets for tabulating results of various experiments, adding charts, etc. I used to manually copy-paste the results generated from a Perl script. There were multiple sheets and my work was complicated enough to require multiple months of refinement, feature modifications, etc. Not sure if a library like OpenPyXL existed back then, but I think I should&#x27;ve at least asked&#x2F;searched ways to automate the spreadsheet process.&lt;&#x2F;p&gt;
&lt;p&gt;Going through this book felt like someone wrote a book just for that project, albeit 13 years late. Here&#x27;s a rough list of features that would&#x27;ve helped me:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Creating &lt;code&gt;xlsx&lt;&#x2F;code&gt; files with multiple sheets&lt;&#x2F;li&gt;
&lt;li&gt;Adding data&lt;&#x2F;li&gt;
&lt;li&gt;Formatting cells based on a known equation&lt;&#x2F;li&gt;
&lt;li&gt;Creating charts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Instructions and examples were clear and easy to follow. Snapshots were also shown for all the examples, so you can check if you&#x27;ve followed along as expected. While the book is best suited if you have MS Excel, most of the examples worked for me on LibreOffice Calc. Only the charts had major differences — some types weren&#x27;t supported and x&#x2F;y axis label&#x2F;data were problematic as shown below:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;automating_excel&#x2F;bar_chart_excel.png&quot; alt=&quot;Bar Chart in Excel&quot; width=&quot;600px&quot; height=&quot;400px&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Bar Chart in Excel (snapshot from the book)&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;automating_excel&#x2F;bar_chart_calc.png&quot; alt=&quot;Bar Chart in Calc&quot; width=&quot;600px&quot; height=&quot;400px&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Bar Chart in LibreOffice Calc (what I got on my machine)&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;Apart from the &lt;code&gt;openpyxl&lt;&#x2F;code&gt; module, the author also briefly covered how you can use &lt;code&gt;pandas&lt;&#x2F;code&gt;, &lt;code&gt;xlsxwriter&lt;&#x2F;code&gt; and &lt;code&gt;gspread&lt;&#x2F;code&gt; (for working with Google sheets). Some features were presented at the end as Appendix chapters.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 1 - Setting Up Your Machine&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 2 - Reading Spreadsheets with OpenPyXL&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 3 - Creating a Spreadsheet with OpenPyXL&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 4 - Styling Cells&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 5 - Conditional Formatting&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 6 - Creating Charts&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 7 - Chart Types&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 8 - Converting CSV to Excel&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 9 - Using Pandas with Excel&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 10 - Python and Google Sheets&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 11 - XlsxWriter&lt;&#x2F;li&gt;
&lt;li&gt;Appendix A - Cell Comments&lt;&#x2F;li&gt;
&lt;li&gt;Appendix B - Print Settings Basics&lt;&#x2F;li&gt;
&lt;li&gt;Appendix C - Formulas&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;feedback-and-reviews&quot;&gt;Feedback and Reviews&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-reviews&quot; aria-label=&quot;Anchor link for: feedback-and-reviews&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;All in all, I would highly recommend this book for those wanting to use Python for automating spreadsheets. I&#x27;d request you to post reviews after going through the book (they help us indie authors a lot). And please do contact the author to let him know your feedback or if you have any clarifications.&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim prank: alias vim=&#x27;vim -y&#x27;</title>
		<published>2022-01-07T00:00:00+00:00</published>
		<updated>2022-08-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/vim-prank/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/vim-prank/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;vim_prank.png&quot; alt=&quot;Vim Prank&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Poster created using &lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;&quot;&gt;Canva&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;&lt;br&gt;
&lt;p&gt;While going through &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;starting.txt.html#vim-arguments&quot;&gt;:h vim-arguments&lt;&#x2F;a&gt; for my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; ebook, I came across the &lt;code&gt;-y&lt;&#x2F;code&gt; option:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Easy mode. Implied for &lt;code&gt;evim&lt;&#x2F;code&gt; and &lt;code&gt;eview&lt;&#x2F;code&gt;. Starts with &lt;code&gt;&#x27;insertmode&#x27;&lt;&#x2F;code&gt; set and behaves like a click-and-type editor. This sources the script $VIMRUNTIME&#x2F;evim.vim. Mappings are set up to work like most click-and-type editors, see &lt;code&gt;evim-keys&lt;&#x2F;code&gt;. The GUI is started when available.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It was so weird to use. Copy and paste works with &lt;code&gt;Ctrl+c&lt;&#x2F;code&gt; and &lt;code&gt;Ctrl+v&lt;&#x2F;code&gt; respectively. Text can be selected with mouse and typing new text overwrites this selected portion. &lt;code&gt;Esc&lt;&#x2F;code&gt; key doesn&#x27;t work (gasp!), so I couldn&#x27;t quit until I used the window buttons. Later I tried and found that &lt;code&gt;Ctrl+o&lt;&#x2F;code&gt; works, which would then allow you to use &lt;code&gt;:q&lt;&#x2F;code&gt; as usual.&lt;&#x2F;p&gt;
&lt;p&gt;So, if you want to prank a Vim user:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;vim -y&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; I didn&#x27;t expect such a good response on &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;vim&#x2F;comments&#x2F;rxedpj&#x2F;vim_prank_alias_vimvim_y&#x2F;&quot;&gt;&#x2F;r&#x2F;vim&#x2F;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1478976141650059264&quot;&gt;twitter&lt;&#x2F;a&gt; for this &amp;quot;easy&amp;quot; feature. So, decided to write this mini blog post as well. Also, I got to know a few more ways to escape this madness from the &#x2F;r&#x2F;vim&#x2F; sub:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;One hint: If you want to go to Normal mode to be able to type a sequence of commands, use &lt;code&gt;CTRL-L&lt;&#x2F;code&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;starting.txt.html#evim-keys&quot;&gt;https:&#x2F;&#x2F;vimhelp.org&#x2F;starting.txt.html#evim-keys&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Use &lt;code&gt;&amp;lt;c-\&amp;gt;&amp;lt;c-n&amp;gt;&lt;&#x2F;code&gt; See &lt;code&gt;:h CTRL-\_CTRL-N&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, this post reached front page on &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29837543&quot;&gt;Hacker News&lt;&#x2F;a&gt;! Plenty of interesting comments and got to know about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tombh&#x2F;novim-mode&quot;&gt;novim-mode&lt;&#x2F;a&gt; plugin (which aims to make Vim behave more like a &#x27;normal&#x27; editor).&lt;&#x2F;p&gt;
&lt;p&gt;I also found &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;vim&#x2F;comments&#x2F;5102o5&#x2F;an_evil_trick_to_prank_vimsters&#x2F;&quot;&gt;an old discussion on &#x2F;r&#x2F;vim&#x2F;&lt;&#x2F;a&gt; discussing ways to trick a Vim user.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 4: comparison chaining</title>
		<published>2022-01-04T00:00:00+00:00</published>
		<updated>2022-06-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-4/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-4/</id>
		<content type="html">&lt;p&gt;You can chain comparison operators arbitrarily. Apart from terser code, this also has the advantage of having to evaluate the middle expression only once.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from &lt;&#x2F;span&gt;&lt;span&gt;math &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;factorial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# factorial function gets called twice for this example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# function needs to be called only once here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# another example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cater&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;kmthqcfKPGg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for a short, introductory guide for the Python programming language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2021 was a wild ride</title>
		<published>2021-12-30T00:00:00+00:00</published>
		<updated>2022-12-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/wild-ride-2021/" type="text/html"/>
		<id>https://learnbyexample.github.io/wild-ride-2021/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt;: Started and ended the year well, with a depressing period in the middle. Published three programming ebooks, several blog posts, started a newsletter, improved Twitter readership, read 80+ novels, and so on. Had a good year in terms of ebook sales 😇&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;books-published&quot;&gt;Books published&lt;a class=&quot;zola-anchor&quot; href=&quot;#books-published&quot; aria-label=&quot;Anchor link for: books-published&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; — short, introductory guide for the Python programming language. Started writing last year, published in February&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&quot;&gt;Practice Python Projects&lt;&#x2F;a&gt; — five beginner to intermediate level projects inspired by real world use cases. Started writing last year (before &amp;quot;100 Page Python Intro&amp;quot;!), published in July&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; — learn 20+ specialized text processing tools provided by the GNU coreutils package. Published in October&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also spent time updating all my existing books from February to May.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;2021_books.png&quot; alt=&quot;Programming books published in 2021&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;workshops&quot;&gt;Workshops&lt;a class=&quot;zola-anchor&quot; href=&quot;#workshops&quot; aria-label=&quot;Anchor link for: workshops&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First and only workshop I conducted since the start of pandemic in 2020. And this was possible only because it was online. The topic was Python scripting introduction for Biotech students. Publishing &amp;quot;100 Page Python Intro&amp;quot; was timely for this workshop.&lt;&#x2F;p&gt;
&lt;p&gt;This took up most of my time during March&#x2F;April along with updating existing books.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;blog-posts&quot;&gt;Blog posts&lt;a class=&quot;zola-anchor&quot; href=&quot;#blog-posts&quot; aria-label=&quot;Anchor link for: blog-posts&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been consistently writing books for the past three years, but I find it difficult to come up with ideas for my programming blog. This is partly due to not wanting to repeat content from my books. Here&#x27;s my favorite posts I wrote this year:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;my-book-writing-experience&#x2F;&quot;&gt;Paying my bills with &#x27;free&#x27; ebooks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;gnu-bre-ere-cheatsheet&#x2F;&quot;&gt;GNU BRE&#x2F;ERE cheatsheet and differences between grep, sed and awk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;escaping-madness-awk-literal-field-separator&#x2F;&quot;&gt;Escaping madness to get literal field separators in awk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;article&#x2F;perl-one-liners-part-1&#x2F;&quot;&gt;Perl &#x2F; Unix One-liner Cage Match, Part 1&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;article&#x2F;perl-one-liners-part-2&#x2F;&quot;&gt;Perl &#x2F; Unix One-liner Cage Match, Part 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I tried to be more consistent by posting short articles (see &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;mini&#x2F;&quot;&gt;mini posts list&lt;&#x2F;a&gt;), but lost interest. Starting a newsletter in November helped change my perspective about re-using content from my books. I&#x27;ve started posting tips and coding challenges that are short and easy to digest:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;Programming tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;numeric-palindrome&#x2F;&quot;&gt;Numeric Palindrome&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;counting-nested-braces&#x2F;&quot;&gt;Counting nested braces&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I was more consistent for my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;escapist-reviews&#x2F;&quot;&gt;Escapist Reviews&lt;&#x2F;a&gt; blog that I started late last year to review novels I read.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;book-sales&quot;&gt;Book sales&lt;a class=&quot;zola-anchor&quot; href=&quot;#book-sales&quot; aria-label=&quot;Anchor link for: book-sales&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Had better sales compared to last year, which I really wasn&#x27;t expecting. Especially when the average monthly sales was around $100 between May to September (my monthly expenses is around $150). This coincided with some health issues and the struggle to finish writing the &amp;quot;Practice Python Projects&amp;quot; book.&lt;&#x2F;p&gt;
&lt;p&gt;This led me to reading articles about better landing pages, building audience on social media, affiliates, etc. I still have a long way to go, but I feel these active efforts led to much improved sales in the last quarter of the year. I ended up deciding not to use affiliates though.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s my sales chart from Gumroad for this year (I had similar revenue from Leanpub):&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;gumroad_sales_2021.png&quot; alt=&quot;Gumroad sales in 2021&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There were plenty of reasons that led to the awesome last quarter sales. Here&#x27;s some significant events I remember:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Joined hands with fellow Python authors for &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;indie-python-extravaganza&#x2F;&quot;&gt;The Indie Python Extravaganza&lt;&#x2F;a&gt; bundle (given away freely for a month)
&lt;ul&gt;
&lt;li&gt;A Twitter discussion led to the giveaway idea, which resulted in creating this bundle&lt;&#x2F;li&gt;
&lt;li&gt;Combined marketing efforts by all four of us gave significant paid sales too&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Published &amp;quot;Command line text processing with GNU Coreutils&amp;quot;
&lt;ul&gt;
&lt;li&gt;In addition to my usual practice of making a new book free, this time I offered &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&quot;&gt;All books bundle&lt;&#x2F;a&gt; for $5 and a lot of users bought it&lt;&#x2F;li&gt;
&lt;li&gt;Announcing the book on Reddit and Hacker News was well received&lt;&#x2F;li&gt;
&lt;li&gt;I was beginning to improve my Twitter audience around that time, which helped a bit&lt;&#x2F;li&gt;
&lt;li&gt;Got featured in Leanpub&#x27;s monthly sales newsletter&lt;&#x2F;li&gt;
&lt;li&gt;Jesse Smith on &lt;a href=&quot;https:&#x2F;&#x2F;distrowatch.com&#x2F;weekly.php?issue=20211206#book&quot;&gt;distrowatch.com&lt;&#x2F;a&gt; wrote a lovely book review, which resulted in significant sales in December&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Getting featured on &lt;a href=&quot;https:&#x2F;&#x2F;rubyweekly.com&#x2F;issues&#x2F;574&quot;&gt;Ruby weekly&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;programming-deals&#x2F;&quot;&gt;Programming deals&lt;&#x2F;a&gt; for the last week of November
&lt;ul&gt;
&lt;li&gt;Helped a lot by commenting on Hacker News and getting featured in blog posts of fellow Python authors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;python-25-days-of-regex&#x2F;&quot;&gt;Interactive GUI app for Python regex&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;As part of 50 days of break from book writing, I worked on this Python app&lt;&#x2F;li&gt;
&lt;li&gt;Made it to the front page of Hacker News yet again&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;The Indie Python Extravaganza&amp;quot; bundle and some of my other books were featured in Leanpub&#x27;s Boxing day sales&lt;&#x2F;li&gt;
&lt;li&gt;And I believe creating &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&quot;&gt;GitHub Readme&lt;&#x2F;a&gt; helped as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The biggest takeaway for me was to actively look for opportunities (small or big) instead of just relying on &lt;em&gt;free&lt;&#x2F;em&gt; offering during book launch (which is about once in four months).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;During the 50 days break, the other significant project I started was &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; newsletter. This is still in early stages to point out any impact it will have on my book sales, but it certainly has been a pleasure so far to email an issue every Friday.&lt;&#x2F;p&gt;
&lt;p&gt;And as mentioned earlier, this led me to write programming blog posts consistently (tips and coding challenges).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;building-twitter-audience&quot;&gt;Building Twitter audience&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-twitter-audience&quot; aria-label=&quot;Anchor link for: building-twitter-audience&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I joined Twitter in 2015. My follower count was less than 400 in July. In December, I crossed 1100. This is far from being impressive (I know a few authors who added more than 15000 followers during that time period).&lt;&#x2F;p&gt;
&lt;p&gt;Being active on Twitter led me to awesome opportunities mentioned earlier in the Book sales section. The best tips I can give is to tweet consistently, interact with your readers and don&#x27;t be afraid to participate in conversations initiated by top users. Oh, and reading articles&#x2F;books about social media audience building would help too.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Follow me on Twitter&lt;&#x2F;a&gt; for interesting tech nuggets 😉&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;fictional-reading&quot;&gt;Fictional reading&lt;a class=&quot;zola-anchor&quot; href=&quot;#fictional-reading&quot; aria-label=&quot;Anchor link for: fictional-reading&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I enjoy reading fantasy and science-fiction novels. I read 80+ SFF books this year and recently wrote a post listing &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;escapist-reviews&#x2F;lists&#x2F;2021-favorite-sff-novels&#x2F;&quot;&gt;my top 10 favorites&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I also got a chance to beta read &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;57289544-the-siege-of-skyhold&quot;&gt;The Siege of Skyhold&lt;&#x2F;a&gt; and an ARC of &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;58656291-bastion&quot;&gt;Bastion&lt;&#x2F;a&gt;. I find these a good way to give back to the writing community, having myself received plenty of support from strangers.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;goals-for-2022&quot;&gt;Goals for 2022&lt;a class=&quot;zola-anchor&quot; href=&quot;#goals-for-2022&quot; aria-label=&quot;Anchor link for: goals-for-2022&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Foremost goal is to continue taking care of physical&#x2F;mental health. And I&#x27;d be more than happy if I manage yet another year with $250+ average monthly income.&lt;&#x2F;p&gt;
&lt;p&gt;Books:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;m currently working on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; ebook. Likely to publish in the first quarter&lt;&#x2F;li&gt;
&lt;li&gt;I started working on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_rust&#x2F;&quot;&gt;Command line text processing with Rust tools&lt;&#x2F;a&gt; ebook even before &amp;quot;Command line text processing with GNU Coreutils&amp;quot;, hope to publish in 2022&lt;&#x2F;li&gt;
&lt;li&gt;Have several more book topics in mind, but not sure if I&#x27;ll start working on any of them. And it is possible that I&#x27;ll come up with something else I fancy and work on it instead of already planned topics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Projects:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Interactive apps for exercises from other books, similar to the one I did for Python regex&lt;&#x2F;li&gt;
&lt;li&gt;Games for fun&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Miscellaneous:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Continue to build an audience via Twitter, Newsletter, etc&lt;&#x2F;li&gt;
&lt;li&gt;Contribute to other open source projects&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;Here&#x27;s wishing you a very happy, healthy and prosperous 2022 👍 😇&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 2: indent&#x2F;unindent lines</title>
		<published>2021-12-29T00:00:00+00:00</published>
		<updated>2021-12-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-2/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-2/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Normal mode&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;&amp;gt;&lt;&#x2F;kbd&gt; indent the current line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3&amp;gt;&amp;gt;&lt;&#x2F;kbd&gt; indent the current line and two lines below (same as &lt;kbd&gt;2&amp;gt;j&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;k&lt;&#x2F;kbd&gt; indent the current line and the line above (same as &lt;kbd&gt;1&amp;gt;k&lt;&#x2F;kbd&gt; or &lt;kbd&gt;&amp;gt;1k&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;lt;&amp;lt;&lt;&#x2F;kbd&gt; unindent the current line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;5&amp;lt;&amp;lt;&lt;&#x2F;kbd&gt; unindent the current line and four lines below (same as &lt;kbd&gt;4&amp;lt;j&lt;&#x2F;kbd&gt; or &lt;kbd&gt;&amp;lt;4j&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;2&amp;lt;k&lt;&#x2F;kbd&gt; unindent the current line and two lines above (same as &lt;kbd&gt;&amp;lt;2k&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;=&lt;&#x2F;kbd&gt; auto indent code, use motion commands to indicate the portion to be indented
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;=4j&lt;&#x2F;kbd&gt; auto indents the current line and four lines below&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;=ip&lt;&#x2F;kbd&gt; auto indents the current paragraph&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can use any motion command with &lt;kbd&gt;&amp;gt;&lt;&#x2F;kbd&gt; and &lt;kbd&gt;&amp;lt;&lt;&#x2F;kbd&gt;. For example, &lt;kbd&gt;&amp;gt;}&lt;&#x2F;kbd&gt; indents till the end of the paragraph.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Visual mode&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;&lt;&#x2F;kbd&gt; indent the visually selected lines once&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3&amp;gt;&lt;&#x2F;kbd&gt; indent the visually selected lines three times&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;lt;&lt;&#x2F;kbd&gt; unindent the visually selected lines once&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;=&lt;&#x2F;kbd&gt; auto indent code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Consider the following unindented code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;i; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;statements
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;statements
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the result after applying &lt;kbd&gt;vip=&lt;&#x2F;kbd&gt; (you can also use &lt;kbd&gt;=ip&lt;&#x2F;kbd&gt; if you prefer Normal mode).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;i; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        statements
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    statements
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Indentation depends on the &lt;code&gt;shiftwidth&lt;&#x2F;code&gt; setting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#shift-left-right&quot;&gt;:h shift-left-right&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#%3D&quot;&gt;:h =&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html#%27shiftwidth%27&quot;&gt;:h &#x27;shiftwidth&#x27;&lt;&#x2F;a&gt; for documentation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;HuySlxcoAIU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 3: place backups in another directory with GNU sed</title>
		<published>2021-12-21T00:00:00+00:00</published>
		<updated>2022-06-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-3/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-3/</id>
		<content type="html">&lt;p&gt;You can use &lt;code&gt;*&lt;&#x2F;code&gt; to place backups of original files in another directory when using the &lt;code&gt;-i&lt;&#x2F;code&gt; option with &lt;code&gt;GNU sed&lt;&#x2F;code&gt;. Consider these two sample input files in the current directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat f1.txt
&lt;&#x2F;span&gt;&lt;span&gt;good morning
&lt;&#x2F;span&gt;&lt;span&gt;that was good, just too good!
&lt;&#x2F;span&gt;&lt;span&gt;$ cat f2.txt 
&lt;&#x2F;span&gt;&lt;span&gt;goodie goodbye
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create a &lt;code&gt;backups&lt;&#x2F;code&gt; directory and use &lt;code&gt;*&lt;&#x2F;code&gt; under this directory as a placeholder for the filenames passed to the &lt;code&gt;sed&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ mkdir backups
&lt;&#x2F;span&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;backups&#x2F;*&amp;#39; &amp;#39;s&#x2F;good&#x2F;nice&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; f1.txt f2.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ ls backups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;f1.txt  f2.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# modified content
&lt;&#x2F;span&gt;&lt;span&gt;$ cat f1.txt
&lt;&#x2F;span&gt;&lt;span&gt;nice morning
&lt;&#x2F;span&gt;&lt;span&gt;that was nice, just too good!
&lt;&#x2F;span&gt;&lt;span&gt;$ cat f2.txt
&lt;&#x2F;span&gt;&lt;span&gt;niceie goodbye
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# backed-up original content
&lt;&#x2F;span&gt;&lt;span&gt;$ cat backups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;f1.txt 
&lt;&#x2F;span&gt;&lt;span&gt;good morning
&lt;&#x2F;span&gt;&lt;span&gt;that was good, just too good!
&lt;&#x2F;span&gt;&lt;span&gt;$ cat backups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;f2.txt
&lt;&#x2F;span&gt;&lt;span&gt;goodie goodbye
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since &lt;code&gt;*&lt;&#x2F;code&gt; expands to the name of the input files, you can also use this feature when you need to add a prefix for the backups.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bkp.*&amp;#39; &amp;#39;s&#x2F;green&#x2F;yellow&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; colors.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;colors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;bkp.colors.txt  colors.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; The &lt;code&gt;*&lt;&#x2F;code&gt; trick works with Perl as well, see &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_perl_oneliners&#x2F;in-place-file-editing.html&quot;&gt;In-place file editing&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;Perl One-Liners Guide&lt;&#x2F;a&gt; ebook for examples.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;ehxtbxR6qA0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;CLI text processing with GNU sed&lt;&#x2F;a&gt; ebook if you are interested in learning about the &lt;code&gt;GNU sed&lt;&#x2F;code&gt; command in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Counting nested braces</title>
		<published>2021-12-15T00:00:00+00:00</published>
		<updated>2023-01-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/counting-nested-braces/" type="text/html"/>
		<id>https://learnbyexample.github.io/counting-nested-braces/</id>
		<content type="html">&lt;p&gt;I posted a coding challenge in the fifth issue of &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt;. I discuss the problem and Python&#x2F;Perl solutions in this blog post.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;problem-statement&quot;&gt;Problem statement&lt;a class=&quot;zola-anchor&quot; href=&quot;#problem-statement&quot; aria-label=&quot;Anchor link for: problem-statement&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Write a function that returns the maximum nested depth of curly braces for a given string input. For example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x27;a*{b+c}&#x27;&lt;&#x2F;code&gt; should return &lt;code&gt;1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x27;{{a+2}*{{b+{c*d}}+e*d}}&#x27;&lt;&#x2F;code&gt; should return &lt;code&gt;4&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;unbalanced or wrongly ordered braces like &lt;code&gt;&#x27;{{a}*b&#x27;&lt;&#x2F;code&gt; and &lt;code&gt;&#x27;}a+b{&#x27;&lt;&#x2F;code&gt; should return &lt;code&gt;-1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;python-solution&quot;&gt;Python solution&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-solution&quot; aria-label=&quot;Anchor link for: python-solution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s one possible solution for this problem:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;max_nested_braces&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    max_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;expr:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;max_count:
&lt;&#x2F;span&gt;&lt;span&gt;                max_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;count
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;            count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;max_count
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; In case you have trouble understanding the above code, you can use &lt;a href=&quot;https:&#x2F;&#x2F;www.pythontutor.com&#x2F;visualize.html#mode=edit&quot;&gt;pythontutor&lt;&#x2F;a&gt; to visualize the code execution step-by-step.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here&#x27;s an alternate solution using regular expressions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;max_nested_braces&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        expr, no_of_subs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;subn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, expr)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;no_of_subs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[{}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, expr):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;count
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if you are a fan of assignment expressions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;max_nested_braces&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;subn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, expr)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;op[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;        expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;op[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[{}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, expr):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;count
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; I verified these solutions using &lt;code&gt;assert&lt;&#x2F;code&gt; statements. See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;testing.html&quot;&gt;Testing&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;working-with-matched-portions.html#resubn&quot;&gt;Working with matched portions&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebook for more details about the &lt;code&gt;re.subn()&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;perl-one-liner&quot;&gt;Perl one-liner&lt;a class=&quot;zola-anchor&quot; href=&quot;#perl-one-liner&quot; aria-label=&quot;Anchor link for: perl-one-liner&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a solution for CLI enthusiasts:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat ip.txt 
&lt;&#x2F;span&gt;&lt;span&gt;{a+2}*{b+c}
&lt;&#x2F;span&gt;&lt;span&gt;{{a+2}*{{b+{c*d}}+e*d}}
&lt;&#x2F;span&gt;&lt;span&gt;a*b{
&lt;&#x2F;span&gt;&lt;span&gt;{{a+2}*{{b}+{c*d}}+e*d}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ perl -lne &amp;#39;$c=0; $c++ while(s&#x2F;\{[^{}]*\}&#x2F;&#x2F;g);
&lt;&#x2F;span&gt;&lt;span&gt;             print &#x2F;[{}]&#x2F; ? -1 : $c&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;-1
&lt;&#x2F;span&gt;&lt;span&gt;-1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;Perl One-Liners Guide&lt;&#x2F;a&gt; ebook if you are interested in learning to use Perl from the command-line.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If you are interested in &lt;code&gt;awk&lt;&#x2F;code&gt; and &lt;code&gt;bash&lt;&#x2F;code&gt; solutions, see &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;q&#x2F;680920&#x2F;109046&quot;&gt;this unix.stackexchange thread&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 3: expression and result with f-string</title>
		<published>2021-12-14T00:00:00+00:00</published>
		<updated>2022-05-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-3/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-3/</id>
		<content type="html">&lt;p&gt;In case you haven&#x27;t yet discovered this awesome &lt;strong&gt;f-string&lt;&#x2F;strong&gt; feature, you can add &lt;code&gt;=&lt;&#x2F;code&gt; after an expression to get both the expression and the result in the output.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;num2 = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;num1 + num2 = 49&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;) = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;num1 + (num2 * 10) = 112&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I use it often to quickly test a function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span&gt;(n):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;) = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span&gt;) = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;string.html#formatstrings&quot;&gt;docs.python: Format String Syntax&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;lexical_analysis.html#formatted-string-literals&quot;&gt;docs.python: Formatted string literals&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;fstring.help&#x2F;&quot;&gt;fstring.help&lt;&#x2F;a&gt; for documentation and examples.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;QPJoqvq0toA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for a short, introductory guide for the Python programming language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 1: increment&#x2F;decrement numbers</title>
		<published>2021-12-08T00:00:00+00:00</published>
		<updated>2021-12-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/vim-tip-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-1/</id>
		<content type="html">&lt;p&gt;Did you know that you can easily increment or decrement a number in Vim?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;a&lt;&#x2F;kbd&gt; will increment the number under the cursor or the first occurrence of a number to the right of the cursor&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;x&lt;&#x2F;kbd&gt; will decrement the number under the cursor or the first occurrence of a number to the right of the cursor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can also provide a count prefix:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;3&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;a&lt;&#x2F;kbd&gt; will add &lt;code&gt;3&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;1000&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;x&lt;&#x2F;kbd&gt; will subtract &lt;code&gt;1000&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Numbers prefixed with &lt;code&gt;0&lt;&#x2F;code&gt;, &lt;code&gt;0x&lt;&#x2F;code&gt; and &lt;code&gt;0b&lt;&#x2F;code&gt; will be treated as octal, hexadecimal and binary respectively. You can also use uppercase for &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;b&lt;&#x2F;code&gt;. What if you want numbers prefixed with &lt;code&gt;0&lt;&#x2F;code&gt; to be treated as decimal? You can use the &lt;code&gt;nrformats&lt;&#x2F;code&gt; setting as shown below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;vim&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-vim &quot;&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; nrformats-=octal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Decimal numbers prefixed with &lt;code&gt;-&lt;&#x2F;code&gt; will be treated as negative numbers. For example, using &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;a&lt;&#x2F;kbd&gt; on &lt;code&gt;-100&lt;&#x2F;code&gt; will give you &lt;code&gt;-99&lt;&#x2F;code&gt;. While this is handy, this trips me up often when dealing with date formats like 2021-12-08.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#CTRL-A&quot;&gt;:h ctrl-a&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#CTRL-X&quot;&gt;:h ctrl-x&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html#%27nrformats%27&quot;&gt;:h nrformats&lt;&#x2F;a&gt; for documentation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;slB98yJ7lv0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;vim_reference&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Improve your Python regex skills with 75 interactive exercises</title>
		<published>2021-12-01T00:00:00+00:00</published>
		<updated>2023-03-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/python-25-days-of-regex/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-25-days-of-regex/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;(2023-03-20) Update:&lt;&#x2F;strong&gt; This &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;blob&#x2F;main&#x2F;PyRegexExercises&quot;&gt;TUI app&lt;&#x2F;a&gt; covers many more exercises compared to the GUI app discussed below.&lt;&#x2F;p&gt;
&lt;hr&gt;
&lt;p&gt;Still confused about Python regular expressions? Grow your confidence with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; ebook (FREE this month!) and an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;tree&#x2F;8433b34bd3f03662abac25c754a5ecf871712980&#x2F;interactive_exercises&quot;&gt;interactive GUI app&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Inspired by &lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;&quot;&gt;Advent of Code&lt;&#x2F;a&gt;, I&#x27;ll also be posting &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1465998844898918403&quot;&gt;3 challenges per day on twitter&lt;&#x2F;a&gt; for 25 days.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;free-ebook&quot;&gt;Free ebook&lt;a class=&quot;zola-anchor&quot; href=&quot;#free-ebook&quot; aria-label=&quot;Anchor link for: free-ebook&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My post about the interactive GUI app made it to the &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29391107&quot;&gt;Hacker News front page&lt;&#x2F;a&gt;. To celebrate, you can get PDF&#x2F;EPUB versions of my &lt;strong&gt;Understanding Python re(gex)?&lt;&#x2F;strong&gt; ebook for free using either of the below links. The offer is valid till 31-Dec-2021.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Or, you can use the &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt; if you prefer reading the book online.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;interactive-gui-app&quot;&gt;Interactive GUI app&lt;a class=&quot;zola-anchor&quot; href=&quot;#interactive-gui-app&quot; aria-label=&quot;Anchor link for: interactive-gui-app&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Based on the &lt;strong&gt;Understanding Python re(gex)?&lt;&#x2F;strong&gt; book contents as well as the exercises, I made an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;tree&#x2F;8433b34bd3f03662abac25c754a5ecf871712980&#x2F;interactive_exercises&quot;&gt;interactive GUI app&lt;&#x2F;a&gt; with 75 questions on &lt;code&gt;re.search&lt;&#x2F;code&gt;, &lt;code&gt;re.sub&lt;&#x2F;code&gt;, &lt;code&gt;re.split&lt;&#x2F;code&gt; and &lt;code&gt;re.findall&lt;&#x2F;code&gt; that&#x27;ll test your understanding of anchors, alternation, grouping, escaping metacharacters, dot metacharacter, quantifiers, character class, grouping, lookarounds, flags, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s some screenshots:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_exercises&#x2F;search.png&quot; alt=&quot;Python exercise example for re.search&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_exercises&#x2F;sub.png&quot; alt=&quot;Python exercise example for re.sub&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_exercises&#x2F;split.png&quot; alt=&quot;Python exercise example for re.split&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_exercises&#x2F;findall.png&quot; alt=&quot;Python exercise example for re.findall&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And here&#x27;s a brief demo:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Ytz-E-rRdX4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;25-days-of-regex&quot;&gt;25 Days Of Regex&lt;a class=&quot;zola-anchor&quot; href=&quot;#25-days-of-regex&quot; aria-label=&quot;Anchor link for: 25-days-of-regex&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If 75 exercises seem daunting to you, consider doing 3 exercises per day. Allocate some time everyday to read the book and complete 3 challenges.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d also be posting &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1465998844898918403&quot;&gt;3 challenges per day on twitter&lt;&#x2F;a&gt;, where you&#x27;ll be able to get help from me and fellow programmers.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 2: counting number of matches</title>
		<published>2021-11-30T00:00:00+00:00</published>
		<updated>2022-05-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-2/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-2/</id>
		<content type="html">&lt;p&gt;Use &lt;code&gt;grep -c&lt;&#x2F;code&gt; to count the number of input &lt;em&gt;lines&lt;&#x2F;em&gt; containing a given pattern.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# number of input lines containing &amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# number of input lines containing all the vowels
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;icP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;^(?=.*a)(?=.*e)(?=.*i)(?=.*o).*u&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;share&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;dict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;words
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;640
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# number of input lines NOT containing &amp;#39;at&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;vc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;at&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With multiple file input, count is displayed for each file &lt;em&gt;separately&lt;&#x2F;em&gt;. Use &lt;code&gt;cat&lt;&#x2F;code&gt; if you need a combined count.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# separate count for each input file
&lt;&#x2F;span&gt;&lt;span&gt;$ grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; names.txt purchases.txt 
&lt;&#x2F;span&gt;&lt;span&gt;names.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;purchases.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# total count for all the input files
&lt;&#x2F;span&gt;&lt;span&gt;$ cat names.txt purchases.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If total number of matches is required, use the &lt;code&gt;-o&lt;&#x2F;code&gt; option to display only the matching portions (one per line) and then use &lt;code&gt;wc&lt;&#x2F;code&gt; to get the count.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# -c gives count of matching lines only
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[aeiou]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use -o to get each match on a separate line
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[aeiou]&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; wc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;l
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Note that if you use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt;, you can simply use &lt;code&gt;-co&lt;&#x2F;code&gt; or &lt;code&gt;--count-matches&lt;&#x2F;code&gt; instead of piping to the &lt;code&gt;wc&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this behavior is different compared to GNU grep
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;co &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[aeiou]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;pZ4btzZKYVg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;CLI text processing with GNU grep and ripgrep&lt;&#x2F;a&gt; ebook if you are interested in learning about &lt;code&gt;GNU grep&lt;&#x2F;code&gt; and &lt;code&gt;ripgrep&lt;&#x2F;code&gt; commands in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Programming deals</title>
		<published>2021-11-26T00:00:00+00:00</published>
		<updated>2021-11-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/programming-deals/" type="text/html"/>
		<id>https://learnbyexample.github.io/programming-deals/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s some exciting programming deals for my own ebooks as well sales details from other creators.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Offers for my ebooks&lt;&#x2F;strong&gt; (valid till Nov 30)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_projects&#x2F;blackfriday&quot;&gt;Practice Python Projects&lt;&#x2F;a&gt; — FREE (normal price $10)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&#x2F;blackfriday&quot;&gt;Learn by example Python bundle&lt;&#x2F;a&gt; — $2 (normal price $12)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;blackfriday&quot;&gt;All 11 Books Bundle&lt;&#x2F;a&gt; — $5 (normal price $22)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1463898778860068868&quot;&gt;Giveaway contest on twitter&lt;&#x2F;a&gt; — a chance to get a single ebook for free&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Indie creators&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathspp.gumroad.com&#x2F;l&#x2F;pythonbootcamp&#x2F;blackfriday&quot;&gt;Python Problem-Solving Bootcamp&lt;&#x2F;a&gt; — 40% OFF today, 30% OFF tomorrow and so on (boost your Python problem-solving skills)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;driscollis.gumroad.com&#x2F;&quot;&gt;Python books by Michael Driscoll&lt;&#x2F;a&gt; — $10 OFF on any book using coupon code &amp;quot;black21&amp;quot; (Python 101&#x2F;201, Image&#x2F;PDF&#x2F;Excel processing, etc)
&lt;ul&gt;
&lt;li&gt;see also author&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;2021&#x2F;11&#x2F;24&#x2F;python-black-friday-cyber-monday-sales-2021&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; for links to other Python sales&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pythonmorsels.com&#x2F;&quot;&gt;Python Morsels&lt;&#x2F;a&gt; — 50% OFF until Nov 30 (skill-building service with short videos and hands-on bite-sized Python exercises)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Miscellaneous&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mailchi.mp&#x2F;leanpub&#x2F;monthly-sale-2021-black-friday&quot;&gt;The Leanpub Monthly Sale for November 2021&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.humblebundle.com&#x2F;books&#x2F;code-like-pro-manning-publications-books&quot;&gt;Humble Book Bundle: Code Like a Pro by Manning Publications&lt;&#x2F;a&gt; — various sale options starting from $1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29338976&quot;&gt;Various programming deals discussion on Hacker News&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;devutils.app&#x2F;pricing&#x2F;&quot;&gt;DevUtils.app&lt;&#x2F;a&gt; — 30% OFF this week (Powerful developer tools for your everyday tasks, Native macOS app)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bhavaniravi.gumroad.com&#x2F;l&#x2F;AxFMK&quot;&gt;How to Journal to Live your Best Life?&lt;&#x2F;a&gt; — $1.99 for 30 customers, $3.99 for the next 30 customers and so on (not strictly related to programming, applicable for life events, career, etc)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Numeric Palindrome</title>
		<published>2021-11-25T00:00:00+00:00</published>
		<updated>2021-11-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/numeric-palindrome/" type="text/html"/>
		<id>https://learnbyexample.github.io/numeric-palindrome/</id>
		<content type="html">&lt;p&gt;I posted a coding challenge in the second issue of &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt;. I discuss the problem and Python&#x2F;Perl solutions in this blog post.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;problem-statement&quot;&gt;Problem statement&lt;a class=&quot;zola-anchor&quot; href=&quot;#problem-statement&quot; aria-label=&quot;Anchor link for: problem-statement&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Find numbers from &lt;code&gt;1&lt;&#x2F;code&gt; to &lt;code&gt;10000&lt;&#x2F;code&gt; (inclusive) which reads the same in reversed form in both binary and decimal formats. For example, &lt;code&gt;33&lt;&#x2F;code&gt; in decimal is &lt;code&gt;100001&lt;&#x2F;code&gt; in binary and both of these are palindromic.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;python-solution&quot;&gt;Python solution&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-solution&quot; aria-label=&quot;Anchor link for: python-solution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s one possible solution for this problem:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10001&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    dec_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    bin_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:b&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;dec_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;dec_s[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;bin_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;bin_s[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(n)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Extending the above solution to include more comparisons is easy with built-in features:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10001&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    dec_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    bin_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:b&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    oct_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:o&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;s[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;(dec_s, bin_s, oct_s)):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(n)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an exercise, extend this program further to include hexadecimal number comparison as well. Can you find out what&#x27;s the first number that is greater than ten to satisfy all the four numeric formats?&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;perl-one-liner&quot;&gt;Perl one-liner&lt;a class=&quot;zola-anchor&quot; href=&quot;#perl-one-liner&quot; aria-label=&quot;Anchor link for: perl-one-liner&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a solution for CLI enthusiasts:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; perl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -le &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;for (1..10000) { $bn = sprintf(&amp;quot;%b&amp;quot;, $_);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                print if ($_ eq reverse) &amp;amp;&amp;amp; ($bn eq reverse $bn) }&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;33
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;99
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;313
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;585
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;717
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;7447
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;9009
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;Perl One-Liners Guide&lt;&#x2F;a&gt; ebook if you are interested in learning to use Perl from the command-line.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 2: membership operator</title>
		<published>2021-11-25T00:00:00+00:00</published>
		<updated>2022-05-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-2/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-2/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;in&lt;&#x2F;code&gt; membership operator checks if a given value is part of a collection of values. Here&#x27;s an example with &lt;code&gt;range()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# checks if num is present among the integers 3 or 4 or 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of a series of &lt;code&gt;==&lt;&#x2F;code&gt; comparisons combined with the &lt;code&gt;or&lt;&#x2F;code&gt; boolean operator, you can utilize the &lt;code&gt;in&lt;&#x2F;code&gt; operator.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# instead of doing this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use the membership operator
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When applied to strings, the &lt;code&gt;in&lt;&#x2F;code&gt; operator performs substring comparison.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;fruit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mango&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;an&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;fruit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;at&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;fruit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To invert the membership test, use the &lt;code&gt;not in&lt;&#x2F;code&gt; operator.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;parrot&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;TmVJPtZBRv4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;expressions.html#membership-test-operations&quot;&gt;docs.python: Membership test operations&lt;&#x2F;a&gt; for documentation. See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 1: remove metadata from images</title>
		<published>2021-11-18T00:00:00+00:00</published>
		<updated>2022-05-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/cli-tip-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-1/</id>
		<content type="html">&lt;p&gt;Want to remove metadata (DateTime, Model, Orientation, ShutterSpeedValue, etc) from your images? You can use &lt;code&gt;mogrify&lt;&#x2F;code&gt; or &lt;code&gt;convert&lt;&#x2F;code&gt; tools provided by ImageMagick.&lt;&#x2F;p&gt;
&lt;p&gt;GUI image viewer applications will usually allow you to see some of the image metadata. You can also use the &lt;code&gt;identify&lt;&#x2F;code&gt; command line tool to get all the metadata:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove &amp;#39;head&amp;#39; to get the entire list of metadata
&lt;&#x2F;span&gt;&lt;span&gt;$ identify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;verbose insect.jpg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;exif&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; head
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:ApertureValue: 113&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;32
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:ColorSpace: 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:ComponentsConfiguration: 1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:CompressedBitsPerPixel: 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:CustomRendered: 0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:DateTime: 2016&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;03 11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:DateTimeDigitized: 2016&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;03 11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:DateTimeOriginal: 2016&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;03 11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:DigitalZoomRatio: 4000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;exif:ExifOffset: 240
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s how you can remove such metadata from images:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# to create a new image with metadata removed
&lt;&#x2F;span&gt;&lt;span&gt;$ convert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;strip insect.jpg op.jpg
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# to modify the input image itself
&lt;&#x2F;span&gt;&lt;span&gt;$ mogrify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;strip insect.jpg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also pass multiple images to &lt;code&gt;mogrify&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ mogrify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;strip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.jpg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Note that the image size after metadata removal may vary because of recompression.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;p0KCLusMd5Q&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;imagemagick.org&#x2F;&quot;&gt;ImageMagick&lt;&#x2F;a&gt; — create, edit, compose, or convert digital images&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;260810&#x2F;how-can-i-read-and-remove-meta-exif-data-from-my-photos-using-the-command-line&quot;&gt;How can I read and remove meta (exif) data from my photos using the command line?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;312754&#x2F;how-to-strip-metadata-from-image-files&quot;&gt;How to strip metadata from image files&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;softwareengineering.stackexchange.com&#x2F;questions&#x2F;42767&#x2F;why-do-they-name-a-program-mogrify-in-imagemagick&quot;&gt;What does mogrify mean?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Exif&quot;&gt;wikipedia: Exif&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 1: tuple argument for startswith&#x2F;endswith methods</title>
		<published>2021-11-16T00:00:00+00:00</published>
		<updated>2022-04-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/tips/python-tip-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-1/</id>
		<content type="html">&lt;p&gt;You&#x27;d probably know about the &lt;code&gt;startswith()&lt;&#x2F;code&gt; and &lt;code&gt;endswith()&lt;&#x2F;code&gt; string methods.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This is a sample string&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;startswith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;startswith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;is&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;endswith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ing&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;endswith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ly&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But did you know that you can also pass a &lt;code&gt;tuple&lt;&#x2F;code&gt; of strings?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;refuse&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;impossible&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fire&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;present&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;read&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;shim&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;im&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;re&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;use&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;w.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;startswith&lt;&#x2F;span&gt;&lt;span&gt;(prefix)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;refuse&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;impossible&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;read&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;w.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;endswith&lt;&#x2F;span&gt;&lt;span&gt;(prefix)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;refuse&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fire&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;shim&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Video demo&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;THSMmCZQn1A&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Announcing learnbyexample weekly newsletter</title>
		<published>2021-11-13T00:00:00+00:00</published>
		<updated>2022-12-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/learnbyexample-weekly-newsletter/" type="text/html"/>
		<id>https://learnbyexample.github.io/learnbyexample-weekly-newsletter/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m excited to announce &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; newsletter, scheduled to be delivered every Friday.&lt;&#x2F;p&gt;
&lt;p&gt;This free newsletter will help you discover awesome programming resources. I&#x27;ll primarily focus on resources related to Python, Linux, CLI tools, Regular Expressions and Vim. Sometimes, I&#x27;ll also include other programming resources.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;learnbyexample-weekly.png&quot; alt=&quot;learnbyexample weekly newsletter&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;You can expect 5-15 links, usually categorized into the following sections:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Article of the week&lt;&#x2F;li&gt;
&lt;li&gt;Resources&lt;&#x2F;li&gt;
&lt;li&gt;Free programming books, courses and deals&lt;&#x2F;li&gt;
&lt;li&gt;Tip of the week&lt;&#x2F;li&gt;
&lt;li&gt;Tools&lt;&#x2F;li&gt;
&lt;li&gt;Curiosity Corner&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some of the resource links from the first issue:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.joshwcomeau.com&#x2F;blog&#x2F;how-to-learn-stuff-quickly&#x2F;&quot;&gt;How To Learn Stuff Quickly&lt;&#x2F;a&gt; by Josh W. Comeau&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;miguendes.me&#x2F;python-pathlib&quot;&gt;Python pathlib Cookbook&lt;&#x2F;a&gt; — 57+ Examples to Master It&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shrutibalasa.gumroad.com&#x2F;l&#x2F;css-flex-and-grid&#x2F;Newsoff25&quot;&gt;Complete Guide to CSS Flex and Grid&lt;&#x2F;a&gt; by Shruti Balasa (25% OFF for a week)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;carbon.now.sh&#x2F;&quot;&gt;Carbon&lt;&#x2F;a&gt; — Create and share beautiful images of your source code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After subscribing to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt;, you&#x27;ll get a confirmation email followed by another email with the latest issue contents. You can also view the past issues from your Gumroad account.&lt;&#x2F;p&gt;
&lt;p&gt;Hope you find the newsletter useful. Let me know your feedback via email (learnbyexample.net@gmail.com) or &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;twitter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Indie Python Extravaganza</title>
		<published>2021-10-01T00:00:00+00:00</published>
		<updated>2022-12-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/indie-python-extravaganza/" type="text/html"/>
		<id>https://learnbyexample.github.io/indie-python-extravaganza/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;You never know where a conversation between indie authors will lead to. A &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tw_lgiordani&#x2F;status&#x2F;1442489206681395207&quot;&gt;tweet about Leanpub Python book sales&lt;&#x2F;a&gt; brought up giveaways that we indie authors tend to do. Long story short, the four of us ended up deciding to create &lt;strong&gt;The Indie Python Extravaganza&lt;&#x2F;strong&gt; bundle.&lt;&#x2F;p&gt;
&lt;p&gt;And guess what?! You can use this &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;theindiepythonextravaganza&#x2F;c&#x2F;pytober&quot;&gt;pytober coupon link&lt;&#x2F;a&gt; to get the bundle for FREE (the offer is valid till 31-Oct-2021).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;bundle-contents&quot;&gt;Bundle contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#bundle-contents&quot; aria-label=&quot;Anchor link for: bundle-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A collection of books that will help you to improve your knowledge of the Python programming language one page at a time. Join four indie authors in a journey from the basics of Python to the structure of production-ready systems, going through the core features of the language, some intermediate projects and a deep dive into regular expressions.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;indie_python.jpg&quot; alt=&quot;The Indie Python Extravaganza cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;theindiepythonextravaganza&#x2F;c&#x2F;pytober&quot;&gt;Coupon link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this bundle, Mike will teach you the basics of Python with &lt;strong&gt;Python 101&lt;&#x2F;strong&gt;. Sundeep will then take the lead and help you to put your knowledge into practice with &lt;strong&gt;Practice Python Projects&lt;&#x2F;strong&gt;. Learn what NOT to do when writing your Python programs with Rodrigo in his &lt;strong&gt;Pydon&#x27;ts&lt;&#x2F;strong&gt; book! If you need to learn regular expressions, Sundeep has again your back with his &lt;strong&gt;Python re(gex)?&lt;&#x2F;strong&gt; book, and when you are ready to start working on production code, you&#x27;ll have &lt;strong&gt;Clean Architectures in Python&lt;&#x2F;strong&gt; to help you!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;a class=&quot;zola-anchor&quot; href=&quot;#authors&quot; aria-label=&quot;Anchor link for: authors&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Leonardo Giordani: &lt;a href=&quot;https:&#x2F;&#x2F;www.thedigitalcatonline.com&quot;&gt;Blog&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tw_lgiordani&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Michael Driscoll: &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&quot;&gt;Blog&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;driscollis&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rodrigo Girão Serrão: &lt;a href=&quot;https:&#x2F;&#x2F;mathspp.com&quot;&gt;Blog&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;mathsppblog&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Sundeep Agarwal: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;&quot;&gt;Blog&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;how-can-you-help&quot;&gt;How can you help?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-can-you-help&quot; aria-label=&quot;Anchor link for: how-can-you-help&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Share the bundle link with your friends and colleagues interested in learning Python.&lt;&#x2F;p&gt;
&lt;p&gt;Your feedback on the book contents would be appreciated even more.&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning 😇&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Practice Python Projects book announcement</title>
		<published>2021-07-30T00:00:00+00:00</published>
		<updated>2023-01-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/practice-python-projects-book-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/practice-python-projects-book-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I just published my ebook titled &amp;quot;&lt;strong&gt;Practice Python Projects&lt;&#x2F;strong&gt;&amp;quot;. This book presents five beginner to intermediate level projects inspired by real world use cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;calculator&#x2F;calculator.html&quot;&gt;Enhance your CLI experience with a custom Python calculator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;poll_data_analysis&#x2F;poll_data_analysis.html&quot;&gt;Analyzing poll data from a Reddit comment thread&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;find_typos&#x2F;find_typos.html&quot;&gt;Finding typos in plain text and Markdown files&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;mcq&#x2F;multiple_choice_questions.html&quot;&gt;Creating a GUI for evaluating multiple choice questions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;square_tic_tac_toe&#x2F;square_tic_tac_toe.html&quot;&gt;Square Tic Tac Toe — creating a GUI game with AI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;To test your understanding and to make it more interesting, you&#x27;ll also be presented with exercises at the end of each project. Resources for further exploration are also mentioned throughout the book. Here&#x27;s a short video about the book:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;5whwiiURWS8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;ebook-links&quot;&gt;Ebook links&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook-links&quot; aria-label=&quot;Anchor link for: ebook-links&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can buy the &lt;strong&gt;PDF&#x2F;EPUB&lt;&#x2F;strong&gt; versions of the book using these links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_projects&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_projects&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;py_projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can also get the ebooks as part of &lt;strong&gt;Learn by example Python bundle&lt;&#x2F;strong&gt; using these links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;python-bundle&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;python-bundle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;py_projects.png&quot; alt=&quot;Practice Python Projects cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;preface.html&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;preface.html&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&lt;&#x2F;a&gt; repo has program&#x2F;example files, markdown source and other details about the book.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hope you find it useful and fun to practice these Python projects. I would highly appreciate if you&#x27;d &lt;strong&gt;let me know how you felt about this book&lt;&#x2F;strong&gt;. It could be anything from a simple thank you, Gumroad rating, pointing out a typo, mistakes in code snippets, which aspects of the book worked for you (or didn&#x27;t!) and so on. Reader feedback is essential and especially so for self-published authors.&lt;&#x2F;p&gt;
&lt;p&gt;You can reach me via:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;E-mail: &lt;code&gt;learn by example.net@gmail.com&lt;&#x2F;code&gt; (without the spaces)&lt;&#x2F;li&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Escaping madness to get literal field separators in awk</title>
		<published>2021-07-02T00:00:00+00:00</published>
		<updated>2023-01-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/escaping-madness-awk-literal-field-separator/" type="text/html"/>
		<id>https://learnbyexample.github.io/escaping-madness-awk-literal-field-separator/</id>
		<content type="html">&lt;p&gt;I&#x27;m building a tool called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;regexp-cut&quot;&gt;rcut&lt;&#x2F;a&gt; that allows you to use &lt;code&gt;cut&lt;&#x2F;code&gt; like syntax with features like regexp based delimiters. The solution uses &lt;code&gt;awk&lt;&#x2F;code&gt; inside a &lt;code&gt;bash&lt;&#x2F;code&gt; script.&lt;&#x2F;p&gt;
&lt;p&gt;Latest &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Feature_creep&quot;&gt;feature creep&lt;&#x2F;a&gt; is fixed string field splitting. I thought it would be a simple enough solution to add.&lt;&#x2F;p&gt;
&lt;p&gt;I was wrong.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;how-many-escapes-for-a-single-backslash&quot;&gt;How many escapes for a single backslash?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-many-escapes-for-a-single-backslash&quot; aria-label=&quot;Anchor link for: how-many-escapes-for-a-single-backslash&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For reference, these are the versions I have on my machine:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; gawk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; --version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;GNU&lt;&#x2F;span&gt;&lt;span&gt; Awk 5.1.0, API: 3.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mawk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -W&lt;&#x2F;span&gt;&lt;span&gt; version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk&lt;&#x2F;span&gt;&lt;span&gt; 1.3.4 20200120
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;mawk&lt;&#x2F;code&gt; and &lt;code&gt;gawk&lt;&#x2F;code&gt; differ when it comes to escaping backslashes. You&#x27;ll later see the rule that&#x27;ll work correctly for both implementations.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bak
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk:&lt;&#x2F;span&gt;&lt;span&gt; fatal: invalid regexp: Trailing backslash: &#x2F;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\\&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk:&lt;&#x2F;span&gt;&lt;span&gt; fatal: invalid regexp: Trailing backslash: &#x2F;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\\\&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bak
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The value assigned to &lt;code&gt;FS&lt;&#x2F;code&gt; is treated as a string and then converted to a regexp. &lt;code&gt;\&lt;&#x2F;code&gt; is a metacharacter for string and regexp both. So, &lt;code&gt;\\&lt;&#x2F;code&gt; in a string means a single backslash and &lt;code&gt;\\\\&lt;&#x2F;code&gt; means double backslash. Double backslash in regexp means a single backslash.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;&#x2F;strong&gt;: For a consistent behavior across both &lt;code&gt;mawk&lt;&#x2F;code&gt; and &lt;code&gt;gawk&lt;&#x2F;code&gt; and irrespective of trailing backslash errors, you need to use 4 backslashes for every backslash.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# both 2 and 4 backslashes here gets treated as single backslash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# hence the empty fields in the output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,,2,,3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,,2,,3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,,2,,3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,,2,,3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# 5-8 backslashes give expected results
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# 5-6 backslashes give error, 7-8 backslashes give expected results
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk:&lt;&#x2F;span&gt;&lt;span&gt; fatal: invalid regexp: Trailing backslash: &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\\&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk:&lt;&#x2F;span&gt;&lt;span&gt; fatal: invalid regexp: Trailing backslash: &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\\&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an alternate method, you can use codepoint of the backslash character. This removes one level of escaping. See &lt;a href=&quot;https:&#x2F;&#x2F;ascii.cl&#x2F;&quot;&gt;ASCII code table&lt;&#x2F;a&gt; for codepoint reference.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;&#x2F;strong&gt;: You need &lt;code&gt;\x5c\x5c&lt;&#x2F;code&gt; for every backslash.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\x5c\x5c&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bak
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\x5c\x5c&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bak
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\x5c\x5c\x5c\x5c&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\x5c\x5c\x5c\x5c&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;using-awk-to-generate-an-escaped-string&quot;&gt;Using awk to generate an escaped string&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-awk-to-generate-an-escaped-string&quot; aria-label=&quot;Anchor link for: using-awk-to-generate-an-escaped-string&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose you want to use &lt;code&gt;\.&lt;&#x2F;code&gt; literally for field splitting. Here&#x27;s some ways to do it that works for both &lt;code&gt;mawk&lt;&#x2F;code&gt; and &lt;code&gt;gawk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;x\2\.y\.z&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\.&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;,y,z
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;x\2\.y\.z&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\[.]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;,y,z
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;x\2\.y\.z&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\x5c\x5c[.]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;,y,z
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, the task is to generate one of the above strings passed to the &lt;code&gt;-F&lt;&#x2F;code&gt; option from &lt;code&gt;\.&lt;&#x2F;code&gt; as input. Using &lt;code&gt;sed&lt;&#x2F;code&gt; is better, but for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;regexp-cut&quot;&gt;rcut&lt;&#x2F;a&gt;, I didn&#x27;t want to add another external tool.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;case-1-backslash-madness&quot;&gt;Case 1: backslash madness&lt;a class=&quot;zola-anchor&quot; href=&quot;#case-1-backslash-madness&quot; aria-label=&quot;Anchor link for: case-1-backslash-madness&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You need to convert &lt;code&gt;\&lt;&#x2F;code&gt; to 4 backslashes and escape regexp metacharacters with 2 backslashes. Note that you cannot escape all characters except &lt;code&gt;\&lt;&#x2F;code&gt; with 2 backslashes, for example &lt;code&gt;\\t&lt;&#x2F;code&gt; will become a tab character! Also, you need to escape &lt;code&gt;\&lt;&#x2F;code&gt; first and then escape the other metacharacters.&lt;&#x2F;p&gt;
&lt;p&gt;Ready for the solution? I&#x27;m not even going to try explaining this, found it by experimenting.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replacement string for the first gsub has 16 backslashes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replacement string for the second gsub has 8 backslashes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.b\c^d&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{gsub(&#x2F;\\&#x2F;, &amp;quot;\\\\\\\\\\\\\\\\&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                          gsub(&#x2F;[{[(^$*?+.|]&#x2F;, &amp;quot;\\\\\\\\&amp;amp;&amp;quot;)} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;.b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;^d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gawk&#x2F;manual&#x2F;gawk.html#Gory-Details&quot;&gt;gawk manual: Gory details&lt;&#x2F;a&gt; might help you understand the above solution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;case-2-character-class&quot;&gt;Case 2: character class&lt;a class=&quot;zola-anchor&quot; href=&quot;#case-2-character-class&quot; aria-label=&quot;Anchor link for: case-2-character-class&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One of the characteristic of character class is that you can enclose all characters except &lt;code&gt;\&lt;&#x2F;code&gt; and &lt;code&gt;^&lt;&#x2F;code&gt; to match them literally. The &lt;code&gt;\&lt;&#x2F;code&gt; character is special both inside&#x2F;outside of character class and &lt;code&gt;[^]&lt;&#x2F;code&gt; is invalid since &lt;code&gt;^&lt;&#x2F;code&gt; is special if used as the first character.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.b\c^d&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{gsub(&#x2F;\\&#x2F;, &amp;quot;\\\\\\\\\\\\\\\\&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                          gsub(&#x2F;[^^\\]&#x2F;, &amp;quot;[&amp;amp;]&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                          gsub(&#x2F;\^&#x2F;, &amp;quot;\\\\^&amp;quot;)} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;[a][.][b]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;[c]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;^[d]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;case-3-codepoint-to-represent-backslash&quot;&gt;Case 3: codepoint to represent backslash&lt;a class=&quot;zola-anchor&quot; href=&quot;#case-3-codepoint-to-represent-backslash&quot; aria-label=&quot;Anchor link for: case-3-codepoint-to-represent-backslash&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, my preferred solutions that uses codepoint instead of escaping backslashes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# case 1 alternate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.b\c^d&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{gsub(&#x2F;\\&#x2F;, &amp;quot;\\x5c\\x5c&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                          gsub(&#x2F;[{[(^$*?+.|]&#x2F;, &amp;quot;\\x5c&amp;amp;&amp;quot;)} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c.b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5cc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c^d
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# case 2 alternate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.b\c^d&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{gsub(&#x2F;[^^\\]&#x2F;, &amp;quot;[&amp;amp;]&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                          gsub(&#x2F;\\&#x2F;, &amp;quot;\\x5c\\x5c&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                          gsub(&#x2F;\^&#x2F;, &amp;quot;\\x5c^&amp;quot;)} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;[a][.][b]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c[c]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c^[d]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;sanity-check&quot;&gt;Sanity check&lt;a class=&quot;zola-anchor&quot; href=&quot;#sanity-check&quot; aria-label=&quot;Anchor link for: sanity-check&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I probably lost my sanity trying to come up with a solution and again while writing this post. I did try a few sanity checks for the solutions presented here, but there&#x27;s a chance I messed up or missed some corner case. If you spot an issue, do let me know.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Debug woes 2: unexpected array in replacement string</title>
		<published>2021-06-17T00:00:00+00:00</published>
		<updated>2021-06-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/debug-woes-2/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/debug-woes-2/</id>
		<content type="html">&lt;p&gt;So, I was editing a markdown file in Vim and I wanted to convert some lines to links. The regexp pattern ended up needing non-greedy quantifier, but it didn&#x27;t work. I thought I got Vim&#x27;s rather weird &lt;code&gt;\{-}&lt;&#x2F;code&gt; syntax wrong and switched to using Perl from the command line instead of checking the documentation if I had actually made that mistake.&lt;&#x2F;p&gt;
&lt;p&gt;Turns out I made other mistakes in the regexp, but I didn&#x27;t want to switch back to Vim. I was still scratching my head though, since I wasn&#x27;t getting the expected output. Thankfully, compared to the &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;mini&#x2F;debug-woes-1&#x2F;&quot;&gt;previous debug misery&lt;&#x2F;a&gt;, I was able to guess this issue soon enough.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a simplified issue, how I debugged it and the corrected usage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# sample input
&lt;&#x2F;span&gt;&lt;span&gt;$ cat ip.txt 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; blah blah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; xyz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt; abcd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;56&lt;&#x2F;span&gt;&lt;span&gt; foobaz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; blah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; apple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt; fig
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# where I got stuck
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# what happened to $1 and $2?
&lt;&#x2F;span&gt;&lt;span&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;lpe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;^(. )(.*?\d+) (.+)&#x2F;$1[$2](#$3)&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#xyz 34 abcd 56 foobaz)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#apple 200 fig)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# what I did to debug
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# step 1: only $1 in the replacement
&lt;&#x2F;span&gt;&lt;span&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;lpe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;^(. )(.*?\d+) (.+)&#x2F;$1&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# step 2: $1 and $2 in the replacement
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# only empty lines as output - bingo!
&lt;&#x2F;span&gt;&lt;span&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;lpe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;^(. )(.*?\d+) (.+)&#x2F;$1[$2]&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# $1[$2] treated as array syntax in Perl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# so, need to escape [ since array isn&amp;#39;t intended here
&lt;&#x2F;span&gt;&lt;span&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;lpe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;^(. )(.*?\d+) (.+)&#x2F;$1\[$2](#$3)&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;[blah blah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#xyz 34 abcd 56 foobaz)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;[blah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#apple 200 fig)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Dreaming solutions</title>
		<published>2021-06-10T00:00:00+00:00</published>
		<updated>2021-06-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/dreaming-solutions/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/dreaming-solutions/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;67886163&#x2F;4082052&quot;&gt;This SO question&lt;&#x2F;a&gt; was interesting and had various approaches to solve it. Here&#x27;s a sample example to explain the problem to be solved:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;caller_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;034082394234324&lt;&#x2F;span&gt;&lt;span&gt;, clear_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;33335345435&lt;&#x2F;span&gt;&lt;span&gt;,  direction=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;caller_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83479234234&lt;&#x2F;span&gt;&lt;span&gt;,     clear_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;34836424733&lt;&#x2F;span&gt;&lt;span&gt;, direction=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;caller_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83479234234&lt;&#x2F;span&gt;&lt;span&gt;,     clear_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;64237384533&lt;&#x2F;span&gt;&lt;span&gt;, direction=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat list.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;642
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3333
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;534234235
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat op.txt
&lt;&#x2F;span&gt;&lt;span&gt;caller_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83479234234&lt;&#x2F;span&gt;&lt;span&gt;,     clear_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;64237384533&lt;&#x2F;span&gt;&lt;span&gt;, direction=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any data present in &lt;code&gt;list.txt&lt;&#x2F;code&gt; has to be matched immediately after &lt;code&gt;clear_number=&lt;&#x2F;code&gt; and the input line should also have &lt;code&gt;direction=2,&lt;&#x2F;code&gt;. In the sample above, first line matches &lt;code&gt;3333&lt;&#x2F;code&gt; but not the second criteria. The second line fails even though it has &lt;code&gt;642&lt;&#x2F;code&gt; since it is not immediately after &lt;code&gt;clear_number=&lt;&#x2F;code&gt;. The &lt;code&gt;list.txt&lt;&#x2F;code&gt; file can have 10K-50K lines and &lt;code&gt;ip.txt&lt;&#x2F;code&gt; is around 10GB.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a slightly modified answer based on existing solutions on that thread. Since the data present in &lt;code&gt;list.txt&lt;&#x2F;code&gt; has to be partially matched after &lt;code&gt;clear_number=&lt;&#x2F;code&gt;, a &lt;em&gt;single&lt;&#x2F;em&gt; direct comparison with the keys saved in &lt;code&gt;arr&lt;&#x2F;code&gt; is not possible. This solution loops over all the keys for every input line that matches the &lt;code&gt;direction=2,&lt;&#x2F;code&gt; criteria (breaks the loop if a match is found early).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;awk&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-awk &quot;&gt;&lt;code class=&quot;language-awk&quot; data-lang=&quot;awk&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;FNR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NR&lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;=&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;direction=2,&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;print
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;next
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;em&gt;To run the solutions, use &lt;code&gt;mawk -f script.awk list.txt ip.txt&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;In my dreams that night&lt;&#x2F;strong&gt;, I realized that the solution can be improved drastically by looping over the digits after &lt;code&gt;clear_number=&lt;&#x2F;code&gt; instead of looping over keys saved in &lt;code&gt;arr&lt;&#x2F;code&gt;. Matching a key is &lt;code&gt;O(1)&lt;&#x2F;code&gt;, so the time saving is huge since the inner loop is now a maximum of 12 (length of digits after &lt;code&gt;clear_number=&lt;&#x2F;code&gt;) instead of looping a maximum of 10K-50K times! With a 35M sample input file and 12K keys that I created for testing, I found this solution to be about &lt;strong&gt;200&lt;&#x2F;strong&gt; times faster.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;awk&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-awk &quot;&gt;&lt;code class=&quot;language-awk&quot; data-lang=&quot;awk&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;FNR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NR&lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;direction=2,&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;substr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;substr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;print
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;next
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>GNU BRE&#x2F;ERE cheatsheet and differences between grep, sed and awk</title>
		<published>2021-05-31T00:00:00+00:00</published>
		<updated>2022-08-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/gnu-bre-ere-cheatsheet/" type="text/html"/>
		<id>https://learnbyexample.github.io/gnu-bre-ere-cheatsheet/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;bre_ere_cheatsheet.png&quot; alt=&quot;GNU BRE&#x2F;ERE cheatsheet&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Poster created using &lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;&quot;&gt;Canva&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This post covers &lt;strong&gt;Basic Regular Expressions&lt;&#x2F;strong&gt; (BRE) and &lt;strong&gt;Extended Regular Expressions&lt;&#x2F;strong&gt; (ERE) syntax supported by GNU &lt;code&gt;grep&lt;&#x2F;code&gt;, &lt;code&gt;sed&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt;. You&#x27;ll also learn the differences between these tools — for example, &lt;code&gt;awk&lt;&#x2F;code&gt; doesn&#x27;t support backreferences within regexp definition (i.e. the search portion).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;bre-and-ere&quot;&gt;BRE and ERE&lt;a class=&quot;zola-anchor&quot; href=&quot;#bre-and-ere&quot; aria-label=&quot;Anchor link for: bre-and-ere&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; From &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;grep&#x2F;manual&#x2F;grep.html#Basic-vs-Extended&quot;&gt;GNU grep manual&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In basic regular expressions the meta-characters &lt;code&gt;?&lt;&#x2F;code&gt;, &lt;code&gt;+&lt;&#x2F;code&gt;, &lt;code&gt;{&lt;&#x2F;code&gt;, &lt;code&gt;|&lt;&#x2F;code&gt;, &lt;code&gt;(&lt;&#x2F;code&gt;, and &lt;code&gt;)&lt;&#x2F;code&gt; lose their special meaning; instead use the backslashed versions &lt;code&gt;\?&lt;&#x2F;code&gt;, &lt;code&gt;\+&lt;&#x2F;code&gt;, &lt;code&gt;\{&lt;&#x2F;code&gt;, &lt;code&gt;\|&lt;&#x2F;code&gt;, &lt;code&gt;\(&lt;&#x2F;code&gt;, and &lt;code&gt;\)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt; support BRE by default and enables ERE when &lt;code&gt;-E&lt;&#x2F;code&gt; option is used. &lt;code&gt;awk&lt;&#x2F;code&gt; supports only ERE. Assume ERE for descriptions in this post unless otherwise mentioned.&lt;&#x2F;p&gt;
&lt;p&gt;This post is intended as a reference for BRE&#x2F;ERE flavor of regular expressions. For a more detailed explanation with examples and exercises, see these chapters from &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&#x2F;&quot;&gt;my ebooks&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnugrep_ripgrep&#x2F;breere-regular-expressions.html&quot;&gt;grep BRE&#x2F;ERE Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;breere-regular-expressions.html&quot;&gt;sed BRE&#x2F;ERE Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnuawk&#x2F;regular-expressions.html&quot;&gt;awk Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;anchors&quot;&gt;Anchors&lt;a class=&quot;zola-anchor&quot; href=&quot;#anchors&quot; aria-label=&quot;Anchor link for: anchors&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start of the string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the end of the string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\&amp;lt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start of word&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the end of word&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The &lt;code&gt;-x&lt;&#x2F;code&gt; cli option in &lt;code&gt;grep&lt;&#x2F;code&gt; is equivalent to &lt;code&gt;^pattern$&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Word characters include alphabets, digits and underscore. Here&#x27;s some more alternate ways to specify word anchors:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start&#x2F;end of words, applicable for &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\y&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start&#x2F;end of words, applicable for &lt;code&gt;awk&lt;&#x2F;code&gt; (&lt;code&gt;\b&lt;&#x2F;code&gt; means backspace)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\B&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matches wherever &lt;code&gt;\b&lt;&#x2F;code&gt; (or &lt;code&gt;\y&lt;&#x2F;code&gt;) doesn&#x27;t match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;code&gt;grep&lt;&#x2F;code&gt; also supports &lt;code&gt;-w&lt;&#x2F;code&gt; cli option. It is equivalent to &lt;code&gt;(?&amp;lt;!\w)pattern(?!\w)&lt;&#x2F;code&gt;. The three different ways to specify word anchors are not exactly equivalent though, see &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnugrep_ripgrep&#x2F;gotchas-and-tricks.html#word-boundary-differences&quot;&gt;Word boundary differences&lt;&#x2F;a&gt; section from my book for details and examples.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;alternation-and-grouping&quot;&gt;Alternation and Grouping&lt;a class=&quot;zola-anchor&quot; href=&quot;#alternation-and-grouping&quot; aria-label=&quot;Anchor link for: alternation-and-grouping&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1|pat2|pat3&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;pat1&lt;&#x2F;code&gt; or &lt;code&gt;pat2&lt;&#x2F;code&gt; or &lt;code&gt;pat3&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\|&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;group pattern(s), &lt;code&gt;a(b|c)d&lt;&#x2F;code&gt; is same as &lt;code&gt;abd|acd&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\(\)&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The alternative patterns can have their own independent anchors. Alternative which matches earliest in the input gets precedence. Longest matching portion wins if multiple alternatives start from the same location (irrespective of the order of alternatives). In case of a tie with same lengths, leftmost alternative wins (see &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;39752929&#x2F;4082052&quot;&gt;stackoverflow: Non greedy matching in sed&lt;&#x2F;a&gt; for a practical use case).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;escaping-metacharacters&quot;&gt;Escaping metacharacters&lt;a class=&quot;zola-anchor&quot; href=&quot;#escaping-metacharacters&quot; aria-label=&quot;Anchor link for: escaping-metacharacters&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;prefix metacharacters with &lt;code&gt;\&lt;&#x2F;code&gt; to match them literally&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\\&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;to match &lt;code&gt;\&lt;&#x2F;code&gt; literally&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt;, switching between ERE and BRE can reduce the number of escapes needed for some cases. For fixed string matching, &lt;code&gt;grep&lt;&#x2F;code&gt; has &lt;code&gt;-F&lt;&#x2F;code&gt; option and &lt;code&gt;awk&lt;&#x2F;code&gt; has string comparison operators (whole string) and the &lt;code&gt;index&lt;&#x2F;code&gt; function (partial string).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sed&lt;&#x2F;code&gt; requires both &lt;code&gt;(&lt;&#x2F;code&gt; and &lt;code&gt;)&lt;&#x2F;code&gt; characters to be escaped (in ERE mode), whereas &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; don&#x27;t require &lt;code&gt;)&lt;&#x2F;code&gt; to be escaped.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sed&lt;&#x2F;code&gt; requires &lt;code&gt;{&lt;&#x2F;code&gt; to be escaped (in ERE mode) even if it isn&#x27;t part of a valid quantifier syntax, whereas &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; don&#x27;t require escaping. For example, you&#x27;d need &lt;code&gt;\{a}&lt;&#x2F;code&gt; in &lt;code&gt;sed&lt;&#x2F;code&gt; whereas &lt;code&gt;{a}&lt;&#x2F;code&gt; is enough for the other two.&lt;&#x2F;li&gt;
&lt;li&gt;In BRE mode, &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt; don&#x27;t require &lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; to be escaped if they are used away from their customary positions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;dot-metacharacter-and-quantifiers&quot;&gt;Dot metacharacter and Quantifiers&lt;a class=&quot;zola-anchor&quot; href=&quot;#dot-metacharacter-and-quantifiers&quot; aria-label=&quot;Anchor link for: dot-metacharacter-and-quantifiers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match any character, including the newline character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;?&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\?&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;0&lt;&#x2F;code&gt; or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;1&lt;&#x2F;code&gt; or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\+&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;m&lt;&#x2F;code&gt; to &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match at least &lt;code&gt;m&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match up to &lt;code&gt;n&lt;&#x2F;code&gt; times (including &lt;code&gt;0&lt;&#x2F;code&gt; times)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match exactly &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\{\}&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;any number of characters between &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2|pat2.*pat1&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match both &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt; in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Precedence rule is &lt;em&gt;longest match wins&lt;&#x2F;em&gt;, which is mostly similar but not exactly same as greedy quantifiers. For example, with &lt;code&gt;foo123312baz&lt;&#x2F;code&gt; as input string, &lt;code&gt;o[123]+(12baz)?&lt;&#x2F;code&gt; will match &lt;code&gt;o123312baz&lt;&#x2F;code&gt; with these tools, whereas it will match &lt;code&gt;o123312&lt;&#x2F;code&gt; with greedy quantifiers.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;character-class&quot;&gt;Character class&lt;a class=&quot;zola-anchor&quot; href=&quot;#character-class&quot; aria-label=&quot;Anchor link for: character-class&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[set123]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match any of these characters once&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[^set123]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match except any of these characters once&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[3-7AM-X]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;range of characters from &lt;code&gt;3&lt;&#x2F;code&gt; to &lt;code&gt;7&lt;&#x2F;code&gt;, &lt;code&gt;A&lt;&#x2F;code&gt;, another range from &lt;code&gt;M&lt;&#x2F;code&gt; to &lt;code&gt;X&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;open collating symbol&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;close collating symbol&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[=&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;open equivalence class&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;=]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;close equivalence class&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Specific placement will help to match character class metacharacters literally.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-z-]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;-&lt;&#x2F;code&gt; should be first&#x2F;last character to match literally&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[+^]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt; shouldn&#x27;t be first character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[]=]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;]&lt;&#x2F;code&gt; should be first character (second if &lt;code&gt;^&lt;&#x2F;code&gt; is used to invert the set)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\&lt;&#x2F;code&gt; isn&#x27;t special within character class in &lt;code&gt;grep&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\&lt;&#x2F;code&gt; can be used to escape character class metacharacters in &lt;code&gt;awk&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some commonly used character sets have predefined escape sequences:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\w&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[a-zA-Z0-9_]&lt;&#x2F;code&gt; for matching word characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[ \t\n\r\f\v]&lt;&#x2F;code&gt; for matching whitespace characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\W&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match non-word characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\S&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match non-whitespace characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;Undefined escape sequences will be treated as the character it escapes. For example, &lt;code&gt;\e&lt;&#x2F;code&gt; will match &lt;code&gt;e&lt;&#x2F;code&gt; (not &lt;code&gt;\&lt;&#x2F;code&gt; and &lt;code&gt;e&lt;&#x2F;code&gt;).
&lt;ul&gt;
&lt;li&gt;in addition, &lt;code&gt;awk&lt;&#x2F;code&gt; gives a &amp;quot;not a known regexp operator&amp;quot; warning.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The above escape sequences &lt;em&gt;cannot&lt;&#x2F;em&gt; be used inside character classes and behavior varies between the tools.
&lt;ul&gt;
&lt;li&gt;For example, using &lt;code&gt;[\w]&lt;&#x2F;code&gt; will match &lt;code&gt;\&lt;&#x2F;code&gt; or &lt;code&gt;w&lt;&#x2F;code&gt; characters in &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt; whereas it will match only &lt;code&gt;w&lt;&#x2F;code&gt; in &lt;code&gt;awk&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;These escape sequences are also locale aware, for example &lt;code&gt;αλεπού&lt;&#x2F;code&gt; and &lt;code&gt;\u2028&lt;&#x2F;code&gt; (line separator) will be considered as word and whitespace characters respectively in appropriate locales.&lt;&#x2F;li&gt;
&lt;li&gt;These tools do &lt;em&gt;not&lt;&#x2F;em&gt; support &lt;code&gt;\d&lt;&#x2F;code&gt; and &lt;code&gt;\D&lt;&#x2F;code&gt;, commonly featured in other regexp implementations for digits and non-digits.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;escape-sequences&quot;&gt;Escape sequences&lt;a class=&quot;zola-anchor&quot; href=&quot;#escape-sequences&quot; aria-label=&quot;Anchor link for: escape-sequences&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This section is applicable only for &lt;code&gt;sed&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; unless otherwise specified and can be used within character classes too. See also &lt;a href=&quot;https:&#x2F;&#x2F;ascii.cl&#x2F;&quot;&gt;ASCII Codes Table Standard characters&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Escape sequence&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\a&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;alert&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;backspace in &lt;code&gt;awk&lt;&#x2F;code&gt;, word boundary in &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt; inside a character class in &lt;code&gt;sed&lt;&#x2F;code&gt; will act as a backspace&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\f&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;formfeed&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\n&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;newline&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\r&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;carriage return&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\t&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;horizontal tab&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\v&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;vertical tab&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\cx&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;CONTROL-x in &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;You can also represent ASCII characters using their codepoint values.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Escape sequence&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\xNN&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;hexadecimal digits&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\NNN&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;octal digits in &lt;code&gt;awk&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\oNNN&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;octal digits in &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\dNNN&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;decimal digits in &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;In search section, a metacharacter specified by escape sequences will still act as the metacharacter. For example, &lt;code&gt;&#x2F;\x5eco&#x2F;&lt;&#x2F;code&gt; will match &lt;code&gt;co&lt;&#x2F;code&gt; only at the start of the string.&lt;&#x2F;li&gt;
&lt;li&gt;In replacement section,
&lt;ul&gt;
&lt;li&gt;escape sequences in &lt;code&gt;sed&lt;&#x2F;code&gt; produces literal character. For example, &lt;code&gt;s&#x2F;.*&#x2F;&amp;quot;\x26&amp;quot;&#x2F;&lt;&#x2F;code&gt; will have &lt;code&gt;&amp;quot;&amp;amp;&amp;quot;&lt;&#x2F;code&gt; as the replacement value.&lt;&#x2F;li&gt;
&lt;li&gt;escape sequences in &lt;code&gt;awk&lt;&#x2F;code&gt; is treated as metacharacter. For example, &lt;code&gt;sub(&#x2F;.*&#x2F;, &amp;quot;[&amp;amp;]&amp;quot;)&lt;&#x2F;code&gt; and &lt;code&gt;sub(&#x2F;.*&#x2F;, &amp;quot;[\x26]&amp;quot;)&lt;&#x2F;code&gt; are equivalent.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Ways to use escape sequences with &lt;code&gt;grep&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;bash&#x2F;manual&#x2F;bash.html#ANSI_002dC-Quoting&quot;&gt;ANSI-C Quoting&lt;&#x2F;a&gt; — for example, &lt;code&gt;$&#x27;a\tb&#x27;&lt;&#x2F;code&gt; will match &lt;code&gt;a&lt;&#x2F;code&gt; and &lt;code&gt;b&lt;&#x2F;code&gt; with a tab in between.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-P&lt;&#x2F;code&gt; option, see my chapter on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnugrep_ripgrep&#x2F;perl-compatible-regular-expressions.html&quot;&gt;Perl Compatible Regular Expressions&lt;&#x2F;a&gt; for more details.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;named-character-sets&quot;&gt;Named character sets&lt;a class=&quot;zola-anchor&quot; href=&quot;#named-character-sets&quot; aria-label=&quot;Anchor link for: named-character-sets&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The below table lists named sets and their equivalent character class in ASCII encoding. These can be used inside character classes only. For example, &lt;code&gt;[[:digit:]]&lt;&#x2F;code&gt; is same as &lt;code&gt;[0-9]&lt;&#x2F;code&gt; and &lt;code&gt;[[:alnum:]_]&lt;&#x2F;code&gt; is equivalent to &lt;code&gt;\w&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Named set&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:digit:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[0-9]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:lower:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[a-z]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:upper:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[A-Z]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:alpha:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[a-zA-Z]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:alnum:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[0-9a-zA-Z]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:xdigit:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[0-9a-fA-F]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:cntrl:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;control characters — first 32 ASCII characters and 127th (DEL)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:punct:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;all the punctuation characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:graph:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[:alnum:]&lt;&#x2F;code&gt; and &lt;code&gt;[:punct:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:print:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[:alnum:]&lt;&#x2F;code&gt;, &lt;code&gt;[:punct:]&lt;&#x2F;code&gt; and space&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:blank:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;space and tab characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:space:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;whitespace characters, same as &lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; From &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;grep&#x2F;manual&#x2F;grep.html#Character-Classes-and-Bracket-Expressions&quot;&gt;grep manual&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Their interpretation depends on the &lt;code&gt;LC_CTYPE&lt;&#x2F;code&gt; locale; for example, &lt;code&gt;[[:alnum:]]&lt;&#x2F;code&gt; means the character class of numbers and letters in the current locale.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;backreferences&quot;&gt;Backreferences&lt;a class=&quot;zola-anchor&quot; href=&quot;#backreferences&quot; aria-label=&quot;Anchor link for: backreferences&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;backreference, gives matched portion of Nth capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;possible values: &lt;code&gt;\1&lt;&#x2F;code&gt;, &lt;code&gt;\2&lt;&#x2F;code&gt; up to &lt;code&gt;\9&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;represents entire matched string in the replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\0&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;equivalent to &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; in &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Notes for &lt;code&gt;awk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;backreferences can be used only in replacement section, not allowed in search section.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;&#x2F;code&gt; and &lt;code&gt;gsub&lt;&#x2F;code&gt; functions allow only the &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; backreference.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;gensub&lt;&#x2F;code&gt; function allows &lt;code&gt;\N&lt;&#x2F;code&gt; form of backreference as well.
&lt;ul&gt;
&lt;li&gt;but need to use &lt;code&gt;\\0&lt;&#x2F;code&gt;, &lt;code&gt;\\1&lt;&#x2F;code&gt;, &lt;code&gt;\\2&lt;&#x2F;code&gt; etc since they are specified using string syntax.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;sed-flags&quot;&gt;sed flags&lt;a class=&quot;zola-anchor&quot; href=&quot;#sed-flags&quot; aria-label=&quot;Anchor link for: sed-flags&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This section discusses flags (also known as modifiers) that change the regexp behavior. When used with regexp addressing:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Flag&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;I&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match case insensitively&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;When used with substitution command:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Flag&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;i&lt;&#x2F;code&gt; or &lt;code&gt;I&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match case insensitively&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;g&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;replace all occurrences instead of just the first match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;a number will cause only the &lt;em&gt;N&lt;&#x2F;em&gt;th match to be replaced&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Ng&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;replace from &lt;em&gt;N&lt;&#x2F;em&gt;th match to the end&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m&lt;&#x2F;code&gt; or &lt;code&gt;M&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiline mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt; will not match the newline character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; will match every line&#x27;s start and end locations (line separator is &lt;code&gt;\n&lt;&#x2F;code&gt; by default and NUL when &lt;code&gt;-z&lt;&#x2F;code&gt; option is used)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\`&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;always match the start of string irrespective of multiline mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;always match the end of string irrespective of multiline mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Flags are not supported by &lt;code&gt;grep&lt;&#x2F;code&gt; or &lt;code&gt;awk&lt;&#x2F;code&gt;. But these equivalent&#x2F;alternative options can be used:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;&#x2F;code&gt; cli option in &lt;code&gt;grep&lt;&#x2F;code&gt; and setting &lt;code&gt;IGNORECASE&lt;&#x2F;code&gt; to non-zero value in &lt;code&gt;awk&lt;&#x2F;code&gt; will match case insensitively.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tolower&lt;&#x2F;code&gt; or &lt;code&gt;toupper&lt;&#x2F;code&gt; functions can be used in &lt;code&gt;awk&lt;&#x2F;code&gt; to convert input to single case.&lt;&#x2F;li&gt;
&lt;li&gt;you can also use character classes for small strings, for example &lt;code&gt;[cC][aA][tT]&lt;&#x2F;code&gt; will match &lt;code&gt;cat&lt;&#x2F;code&gt; case insensitively.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;&#x2F;code&gt; function in &lt;code&gt;awk&lt;&#x2F;code&gt; replaces only the first matching occurrence and &lt;code&gt;gsub&lt;&#x2F;code&gt; function is equivalent to using the &lt;code&gt;g&lt;&#x2F;code&gt; flag.&lt;&#x2F;li&gt;
&lt;li&gt;third argument of &lt;code&gt;gensub&lt;&#x2F;code&gt; function in &lt;code&gt;awk&lt;&#x2F;code&gt; supports replacing only the &lt;em&gt;N&lt;&#x2F;em&gt;th match as well as the &lt;code&gt;g&lt;&#x2F;code&gt; flag.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The behavior of &lt;code&gt;sed&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; differs for &lt;em&gt;N&lt;&#x2F;em&gt;th match if the pattern can match empty string:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a,,c,d,,f&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;[^,]*&#x2F;b&#x2F;2&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;a,b,c,d,,f
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a,,c,d,,f&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;[^,]*&#x2F;e&#x2F;5&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;a,,c,d,e,f
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a,,c,d,,f&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print gensub(&#x2F;[^,]*&#x2F;, &amp;quot;b&amp;quot;, 2)}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;ab,,c,d,,f
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a,,c,d,,f&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print gensub(&#x2F;[^,]*&#x2F;, &amp;quot;e&amp;quot;, 5)}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;a,,ce,d,,f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;sed-case-conversion&quot;&gt;sed case conversion&lt;a class=&quot;zola-anchor&quot; href=&quot;#sed-case-conversion&quot; aria-label=&quot;Anchor link for: sed-case-conversion&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Escape sequence&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\E&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;indicates end of case conversion in replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\l&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert next character to lowercase&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\u&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert next character to uppercase&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\L&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert following characters to lowercase, stops if &lt;code&gt;\U&lt;&#x2F;code&gt; or &lt;code&gt;\E&lt;&#x2F;code&gt; is found&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\U&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert following characters to uppercase, stops if &lt;code&gt;\L&lt;&#x2F;code&gt; or &lt;code&gt;\E&lt;&#x2F;code&gt; is found&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;h2 id=&quot;sed-delimiters&quot;&gt;sed delimiters&lt;a class=&quot;zola-anchor&quot; href=&quot;#sed-delimiters&quot; aria-label=&quot;Anchor link for: sed-delimiters&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&lt;&#x2F;code&gt; is idiomatically used as the delimiter.&lt;&#x2F;li&gt;
&lt;li&gt;Any character except &lt;code&gt;\&lt;&#x2F;code&gt; and newline character can also be used. For example: &lt;code&gt;s#&#x2F;home&#x2F;learnbyexample&#x2F;#~&#x2F;#&lt;&#x2F;code&gt; is same as &lt;code&gt;s&#x2F;\&#x2F;home\&#x2F;learnbyexample\&#x2F;&#x2F;~\&#x2F;&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For regexp addressing, the first delimiter has to be escaped. For example: &lt;code&gt;\;&#x2F;foo&#x2F;bar&#x2F;;p&lt;&#x2F;code&gt; is same as &lt;code&gt;&#x2F;foo\&#x2F;bar\&#x2F;&#x2F;p&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Debug woes 1: multiple substitutions on the same line</title>
		<published>2021-05-29T00:00:00+00:00</published>
		<updated>2021-05-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/debug-woes-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/debug-woes-1/</id>
		<content type="html">&lt;p&gt;While answering &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;67703405&#x2F;4082052&quot;&gt;this SO question&lt;&#x2F;a&gt;, I ran into a debug misery. It took me an embarrassing amount of time and experiments to understand why.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a simplified version of the problem. Can you spot the issue?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;a b c d
&lt;&#x2F;span&gt;&lt;span&gt;i j k l
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# Change only first two occurrences of spaces with tabs
&lt;&#x2F;span&gt;&lt;span&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;pe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$c=2; s&#x2F; &#x2F;\t&#x2F; while $c--&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;a       b       c d
&lt;&#x2F;span&gt;&lt;span&gt;i       j       k l
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# Wanted to generalize the solution to match one-or-more whitespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# But it doesn&amp;#39;t work!!!
&lt;&#x2F;span&gt;&lt;span&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;pe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$c=2; s&#x2F;\s+&#x2F;\t&#x2F; while $c--&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;a       b c d
&lt;&#x2F;span&gt;&lt;span&gt;i       j k l
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;details&gt;&lt;summary&gt;Click to view answer&lt;&#x2F;summary&gt;
The substitution works from start of the line for every iteration of the while loop. Tab is one of the whitespace characters, so after the first substitution, the tab gets matched for rest of the iterations.
&lt;&#x2F;details&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Perl one-liner articles</title>
		<published>2021-05-26T00:00:00+00:00</published>
		<updated>2021-05-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/mini/perl-oneliner-articles/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/perl-oneliner-articles/</id>
		<content type="html">&lt;p&gt;One of the feedback I got for my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;Perl one-liners ebook&lt;&#x2F;a&gt; was to showcase examples where Perl shines compared to other text processing tools.&lt;&#x2F;p&gt;
&lt;p&gt;Soon after, I got an invite to publish an article for the &lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;&quot;&gt;perldotcom&lt;&#x2F;a&gt; site. So, I wrote a two-part post highlighting use cases where Perl&#x27;s rich regular expression engine, built-in functions, extensive ecosystem and portability helps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;article&#x2F;perl-one-liners-part-1&#x2F;&quot;&gt;Perl &#x2F; Unix One-liner Cage Match, Part 1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;article&#x2F;perl-one-liners-part-2&#x2F;&quot;&gt;Perl &#x2F; Unix One-liner Cage Match, Part 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Thanks to the editors for suggestions and improvements.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Paying my bills with &#x27;free&#x27; ebooks</title>
		<published>2021-03-03T00:00:00+00:00</published>
		<updated>2023-01-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/my-book-writing-experience/" type="text/html"/>
		<id>https://learnbyexample.github.io/my-book-writing-experience/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt;: Small victories are more precious when you have nothing. Instead of burning through my savings, I&#x27;m now adding to it. The relief is priceless.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;it-is-worth-it-for-me&quot;&gt;It is worth it (for me)&lt;a class=&quot;zola-anchor&quot; href=&quot;#it-is-worth-it-for-me&quot; aria-label=&quot;Anchor link for: it-is-worth-it-for-me&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The section title is my response to this article &lt;a href=&quot;https:&#x2F;&#x2F;martin.kleppmann.com&#x2F;2020&#x2F;09&#x2F;29&#x2F;is-book-writing-worth-it.html&quot;&gt;Writing a book: is it worth it?&lt;&#x2F;a&gt; that I saw on &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24628549&quot;&gt;Hacker News&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For my unique circumstances, the decision to write ebooks has brought me financial stability, improved my mental health and gives me a sense of satisfaction. This could&#x27;ve come from any of my previous attempts to earn money, but ebooks is what worked out for me.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;book_writing.jpg&quot; alt=&quot;Book writing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Photo by &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;@bramnaus&quot;&gt;Bram Naus&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;photos&#x2F;n8Qb1ZAkK88&quot;&gt;Unsplash&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;how-it-all-started&quot;&gt;How it all started?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-it-all-started&quot; aria-label=&quot;Anchor link for: how-it-all-started&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I left my job in 2014 for various reasons. I didn&#x27;t have any plans for the future, just knew that I couldn&#x27;t work as an employee any more.&lt;&#x2F;p&gt;
&lt;p&gt;After enjoying my break, I had to try something to start earning again. I wrote an android gaming app, fantasized earning loads of money with an awesome work planner&#x2F;communicator software that never left my imaginations, tried a small stint with &lt;a href=&quot;https:&#x2F;&#x2F;krishworks.com&#x2F;&quot;&gt;a team making an educational app&lt;&#x2F;a&gt;, etc. I failed due to various reasons — didn&#x27;t try hard enough, quit early, didn&#x27;t fit my skills, wasn&#x27;t good at design&#x2F;marketing and so on. The educational app for example went on to become a success. Or perhaps, having saved enough to live out a few years without working meant I wasn&#x27;t under enough pressure to earn.&lt;&#x2F;p&gt;
&lt;p&gt;Among these failures, college workshops was the sole bread giver (and long way from supporting my modest living costs). My bachelor&#x27;s degree was in electronics and communications and I had worked in a semiconductor company. So I knew enough to teach students pursuing similar courses the basics for Linux command line, Vim, Perl, Bash scripting, etc. As reference materials, I used to provide ppt slides (when I still had a job). Now that I had loads of free time, I started expanding my knowledge. Came to know about sites like Stackoverflow&#x2F;Stackexchange&#x2F;Reddit&#x2F;etc. With newer and better materials to learn from, I created PDFs (using LibreOffice, which was pretty much the only option I knew about).&lt;&#x2F;p&gt;
&lt;p&gt;Another loss maker was getting a domain&#x2F;host to share these learning materials. Web development was too much for me and the (ugly) site didn&#x27;t get any love. In hindsight, one of the better turning points was learning about GitHub in 2016. I loved markdown&#x27;s nice output with syntax highlighting (and realized I was using it poorly in Reddit) and GitHub&#x27;s social aspect (stars, issues, etc) — plus I can use Vim! I manually converted my materials from LibreOffice to markdown (again, I didn&#x27;t know that tools like &lt;code&gt;pandoc&lt;&#x2F;code&gt; could&#x27;ve helped me). Just like any other skill, I was learning and getting better with every iteration. That was the year I learned Python (thanks to &lt;a href=&quot;https:&#x2F;&#x2F;inventwithpython.com&#x2F;&quot;&gt;&lt;strong&gt;Al Sweigart&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&#x27;s free coupon for &amp;quot;Automate the Boring Stuff with Python&amp;quot; video course) and started conducting workshops for Python instead of Perl.&lt;&#x2F;p&gt;
&lt;p&gt;Being active on Stackoverflow and Reddit, I finally became proficient at CLI one-liners (late by 8 years, since it would have significantly helped in my role as a design and test engineer). I came across articles&#x2F;books on regular expressions and one-liners. I thought — I can do that too, plus I was really liking them. Thus began my epic &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processing&quot;&gt;Command Line Text Processing&lt;&#x2F;a&gt; repo, another big turning point in my journey as an author.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;encouraging-signs&quot;&gt;Encouraging signs&lt;a class=&quot;zola-anchor&quot; href=&quot;#encouraging-signs&quot; aria-label=&quot;Anchor link for: encouraging-signs&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Over the course of ten months, I managed to complete the holy trinity of &lt;code&gt;grep&lt;&#x2F;code&gt;, &lt;code&gt;sed&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; one-liners. I promoted these tutorials on Reddit, Google+, LinkedIn and other social sites I knew at that time. The repo got hundreds of stars and more importantly, I got critical feedback. I was ecstatic, even if I was continuing to burn through my savings.&lt;&#x2F;p&gt;
&lt;p&gt;Then, I got to know about Hacker News (I think it was someone bragging about reaching front page). It took me a while to get used to Reddit, and HN was similarly alien to me. I posted a few links as a test and then I was &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=15549318&quot;&gt;brave enough to submit&lt;&#x2F;a&gt; my &lt;code&gt;awk&lt;&#x2F;code&gt; one-liners post. I was refreshing HN anxiously for about half an hour or so. It got one vote and then other submissions pushed it away from new posts tab. Disappointed, I moved on. After sometime, I was checking traffic on my GitHub repo as usual, a habit I had picked up (all kinds of points, karma, likes, etc were so enticing). I noticed a HUGE spike in traffic and star count, the likes of which I had never seen before&#x2F;since. The last time I had felt that proud of my work was during my job. This comment made a big impression on me:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;These are the best stories on HN and why i subscribed here in the first place. I have often seen awk used so many times on SO but I&#x27;ve always put it up for something later to learn. Finally today I have some basic understanding of awk and this is really great stuff! I did get by with Perl but this is definitely more handy and the example approach to teaching it makes is super easy to understand!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After the euphoria had died down (about a week I guess), I was thinking about all the various kinds of posts I could make. And I was thinking how to use the repo popularity to bring in money. Long story short, I ended up adding donate buttons to my repos. This was before GitHub sponsors was announced. I wanted my materials to be freely available, so I wasn&#x27;t even thinking about creating paid only options. Despite adding more tutorials, getting featured in &lt;a href=&quot;https:&#x2F;&#x2F;rubyweekly.com&#x2F;issues&#x2F;389&quot;&gt;rubyweekly&lt;&#x2F;a&gt; and other newsletters, social sites, etc, all I got was a single recurring donation (which ended prematurely when that platform switched payment set up).&lt;&#x2F;p&gt;
&lt;p&gt;Another turning point came when a friend of mine was authoring a book and referred me for the reviewer role. Around that time, I had been converting &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AllenDowney&#x2F;ThinkPython2&quot;&gt;Think Python&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;ThinkRubyBuild&quot;&gt;Think Ruby&lt;&#x2F;a&gt; and simultaneously working on a separate Ruby tutorial. During the book review process, I was given a list of topics and asked if I was interested in writing a book (they were impressed by my existing repos). The topics were either beyond my knowledge or out of scope, and they weren&#x27;t interested in the repos I had already put up.&lt;&#x2F;p&gt;
&lt;p&gt;My friends were always suggesting me to write a book and my reply consistently had been that I wasn&#x27;t good enough to write one (the imposter syndrome hasn&#x27;t left me even now). The book review experience, existing repos, my tryst with Think Ruby, dwindling savings, etc changed my mindset enough to try. By then I was already familiar with Leanpub, so I knew self-publishing was an option. I picked a niche topic (&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;Ruby_Regexp&#x2F;&quot;&gt;Ruby Regexp&lt;&#x2F;a&gt;), &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;learned enough &lt;code&gt;pandoc&lt;&#x2F;code&gt; to produce a PDF&lt;&#x2F;a&gt; and published it even before the book review ended. It helped that I already had material as part of the Ruby tutorial I was working on. I still had to work a lot, since tutorial description was all bullet points.&lt;&#x2F;p&gt;
&lt;p&gt;I got only a few sales, but I had landed another review (video course for the same book) and was getting paid. So, I converted &#x27;Ruby Regexp&#x27; to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&quot;&gt;Python re(gex)?&lt;&#x2F;a&gt;. I made it free for a few days and posted on Reddit, HN and other social sites. HN submission didn&#x27;t get any traction, but fortunately &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Python&#x2F;comments&#x2F;aeusdu&#x2F;i_wrote_a_book_on_python_regular_expressions_it&#x2F;&quot;&gt;Reddit submission on &#x2F;r&#x2F;Python&#x2F;&lt;&#x2F;a&gt; was a big hit — thousands of free downloads and a few paid ones enough to cover 2 months of my expenses. I should mention now that I live alone, in outskirts of an Indian city, and my modest lifestyle costs about $150 per month. What works for me won&#x27;t necessarily suit others.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;a-dip-followed-by-sustainable-momentum&quot;&gt;A dip followed by sustainable momentum&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-dip-followed-by-sustainable-momentum&quot; aria-label=&quot;Anchor link for: a-dip-followed-by-sustainable-momentum&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Encouraged by the second release, I changed my focus from updating my GitHub repos to writing books. All those repos were now a fodder for book conversion. I picked up &lt;code&gt;grep&lt;&#x2F;code&gt; first and included &lt;code&gt;ripgrep&lt;&#x2F;code&gt; as well to keep it inline with the trend. Got decent sales from &lt;em&gt;free&lt;&#x2F;em&gt; promotions. HN submission tanked at first, but got good attention when I posted again after a revision. Then I published a new version of &#x27;Python re(gex)?&#x27; with significant changes and this HN submission got good views too. But note that these HN hits weren&#x27;t anywhere close to what my &lt;code&gt;awk&lt;&#x2F;code&gt; one-liners post had received.&lt;&#x2F;p&gt;
&lt;p&gt;Writing &lt;code&gt;sed&lt;&#x2F;code&gt; took a lot out of me. Probably I was getting jaded again, juggling between workshops and ebooks. Then I had a medical issue. I didn&#x27;t even try promoting the &lt;code&gt;sed&lt;&#x2F;code&gt; book on HN. I managed to learn enough JS to write &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&quot;&gt;JavaScript regexp&lt;&#x2F;a&gt;. Wasn&#x27;t anywhere close to what I got from the Python book.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;roller_coaster.jpg&quot; alt=&quot;Roller Coaster&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Photo by &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;@davidtrana&quot;&gt;David Traña&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;photos&#x2F;mmdchg5UPtQ&quot;&gt;Unsplash&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, despite reasonable reception during free promotions, my ebooks weren&#x27;t still good enough to consistently pay my bills. Combined with workshops I was just about making my ends meet. I was losing interest and the medical issue was continuing. Still, without anything else to do, I finally started a book on &lt;code&gt;awk&lt;&#x2F;code&gt; one-liners. Things started getting better for a few months and then the pandemic hit.&lt;&#x2F;p&gt;
&lt;p&gt;Given the recent medical scare, pandemic fears and the trend of giveaways, I decided to open source my book contents. And, I made all my ebooks free to download indefinitely. Made a single bundle of all the 5 books I had published until then to make it easier to download in one shot. The reception was better than expected. Shortly after (last week of March), I published the &lt;code&gt;awk&lt;&#x2F;code&gt; book early by cutting corners like excluding exercises. All books bundle now had 6 entries. Again, the reception was much better than expected. I hadn&#x27;t made so many paid sales during a month ever before.&lt;&#x2F;p&gt;
&lt;p&gt;Encouraged by the success, I made another important decision. Instead of starting another book, I took up the task of updating all my books. I alloted a month or two for this task, but it took me more than 4 months in the end. It wasn&#x27;t that I had lot of new features to add. The feedback I had received over the past year and my own improving writing skills meant that I just couldn&#x27;t help updating the books to the best of my abilities. Somehow, lockdown and fear of the pandemic ended up improving my workflow.&lt;&#x2F;p&gt;
&lt;p&gt;Workshops weren&#x27;t going to come my way anytime soon, but ebook sales for about 6 months averaged $200+ per month. For the first time since leaving my job, I was saving money!!! During this period all my books were free to download, in addition to the markdown source being available from GitHub repos. I even managed to create EPUB and web versions for my ebooks. The web version generated using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;mdBook&quot;&gt;mdBook&lt;&#x2F;a&gt; was much better than my attempts with wordpress all those years ago, but to be fair I hadn&#x27;t known enough about formatting for coding books.&lt;&#x2F;p&gt;
&lt;p&gt;After finishing this marathon revision task, I reverted PDF&#x2F;EPUB versions to be a paid option again. Since then, I&#x27;ve managed to write three more books. I did Perl and Ruby one-liners (as part of the ongoing conversion of the CLI text processing repo) despite knowing sales won&#x27;t be good enough to keep up the momentum. Then I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;&quot;&gt;Python intro&lt;&#x2F;a&gt; book for those already familiar with programming basics. Published last month, sales are much lesser than I expected. Given Python is now 30 years old and there&#x27;s no shortage of Python books for beginners, I shouldn&#x27;t be surprised though. I&#x27;m probably grumpy because it took a month more than expected even though I already had decent material from my workshops. Anyway, my main motivation was to improve my Python knowledge and it did serve that purpose. As a bonus, I just got started with workshops again, conducted online (a first for me). The book is already proving useful as a handy reference for me as well as the students.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-criticism&quot;&gt;Feedback and Criticism&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-criticism&quot; aria-label=&quot;Anchor link for: feedback-and-criticism&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s some of the feedback I&#x27;ve received over the past two years.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Grammatical mistakes. Missing &lt;code&gt;a&lt;&#x2F;code&gt;, &lt;code&gt;an&lt;&#x2F;code&gt; and &lt;code&gt;the&lt;&#x2F;code&gt; articles were particularly jarring for the readers. If you couldn&#x27;t tell from reading &lt;em&gt;this&lt;&#x2F;em&gt; article (heh) that English isn&#x27;t my native language, I&#x27;ll consider that I&#x27;ve improved a lot.&lt;&#x2F;li&gt;
&lt;li&gt;Some readers stated that they didn&#x27;t bother checking out my books because the covers are so bad. I finally got a cover done by an artist for the &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;&quot;&gt;Python intro book&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For the regexp books, a few readers said my introductions were light on content. So during the marathon book updates I did last year, I managed to add more details. I feel there&#x27;s still plenty of room for improvement.&lt;&#x2F;li&gt;
&lt;li&gt;My comprehension is kinda average and it works better whenever I manage to create code snippets to prove or disprove my understanding. So, my books are heavily example oriented. I&#x27;ve received feedback that there are too many examples, explanations aren&#x27;t sufficient, etc. I&#x27;m trying to improve on this count, but I doubt I can change my natural writing style.&lt;&#x2F;li&gt;
&lt;li&gt;A few readers wanted more exercises, which I was happy to oblige. It took me a while to accept that I should provide solutions as well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I did get a few negative feedback (ones I consider weren&#x27;t constructive in nature). One such feedback affected me a lot, despite the encouraging sales for the second book. Over time, I&#x27;ve adapted but I&#x27;m still afraid of seeing one whenever I promote my books.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;self-publishing-experience&quot;&gt;Self publishing experience&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-publishing-experience&quot; aria-label=&quot;Anchor link for: self-publishing-experience&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t have a personal experience with traditional publishing (other than the two review opportunities). After the initial success of &#x27;Python re(gex)?&#x27; book, I was happy to stay being self published. When there was a dip, I did consider it would be nice to have the backing of a traditional publisher and a chance to improve the contents of my books.&lt;&#x2F;p&gt;
&lt;p&gt;What I like about self published:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I can give away free copies whenever I want, change pricing, share the source code, put up free web version of the books, etc.
&lt;ul&gt;
&lt;li&gt;I&#x27;m aware of a few publishers allowing authors to put up free web copies, but it isn&#x27;t universal.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;I can push updates easily and inform the readers as well.&lt;&#x2F;li&gt;
&lt;li&gt;No deadlines, other than self imposed ones. This is both good and bad. The good thing is that I can take my time. The bad thing is that the reduced pressure leads to longer schedule. I spend a lot of time on social media, reading fiction, watching entertainment, etc. The lockdown marathon did improve my average working hours, but there&#x27;s still a lot of room for improvement.&lt;&#x2F;li&gt;
&lt;li&gt;I am not restricted by guidelines set by a publisher regarding chapter structure, images, exercises, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What I feel would improve with traditional publishing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cover image&lt;&#x2F;li&gt;
&lt;li&gt;PDF&#x2F;EPUB quality&lt;&#x2F;li&gt;
&lt;li&gt;Content quality, especially grammar&lt;&#x2F;li&gt;
&lt;li&gt;Audience reach&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Not sure how my earnings would be affected. On the one hand, I get minimum 80% on book sales. On the other hand, I&#x27;d probably reach a wider audience with traditional publishing. I did receive a few offers when my promotional posts were trending. One of the offer (for &#x27;Python re(gex)?&#x27; ebook) had a joining bonus and initial advance — both combined was less than what I had already earned. But if they had extended the offer for other books as well, it would&#x27;ve been a much more tempting deal.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, I&#x27;m happy with status quo. Always free web versions and free PDF&#x2F;EPUB promotional sales kinda solves my donation problem before I started selling ebooks — I get paid and readers have a way to get the materials for free. I&#x27;m also inspired by FOSS products I use and authors like Al Sweigart and Allen B. Downey who give away quality learning resources for free.&lt;&#x2F;p&gt;
&lt;p&gt;That said, I wish I could improve my marketing skills. Or, somehow someone likes my books so much that their review attracts significant attention and my sales increase as a result. I&#x27;ve also considered trying out affiliates, but haven&#x27;t even created a list of people to contact yet. I don&#x27;t have analytics set up on Leanpub, my blog, web versions of my books, etc. Based on analytics that is available by default on GitHub and Gumroad, I do see a few links from schools and universities. I wish they would contact me, so that I can help if needed and improve my book contents based on their experiences.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;leanpub-vs-gumroad&quot;&gt;Leanpub vs Gumroad&lt;a class=&quot;zola-anchor&quot; href=&quot;#leanpub-vs-gumroad&quot; aria-label=&quot;Anchor link for: leanpub-vs-gumroad&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I started with Leanpub since I had seen a few posts from self published authors using this platform. By the time I had published the second book I got to know about Gumroad and was attracted by the pricing&#x2F;payout structure. From then on, I have published on both platforms.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what I like most about both these platforms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I can change pricing (including free option) and book contents any number of times&lt;&#x2F;li&gt;
&lt;li&gt;I can allow users to pay &lt;em&gt;more&lt;&#x2F;em&gt; than the product price, which is how I get paid during &lt;em&gt;free&lt;&#x2F;em&gt; promotional sales&lt;&#x2F;li&gt;
&lt;li&gt;I can inform readers whenever I update my books&lt;&#x2F;li&gt;
&lt;li&gt;I can create bundles&lt;&#x2F;li&gt;
&lt;li&gt;They handle collection of VAT (and other such fees)&lt;&#x2F;li&gt;
&lt;li&gt;Their payout options work for me in India&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s some differences and &lt;em&gt;my&lt;&#x2F;em&gt; opinions on some of their features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Gumroad&#x27;s pricing structure is better. If you have a following like &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;b0rk&quot;&gt;Julia Evans&lt;&#x2F;a&gt;, pricing would make a huge difference&lt;&#x2F;li&gt;
&lt;li&gt;Gumroad gives analytics for free&lt;&#x2F;li&gt;
&lt;li&gt;Gumroad&#x27;s email notification is opt-out compared to opt-in for Leanpub. Opt-in is better for readers, but in my experience less than 10% sign up and thus miss out when I want to send them book updates&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub payout delay is 45-75 days, Gumroad is 7-14 days (or instant in some cases)&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub&#x27;s bundle feature is better since it doesn&#x27;t require a new cover and files are automatically picked based on the links provided. In Gumroad, it is essentially a new product, but it does allow to manually pick files from existing ones. Also, Leanpub allows bundling with another author (which I have used and given me decent sales)&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub&#x27;s product page and UI is better. The sliding scale (along with information on author&#x27;s share) to pick a price is clearer than Gumroad&#x27;s manual price entry. And I don&#x27;t like that Gumroad places the minimum price information away from the box where the user enters a price. On Leanpub, all of these are shown together and reduces confusion&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub&#x27;s product page has always ranked higher in search results in my experience&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub&#x27;s 45-day Guarantee and Sample chapters as part of the product page makes it easier for readers to take a risk&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub has &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;newsletters&quot;&gt;weekly&#x2F;monthly sale newsletters&lt;&#x2F;a&gt; in which you could get featured. This has brought me significant earnings in the past few months. If you enable an option, Gumroad would promote your product too (for 10% extra fee) but this has given me very few sales compared to Leanpub&#x27;s newsletter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;leanpub_price_ui.png&quot; alt=&quot;Pricing UI on Leanpub&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Pricing UI on Leanpub&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;gumroad_price_ui.png&quot; alt=&quot;Pricing UI on Gumroad&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Pricing UI on Gumroad&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;pandoc-and-mdbook&quot;&gt;pandoc and mdbook&lt;a class=&quot;zola-anchor&quot; href=&quot;#pandoc-and-mdbook&quot; aria-label=&quot;Anchor link for: pandoc-and-mdbook&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I picked &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jgm&#x2F;pandoc&#x2F;&quot;&gt;pandoc&lt;&#x2F;a&gt; to generate PDF from GitHub style markdown, as it seemed the most popular tool for this purpose. The default output is good enough, but I wanted to customize a lot of things. With help from documentation and various Stackoverflow&#x2F;Stackexchange threads, I was able to generate an output to my liking. I didn&#x27;t know about templates though, otherwise I could have researched about them and re-used solutions from others. I wrote a blog post about my learnings, visit &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;Customizing pandoc to generate beautiful pdf and epub from markdown&lt;&#x2F;a&gt; if you are interested.&lt;&#x2F;p&gt;
&lt;p&gt;Some readers wanted EPUB versions too. I thought it made sense for reading from mobile, but my own experience with this format on desktop was quite disappointing. Only later did I learn that I wasn&#x27;t using a proper EPUB reader for technical books. Which is why I didn&#x27;t realize that the default output from &lt;code&gt;pandoc&lt;&#x2F;code&gt; for EPUB was also good enough. During the revision marathon, I finally created EPUB versions too. I&#x27;d say I am still a beginner, but I did learn enough CSS and LaTeX to customize EPUB and PDF generation with &lt;code&gt;pandoc&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;pandoc&lt;&#x2F;code&gt; has its own enhanced version of markdown, which has a lot of nifty features for ebooks. But I chose to stick with GitHub style markdown. And it came in handy when I wanted to re-use book material for blog posts, generating web versions of the book with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;mdBook&quot;&gt;mdbook&lt;&#x2F;a&gt; and so on. After I had decided to open source my books, I also wanted to make a web version that feels like a book instead of just the single page markdown source from the GitHub repos. I would&#x27;ve probably used Gitbook if they hadn&#x27;t moved away from the legacy version. I came across &lt;code&gt;mdbook&lt;&#x2F;code&gt; as an alternate for Gitbook and I&#x27;m glad I did.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;future-plans&quot;&gt;Future plans&lt;a class=&quot;zola-anchor&quot; href=&quot;#future-plans&quot; aria-label=&quot;Anchor link for: future-plans&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have certainly improved a lot as a writer since I first published my book in late 2018. But after 9 books, I&#x27;m finding it a lot more difficult to motivate myself to keep writing. See also &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20212090&quot;&gt;HN discussion: Writing a book, still the same pain 15 years later&lt;&#x2F;a&gt; for another example.&lt;&#x2F;p&gt;
&lt;p&gt;I have plans to publish at least one more book in 2021 and revise my existing books (not comprehensive, but a few items have cropped up). I hope the current momentum can extend enough to cover my expenses for this year at least. Beyond that, I think I will write more books, but I&#x27;ll have to mix it up with other things (such as video courses, interactive courses, freelancing, etc) to keep myself motivated. I just hope that this time I will be able to pick an alternative quickly.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;a class=&quot;zola-anchor&quot; href=&quot;#resources&quot; aria-label=&quot;Anchor link for: resources&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been asked a few times regarding my experiences as an author (especially self publishing) and resources I&#x27;ve used. That was my primary intention in writing this blog post. I thought I&#x27;d add a bit of background as well, not the multi-section essay I ended up with. Anyway, here&#x27;s some links that I&#x27;ve bookmarked related to book writing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Authors sharing their experiences&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jeffgeerling.com&#x2F;blog&#x2F;2020&#x2F;self-publishing-and-2nd-edition-ansible-devops&quot;&gt;Jeff Geerling&#x27;s self-publishing experience&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;#on-writing-comics---zines&quot;&gt;Julia Evans&#x27;s articles on writing comics&#x2F;zines&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2020&#x2F;10&#x2F;28&#x2F;a-few-things-i-ve-learned-about-email-marketing&#x2F;&quot;&gt;Julia Evans&#x27;s email marketing experience&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.swyx.io&#x2F;marketing-yourself&#x2F;&quot;&gt;Shawn Wang&#x27;s article: How to Market Yourself&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;andregarzia.com&#x2F;2021&#x2F;04&#x2F;writing-a-technical-book.html&quot;&gt;Andre Alves Garzia&#x27;s article: Writing a Technical Book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23818859&quot;&gt;HN discussion: Writing a software book and making over $100k&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Writing skills&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20070558&quot;&gt;HN discussion: Tips for Writing a Technical Book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=22283919&quot;&gt;HN discussion: Learning technical writing using the engineering method&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23281568&quot;&gt;HN discussion: How to write a programming book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jenniferlynparsons&#x2F;awesome-writing&quot;&gt;awesome-writing: list of information to help developers write better, kinder, more helpful documentation and learning materials&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joshuacc&#x2F;prose-for-programmers&quot;&gt;A book to help software developers write better prose (WIP)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Tools and Miscellaneous&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;Customizing pandoc to generate beautiful pdf and epub from markdown&lt;&#x2F;a&gt; — my own blog post, includes resource links for similar articles and tools other than &lt;code&gt;pandoc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LisaDziuba&#x2F;Awesome-Design-Tools&quot;&gt;List of awesome design tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sw-yx&#x2F;launch-cheatsheet&#x2F;&quot;&gt;launch-cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;a-parting-advice&quot;&gt;A parting advice&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-parting-advice&quot; aria-label=&quot;Anchor link for: a-parting-advice&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Don&#x27;t quit easily!&lt;&#x2F;p&gt;
&lt;br&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Multiline fixed string search and replace with CLI tools</title>
		<published>2020-11-27T00:00:00+00:00</published>
		<updated>2023-01-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/multiline-search-and-replace/" type="text/html"/>
		<id>https://learnbyexample.github.io/multiline-search-and-replace/</id>
		<content type="html">&lt;p&gt;This post shows how you can use &lt;code&gt;ripgrep&lt;&#x2F;code&gt;, &lt;code&gt;perl&lt;&#x2F;code&gt; and &lt;code&gt;sd&lt;&#x2F;code&gt; commands to perform multiline fixed string search and replace operations from the command line. Solution with &lt;code&gt;GNU sed&lt;&#x2F;code&gt; is also discussed, along with its limitations.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;fixed-string-matching&quot;&gt;Fixed string matching&lt;a class=&quot;zola-anchor&quot; href=&quot;#fixed-string-matching&quot; aria-label=&quot;Anchor link for: fixed-string-matching&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The below sample input file will be used in the examples in this post.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;This is a multiline
&lt;&#x2F;span&gt;&lt;span&gt;sample input with lots
&lt;&#x2F;span&gt;&lt;span&gt;of special characters
&lt;&#x2F;span&gt;&lt;span&gt;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;span&gt;This post shows how
&lt;&#x2F;span&gt;&lt;span&gt;you can do fixed
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ripgrep&quot;&gt;ripgrep&lt;a class=&quot;zola-anchor&quot; href=&quot;#ripgrep&quot; aria-label=&quot;Anchor link for: ripgrep&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt; supports &lt;code&gt;-U&lt;&#x2F;code&gt; option to allow multiline matching. Use &lt;code&gt;-F&lt;&#x2F;code&gt; option to turn off regexp matching, i.e. treat the search string literally. In &lt;code&gt;bash&lt;&#x2F;code&gt; shell (and likely most other shells), you can press enter key to insert literal newline character for quoted values. When you do so, the next line starts with &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; and a space character. This isn&#x27;t shown in the examples below to make it easier to copy-paste the commands.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rg -UF &amp;#39;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;4:like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;5:^ + ? \ and &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# -l option shows only filename instead of all the matching lines
&lt;&#x2F;span&gt;&lt;span&gt;$ rg -lUF &amp;#39;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll have an issue if your search string itself contains single quote characters. Avoid using double quotes as a workaround, as that has its own set of special characters. You can work around by concatenating multiple strings next to each other, along with escaped single quote characters as needed.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;# -N option disables line number prefix
&lt;&#x2F;span&gt;&lt;span&gt;$ rg -NUF &amp;#39;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and &amp;#39;\&amp;#39;&amp;#39; and&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If your search string starts with &lt;code&gt;-&lt;&#x2F;code&gt; character, you&#x27;ll have to use &lt;code&gt;--&lt;&#x2F;code&gt; before the search argument.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rg -NUF -- &amp;#39;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;perl&quot;&gt;perl&lt;a class=&quot;zola-anchor&quot; href=&quot;#perl&quot; aria-label=&quot;Anchor link for: perl&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can use &lt;code&gt;-0777&lt;&#x2F;code&gt; option with &lt;code&gt;perl&lt;&#x2F;code&gt; to slurp the entire input as a single string. Another advantage with &lt;code&gt;perl&lt;&#x2F;code&gt; is that you can use files to pass the search and replace strings. Thus, you don&#x27;t have to worry about any character that may clash with shell metacharacters. See my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_perl_oneliners&#x2F;&quot;&gt;Perl one-liners cookbook&lt;&#x2F;a&gt; if you are not familiar with using &lt;code&gt;perl&lt;&#x2F;code&gt; from the command line.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat search_1.txt
&lt;&#x2F;span&gt;&lt;span&gt;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# display filename if the given search string matches
&lt;&#x2F;span&gt;&lt;span&gt;$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=$_ :
&lt;&#x2F;span&gt;&lt;span&gt;                  &#x2F;\Q$s&#x2F; &amp;amp;&amp;amp; say $ARGV&amp;#39; search_1.txt ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, you&#x27;ll have to make sure the file doesn&#x27;t end with a newline if you are providing partial lines for searching, or take care of it within the &lt;code&gt;perl&lt;&#x2F;code&gt; script.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat search_2.txt
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# no output because there&amp;#39;s a newline at the end of search_2.txt file
&lt;&#x2F;span&gt;&lt;span&gt;$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=$_ :
&lt;&#x2F;span&gt;&lt;span&gt;                  &#x2F;\Q$s&#x2F; &amp;amp;&amp;amp; say $ARGV&amp;#39; search_2.txt ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# this will remove newline at the end of file before assigning to $s
&lt;&#x2F;span&gt;&lt;span&gt;$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=s&#x2F;\n\z&#x2F;&#x2F;r :
&lt;&#x2F;span&gt;&lt;span&gt;                  &#x2F;\Q$s&#x2F; &amp;amp;&amp;amp; say $ARGV&amp;#39; search_2.txt ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By default, &lt;code&gt;ripgrep&lt;&#x2F;code&gt; gives entire matching lines. To get rest of the line with &lt;code&gt;perl&lt;&#x2F;code&gt;, you&#x27;ll have to explicitly add a pattern around the search string.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;# $&amp;amp; variable has the entire matching portion
&lt;&#x2F;span&gt;&lt;span&gt;$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=s&#x2F;\n\z&#x2F;&#x2F;r :
&lt;&#x2F;span&gt;&lt;span&gt;                  &#x2F;\Q$s&#x2F; &amp;amp;&amp;amp; say $&amp;amp;&amp;#39; search_2.txt ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# use &amp;#39;say $&amp;amp; while &#x2F;.*\Q$s\E.*&#x2F;g&amp;#39; if there are multiple matches
&lt;&#x2F;span&gt;&lt;span&gt;$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=s&#x2F;\n\z&#x2F;&#x2F;r :
&lt;&#x2F;span&gt;&lt;span&gt;                  &#x2F;.*\Q$s\E.*&#x2F; &amp;amp;&amp;amp; say $&amp;amp;&amp;#39; search_2.txt ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;fixed-string-substitution&quot;&gt;Fixed string substitution&lt;a class=&quot;zola-anchor&quot; href=&quot;#fixed-string-substitution&quot; aria-label=&quot;Anchor link for: fixed-string-substitution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ripgrep-1&quot;&gt;ripgrep&lt;a class=&quot;zola-anchor&quot; href=&quot;#ripgrep-1&quot; aria-label=&quot;Anchor link for: ripgrep-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;ripgrep&lt;&#x2F;code&gt; also supports replacing matched string with something else using the &lt;code&gt;-r&lt;&#x2F;code&gt; option. By default, you&#x27;ll see only matched lines in the output. Use &lt;code&gt;--passthru&lt;&#x2F;code&gt; option to display all the input lines, even if they do not match the given search string. See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;substitution-with-ripgrep&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; for more details about the &lt;code&gt;-r&lt;&#x2F;code&gt; option and various ways you can use it for substitution requirements.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rg --passthru -NUF &amp;#39;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and&amp;#39; -r &amp;#39;====
&lt;&#x2F;span&gt;&lt;span&gt;----
&lt;&#x2F;span&gt;&lt;span&gt;====&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;This is a multiline
&lt;&#x2F;span&gt;&lt;span&gt;sample input with lots
&lt;&#x2F;span&gt;&lt;span&gt;of special characters
&lt;&#x2F;span&gt;&lt;span&gt;====
&lt;&#x2F;span&gt;&lt;span&gt;----
&lt;&#x2F;span&gt;&lt;span&gt;==== &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;span&gt;This post shows how
&lt;&#x2F;span&gt;&lt;span&gt;you can do fixed
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Apart from having to workaround single quote, you&#x27;ll have to use &lt;code&gt;$$&lt;&#x2F;code&gt; instead of &lt;code&gt;$&lt;&#x2F;code&gt; as it is used for backreferences in the replacement section.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ echo &amp;#39;sample input&amp;#39; | rg --passthru -F &amp;#39;in&amp;#39; -r &amp;#39;$a&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;sample put
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &amp;#39;sample input&amp;#39; | rg --passthru -F &amp;#39;in&amp;#39; -r &amp;#39;$$a&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;sample $aput
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;perl-1&quot;&gt;perl&lt;a class=&quot;zola-anchor&quot; href=&quot;#perl-1&quot; aria-label=&quot;Anchor link for: perl-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;With &lt;code&gt;perl&lt;&#x2F;code&gt;, you can use files for both search and replace strings. And, you can easily choose to replace first or all occurrences, unlike &lt;code&gt;ripgrep&lt;&#x2F;code&gt; where it always replaces all the matches.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat replace.txt
&lt;&#x2F;span&gt;&lt;span&gt;---------------------
&lt;&#x2F;span&gt;&lt;span&gt;$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
&lt;&#x2F;span&gt;&lt;span&gt;=====================
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ perl -0777 -ne &amp;#39;$#ARGV==1 ? $s=$_ : $#ARGV==0 ? $r=$_ :
&lt;&#x2F;span&gt;&lt;span&gt;                  print s&#x2F;\Q$s&#x2F;$r&#x2F;gr&amp;#39; search_1.txt replace.txt ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;This is a multiline
&lt;&#x2F;span&gt;&lt;span&gt;sample input with lots
&lt;&#x2F;span&gt;&lt;span&gt;of special characters
&lt;&#x2F;span&gt;&lt;span&gt;---------------------
&lt;&#x2F;span&gt;&lt;span&gt;$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
&lt;&#x2F;span&gt;&lt;span&gt;=====================
&lt;&#x2F;span&gt;&lt;span&gt;This post shows how
&lt;&#x2F;span&gt;&lt;span&gt;you can do fixed
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As seen before, you&#x27;ll have to remove newline from search string for partial line matching.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;# use $r=s&#x2F;\n\z&#x2F;&#x2F;r to avoid trailing newline from replace.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ perl -0777 -ne &amp;#39;$#ARGV==1 ? $s=s&#x2F;\n\z&#x2F;&#x2F;r : $#ARGV==0 ? $r=$_ :
&lt;&#x2F;span&gt;&lt;span&gt;                  print s&#x2F;\Q$s&#x2F;$r&#x2F;gr&amp;#39; search_2.txt replace.txt ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;This is a multiline
&lt;&#x2F;span&gt;&lt;span&gt;sample input with lots
&lt;&#x2F;span&gt;&lt;span&gt;of special characters
&lt;&#x2F;span&gt;&lt;span&gt;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;span&gt;This post shows how
&lt;&#x2F;span&gt;&lt;span&gt;you can do fixed
&lt;&#x2F;span&gt;&lt;span&gt;---------------------
&lt;&#x2F;span&gt;&lt;span&gt;$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
&lt;&#x2F;span&gt;&lt;span&gt;=====================
&lt;&#x2F;span&gt;&lt;span&gt; with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;sd&quot;&gt;sd&lt;a class=&quot;zola-anchor&quot; href=&quot;#sd&quot; aria-label=&quot;Anchor link for: sd&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chmln&#x2F;sd&quot;&gt;sd&lt;&#x2F;a&gt; supports fixed string and Rust regexp based substitution. Unlike &lt;code&gt;ripgrep&lt;&#x2F;code&gt;, &lt;code&gt;-s&lt;&#x2F;code&gt; option for fixed string will apply to both search and replacement sections. &lt;code&gt;sd&lt;&#x2F;code&gt; does in-place editing for file inputs by default, you can use &lt;code&gt;-p&lt;&#x2F;code&gt; to preview results on the terminal. Multiline matching is automatically performed by default.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ echo &amp;#39;sample input&amp;#39; | sd -s &amp;#39;in&amp;#39; &amp;#39;$a&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;sample $aput
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ sd -ps &amp;#39;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and&amp;#39; &amp;#39;====
&lt;&#x2F;span&gt;&lt;span&gt;----
&lt;&#x2F;span&gt;&lt;span&gt;====&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;This is a multiline
&lt;&#x2F;span&gt;&lt;span&gt;sample input with lots
&lt;&#x2F;span&gt;&lt;span&gt;of special characters
&lt;&#x2F;span&gt;&lt;span&gt;====
&lt;&#x2F;span&gt;&lt;span&gt;----
&lt;&#x2F;span&gt;&lt;span&gt;==== &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;span&gt;This post shows how
&lt;&#x2F;span&gt;&lt;span&gt;you can do fixed
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;saving-file-contents-to-a-variable&quot;&gt;Saving file contents to a variable&lt;a class=&quot;zola-anchor&quot; href=&quot;#saving-file-contents-to-a-variable&quot; aria-label=&quot;Anchor link for: saving-file-contents-to-a-variable&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Trailing newlines and ASCII NUL characters will be lost if you wish to save contents of a file as &lt;code&gt;bash&lt;&#x2F;code&gt; variables using &lt;code&gt;var=$(&amp;lt; filename)&lt;&#x2F;code&gt; command. See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;22607352&#x2F;4082052&quot;&gt;stackoverflow: pitfalls of reading file into shell variable&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ printf &amp;#39;\na\0b\n123\n\n\n\n\n\n\n\n&amp;#39; &amp;gt; t1
&lt;&#x2F;span&gt;&lt;span&gt;$ a=$(&amp;lt; t1)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# NUL character is lost after the assignment
&lt;&#x2F;span&gt;&lt;span&gt;# all the trailing newlines are lost as well
&lt;&#x2F;span&gt;&lt;span&gt;$ printf &amp;#39;%b&amp;#39; &amp;quot;$a&amp;quot; | cat -A
&lt;&#x2F;span&gt;&lt;span&gt;$
&lt;&#x2F;span&gt;&lt;span&gt;ab$
&lt;&#x2F;span&gt;&lt;span&gt;123
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ripgrep-2&quot;&gt;ripgrep&lt;a class=&quot;zola-anchor&quot; href=&quot;#ripgrep-2&quot; aria-label=&quot;Anchor link for: ripgrep-2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If your search string doesn&#x27;t have multiple trailing newlines or ASCII NUL characters, then you can save file contents to variables and then pass them to &lt;code&gt;ripgrep&lt;&#x2F;code&gt;. Single trailing newline will not normally cause an issue for searching operations as &lt;code&gt;ripgrep&lt;&#x2F;code&gt; will append a newline while displaying results anyway. If you want to make sure input file also contains the trailing newline, then you can manually concatenate a newline character to the search string.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ s=$(&amp;lt; search_1.txt)
&lt;&#x2F;span&gt;&lt;span&gt;# use &amp;quot;$s&amp;quot;$&amp;#39;\n&amp;#39; if you want to match trailing newline as well
&lt;&#x2F;span&gt;&lt;span&gt;$ rg -NUF &amp;quot;$s&amp;quot; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# use -- if the search string starts with - character
&lt;&#x2F;span&gt;&lt;span&gt;$ s=$(&amp;lt; search_2.txt)
&lt;&#x2F;span&gt;&lt;span&gt;$ rg -NUF -- &amp;quot;$s&amp;quot; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For substitution operations, you&#x27;ll have to preprocess the replacement file to replace &lt;code&gt;$&lt;&#x2F;code&gt; with &lt;code&gt;$$&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ s=$(&amp;lt; search_1.txt)
&lt;&#x2F;span&gt;&lt;span&gt;$ r=$(sed &amp;#39;s&#x2F;\$&#x2F;$$&#x2F;g&amp;#39; replace.txt)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# here, removal of trailing newline doesn&amp;#39;t cause an issue,
&lt;&#x2F;span&gt;&lt;span&gt;# as it evens out between search and replace strings
&lt;&#x2F;span&gt;&lt;span&gt;$ rg --passthru -NUF &amp;quot;$s&amp;quot; -r &amp;quot;$r&amp;quot; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;This is a multiline
&lt;&#x2F;span&gt;&lt;span&gt;sample input with lots
&lt;&#x2F;span&gt;&lt;span&gt;of special characters
&lt;&#x2F;span&gt;&lt;span&gt;---------------------
&lt;&#x2F;span&gt;&lt;span&gt;$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
&lt;&#x2F;span&gt;&lt;span&gt;=====================
&lt;&#x2F;span&gt;&lt;span&gt;This post shows how
&lt;&#x2F;span&gt;&lt;span&gt;you can do fixed
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, partial line has to be matched. So, &lt;code&gt;$()&lt;&#x2F;code&gt; assignment works well for the search string. If the trailing newline of the replacement string isn&#x27;t needed, then &lt;code&gt;$()&lt;&#x2F;code&gt; assignment again is good enough. Otherwise, you can modify the replacement string as &lt;code&gt;-r &amp;quot;$r&amp;quot;$&#x27;\n&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;$ s=$(&amp;lt; search_2.txt)
&lt;&#x2F;span&gt;&lt;span&gt;$ r=$(sed &amp;#39;s&#x2F;\$&#x2F;$$&#x2F;g&amp;#39; replace.txt)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ rg --passthru -NUF -r &amp;quot;$r&amp;quot; -- &amp;quot;$s&amp;quot; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;This is a multiline
&lt;&#x2F;span&gt;&lt;span&gt;sample input with lots
&lt;&#x2F;span&gt;&lt;span&gt;of special characters
&lt;&#x2F;span&gt;&lt;span&gt;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;span&gt;This post shows how
&lt;&#x2F;span&gt;&lt;span&gt;you can do fixed
&lt;&#x2F;span&gt;&lt;span&gt;---------------------
&lt;&#x2F;span&gt;&lt;span&gt;$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
&lt;&#x2F;span&gt;&lt;span&gt;===================== with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;sd-1&quot;&gt;sd&lt;a class=&quot;zola-anchor&quot; href=&quot;#sd-1&quot; aria-label=&quot;Anchor link for: sd-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned before, &lt;code&gt;-s&lt;&#x2F;code&gt; option for &lt;code&gt;sd&lt;&#x2F;code&gt; applies to both search and replacement sections. So, the usage is lot simpler compared to &lt;code&gt;ripgrep&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;# -- is needed here because replace.txt starts with - character
&lt;&#x2F;span&gt;&lt;span&gt;$ sd -ps -- &amp;quot;$(&amp;lt; search_1.txt)&amp;quot; &amp;quot;$(&amp;lt; replace.txt)&amp;quot; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;This is a multiline
&lt;&#x2F;span&gt;&lt;span&gt;sample input with lots
&lt;&#x2F;span&gt;&lt;span&gt;of special characters
&lt;&#x2F;span&gt;&lt;span&gt;---------------------
&lt;&#x2F;span&gt;&lt;span&gt;$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
&lt;&#x2F;span&gt;&lt;span&gt;=====================
&lt;&#x2F;span&gt;&lt;span&gt;This post shows how
&lt;&#x2F;span&gt;&lt;span&gt;you can do fixed
&lt;&#x2F;span&gt;&lt;span&gt;-string multiline
&lt;&#x2F;span&gt;&lt;span&gt;search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;gnu-sed&quot;&gt;GNU sed&lt;a class=&quot;zola-anchor&quot; href=&quot;#gnu-sed&quot; aria-label=&quot;Anchor link for: gnu-sed&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To follow a similar approach with &lt;code&gt;GNU sed&lt;&#x2F;code&gt;, you&#x27;ll have to preprocess the strings to escape metacharacters. Assuming input doesn&#x27;t have ASCII NUL characters, you can use &lt;code&gt;-z&lt;&#x2F;code&gt; option to slurp entire input as a single string.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example for multiline search.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;# escape all BRE metacharacters
&lt;&#x2F;span&gt;&lt;span&gt;# replace literal newlines with \n
&lt;&#x2F;span&gt;&lt;span&gt;$ s=$(sed -z &amp;#39;s#[[^$*.\&#x2F;]#\\&amp;amp;#g; s&#x2F;\n&#x2F;\\n&#x2F;g&amp;#39; search_1.txt)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# since newlines are replaced with \n,
&lt;&#x2F;span&gt;&lt;span&gt;# trailing newlines will be preserved here
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &amp;quot;$s&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;like \. () \* \[] \$ {}\n\^ + ? \\ and &amp;#39; and so on\.\n
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# display filename if input matches the given multiline search string
&lt;&#x2F;span&gt;&lt;span&gt;# tr is used to change NUL character after filename to newline
&lt;&#x2F;span&gt;&lt;span&gt;$ sed -nz &amp;#39;&#x2F;&amp;#39;&amp;quot;$s&amp;quot;&amp;#39;&#x2F;F&amp;#39; ip.txt | tr &amp;#39;\0&amp;#39; &amp;#39;\n&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s an example for multiline substitution.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;# last newline is removed here to allow partial line matching
&lt;&#x2F;span&gt;&lt;span&gt;$ s=$(sed -z &amp;#39;s#[[^$*.\&#x2F;]#\\&amp;amp;#g; s&#x2F;\n$&#x2F;&#x2F;; s&#x2F;\n&#x2F;\\n&#x2F;g&amp;#39; search_2.txt)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# escape all replacement section metacharacters
&lt;&#x2F;span&gt;&lt;span&gt;# and prefix \ character to literal newlines, except the last line
&lt;&#x2F;span&gt;&lt;span&gt;$ r=$(sed &amp;#39;s:[\\&#x2F;&amp;amp;]:\\&amp;amp;:g; $!s&#x2F;$&#x2F;\\&#x2F;&amp;#39; replace.txt)
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &amp;quot;$r&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;---------------------\
&lt;&#x2F;span&gt;&lt;span&gt;$\&amp;amp; = $1 + $2 \&#x2F; 3 \\ 4\
&lt;&#x2F;span&gt;&lt;span&gt;=====================
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# if you need trailing newline from replace.txt,
&lt;&#x2F;span&gt;&lt;span&gt;# use sed -z &amp;#39;s&#x2F;&amp;#39;&amp;quot;$s&amp;quot;&amp;#39;&#x2F;&amp;#39;&amp;quot;$r&amp;quot;&amp;#39;\n&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ sed -z &amp;#39;s&#x2F;&amp;#39;&amp;quot;$s&amp;quot;&amp;#39;&#x2F;&amp;#39;&amp;quot;$r&amp;quot;&amp;#39;&#x2F;g&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;This is a multiline
&lt;&#x2F;span&gt;&lt;span&gt;sample input with lots
&lt;&#x2F;span&gt;&lt;span&gt;of special characters
&lt;&#x2F;span&gt;&lt;span&gt;like . () * [] $ {}
&lt;&#x2F;span&gt;&lt;span&gt;^ + ? \ and &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;span&gt;This post shows how
&lt;&#x2F;span&gt;&lt;span&gt;you can do fixed
&lt;&#x2F;span&gt;&lt;span&gt;---------------------
&lt;&#x2F;span&gt;&lt;span&gt;$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
&lt;&#x2F;span&gt;&lt;span&gt;===================== with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Emulating regexp lookarounds in GNU sed</title>
		<published>2020-10-31T00:00:00+00:00</published>
		<updated>2021-03-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/sed-lookarounds/" type="text/html"/>
		<id>https://learnbyexample.github.io/sed-lookarounds/</id>
		<content type="html">&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;64371281&#x2F;4082052&quot;&gt;stackoverflow Q&amp;amp;A&lt;&#x2F;a&gt; got me thinking about various ways to construct a solution in &lt;code&gt;GNU sed&lt;&#x2F;code&gt; if lookarounds are needed.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Only single line (with newline as the line separator) processing is presented here. Equivalent lookaround syntax with &lt;code&gt;grep -P&lt;&#x2F;code&gt; or &lt;code&gt;perl&lt;&#x2F;code&gt; is also shown for comparison. Cases where multiple lines and&#x2F;or ASCII NUL characters are present in the pattern space is left as an exercise.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;filtering&quot;&gt;Filtering&lt;a class=&quot;zola-anchor&quot; href=&quot;#filtering&quot; aria-label=&quot;Anchor link for: filtering&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here, you only need to decide whether the input line has to be matched or not. &lt;code&gt;sed&lt;&#x2F;code&gt; supports grouping commands inside &lt;code&gt;{}&lt;&#x2F;code&gt; that should be executed only if a filtering condition is matched. The condition could be negated by adding a &lt;code&gt;!&lt;&#x2F;code&gt; character. In this way, you can emulate chaining of multiple positive and&#x2F;or negative lookaround conditions.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat items.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;apple=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span&gt;;per kg
&lt;&#x2F;span&gt;&lt;span&gt;a,b,c,d
&lt;&#x2F;span&gt;&lt;span&gt;;foo xyz3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lines containing a digit character followed by a ; character anywhere after
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lookaround isn&amp;#39;t needed here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: grep &amp;#39;[0-9].*;&amp;#39; or grep -P &amp;#39;\d(?=.*;)&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;[0-9].*;&#x2F;p&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; items.txt
&lt;&#x2F;span&gt;&lt;span&gt;apple=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span&gt;;per kg
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lines containing both digit and ; characters in any order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: grep -P &amp;#39;^(?=.*;).*\d&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;;&#x2F;{ &#x2F;[0-9]&#x2F;p }&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; items.txt
&lt;&#x2F;span&gt;&lt;span&gt;apple=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span&gt;;per kg
&lt;&#x2F;span&gt;&lt;span&gt;;foo xyz3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lines containing both digit and ; characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# but not if the line also contains character a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: grep -P &amp;#39;^(?!.*a)(?=.*;).*\d&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;a&#x2F;!{ &#x2F;;&#x2F;{ &#x2F;[0-9]&#x2F;p } }&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; items.txt
&lt;&#x2F;span&gt;&lt;span&gt;;foo xyz3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For some cases, multiple condition check like the previous examples is not enough. For example, filter a line if it contains &lt;code&gt;par&lt;&#x2F;code&gt; as long as &lt;code&gt;cart&lt;&#x2F;code&gt; isn&#x27;t present later in the line. Presence of &lt;code&gt;cart&lt;&#x2F;code&gt; earlier in the line shouldn&#x27;t affect the outcome. In such cases, you can first change the input line to add a newline character wherever &lt;code&gt;cart&lt;&#x2F;code&gt; is present and then construct a condition such that it depends on the newline character instead of &lt;code&gt;cart&lt;&#x2F;code&gt;. If a match is found, delete all the newline characters and then print the line.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par carted spare cart park city\na parking cart\n&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: grep -P &amp;#39;par(?!.*cart)&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;cart&#x2F;\n&amp;amp;&#x2F;g; &#x2F;par[^\n]*$&#x2F;{ s&#x2F;\n&#x2F;&#x2F;g; p }&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;par carted spare cart park city
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Newline is a safe character to choose for default line by line processing, as &lt;code&gt;sed&lt;&#x2F;code&gt; removes it from the pattern space. If you are processing a pattern space that contains newline character (for example: &lt;code&gt;-z&lt;&#x2F;code&gt; option, &lt;code&gt;N&lt;&#x2F;code&gt; command, etc), then you can still perform this trick as long as you know a character that is guaranteed to be absent from the input data. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;substitution&quot;&gt;Substitution&lt;a class=&quot;zola-anchor&quot; href=&quot;#substitution&quot; aria-label=&quot;Anchor link for: substitution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the previous section, you saw how to modify input line with newline character to make it easier to construct a lookaround condition. This trick comes in handy for substitution as well. However, for search and replace cases, you also need to emulate zero-width nature of lookarounds. To achieve this, you can make use of &lt;code&gt;t&lt;&#x2F;code&gt; command to construct a loop that performs substitution as long as a match is found. See my chapter on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;control-structures.html&quot;&gt;Control structures&lt;&#x2F;a&gt; for more details about branching commands in &lt;code&gt;GNU sed&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example of looping. Aim is to delete &lt;code&gt;fin&lt;&#x2F;code&gt; from the given input recursively.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# manual repetition, assuming count is known
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coffining&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;fin&#x2F;&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;cofing
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coffining&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;fin&#x2F;&#x2F;; s&#x2F;&#x2F;&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;cog
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# :loop marks the &amp;#39;s&amp;#39; command with label &amp;#39;loop&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# tloop will jump to label &amp;#39;loop&amp;#39; as long as the substitution succeeds
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coffining&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:loop s&#x2F;fin&#x2F;&#x2F;; tloop&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;cog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;negative-lookarounds&quot;&gt;Negative lookarounds&lt;a class=&quot;zola-anchor&quot; href=&quot;#negative-lookarounds&quot; aria-label=&quot;Anchor link for: negative-lookarounds&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Some cases can be solved by performing substitution only if a condition is first satisfied. For this example, need to first select lines if it doesn&#x27;t start with a &lt;code&gt;;&lt;&#x2F;code&gt; character. Then, for such lines, remove everything from the first space or comma character. Note that &lt;code&gt;{}&lt;&#x2F;code&gt; grouping is optional here.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -ne &amp;#39;print if s&#x2F;^(?!;).*?\K[ ,].*&#x2F;&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;^;&#x2F;! s&#x2F;[ ,].*&#x2F;&#x2F;p&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; items.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;apple=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50
&lt;&#x2F;span&gt;&lt;span&gt;a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For this example, need to change &lt;code&gt;foo&lt;&#x2F;code&gt; to &lt;code&gt;[baz]&lt;&#x2F;code&gt; only if it is not followed by a digit character. Note that &lt;code&gt;foo&lt;&#x2F;code&gt; at the end of string also satisfies this assertion. &lt;code&gt;foofoo&lt;&#x2F;code&gt; has two matches as the assertion is zero-width in nature, i.e. it doesn&#x27;t consume characters. Here, the first step is inserting a newline character between &lt;code&gt;foo&lt;&#x2F;code&gt; and a digit character. Then change all &lt;code&gt;foo&lt;&#x2F;code&gt; to &lt;code&gt;[baz]&lt;&#x2F;code&gt; as long as it is at the end of string or if it isn&#x27;t followed by a newline character. Once the loop ends, remove all the newline characters.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey food! foo42 foot5 foofoo&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;foo(?!\d)&#x2F;[baz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;(foo)([0-9])&#x2F;\1\n\2&#x2F;g;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                      :a s&#x2F;foo([^\n]|$)&#x2F;[baz]\1&#x2F;; ta;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                      s&#x2F;\n&#x2F;&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;hey [baz]d! foo42 [baz]t5 [baz][baz]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Change &lt;code&gt;foo&lt;&#x2F;code&gt; to &lt;code&gt;[baz]&lt;&#x2F;code&gt; only if it is not preceded by &lt;code&gt;_&lt;&#x2F;code&gt; character. &lt;code&gt;foo&lt;&#x2F;code&gt; at the start of string is matched as well.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;foo _foo 42foofoo&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;(?&amp;lt;!_)foo&#x2F;[baz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;(_)(foo)&#x2F;\1\n\2&#x2F;g;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                      :a s&#x2F;(^|[^\n])foo&#x2F;\1[baz]&#x2F;; ta;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                      s&#x2F;\n&#x2F;&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;[baz] _foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;[baz][baz]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace &lt;code&gt;par&lt;&#x2F;code&gt; with &lt;code&gt;[xyz]&lt;&#x2F;code&gt; as long as &lt;code&gt;s&lt;&#x2F;code&gt; character is not present later in the input. This assumes that the assertion doesn&#x27;t conflict with the search pattern, for example &lt;code&gt;s&lt;&#x2F;code&gt; will not conflict with &lt;code&gt;par&lt;&#x2F;code&gt; but would affect if it was &lt;code&gt;r&lt;&#x2F;code&gt; and &lt;code&gt;par&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spare part party&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;par(?!.*s)&#x2F;[xyz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;s&#x2F;&amp;amp;\n&#x2F;g;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                      :a s&#x2F;par([^\n]*)$&#x2F;[xyz]\1&#x2F;; ta;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;                      s&#x2F;\n&#x2F;&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;par s[xyz]e [xyz]t [xyz]ty
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace all empty fields with &lt;code&gt;NA&lt;&#x2F;code&gt; for csv input (assuming no embedded comma, newline characters, etc).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;,1,,,two,3,,,&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -lpe &amp;#39;s&#x2F;(?&amp;lt;![^,])(?![^,])&#x2F;NA&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:a s&#x2F;,,&#x2F;,NA,&#x2F;g; ta; s&#x2F;^,&#x2F;NA,&#x2F;; s&#x2F;,$&#x2F;,NA&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span&gt;,two,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace if &lt;code&gt;go&lt;&#x2F;code&gt; is not there between &lt;code&gt;at&lt;&#x2F;code&gt; and &lt;code&gt;par&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,parrot,dot,park,bat,go,spare,sat-in-a-park&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;at((?!go).)*par&#x2F;[xyz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;go&#x2F;\n&amp;amp;&#x2F;g; s&#x2F;at[^\n]*par&#x2F;[xyz]&#x2F;g; s&#x2F;\n&#x2F;&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;fox,c[xyz]k,bat,go,spare,s[xyz]k
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;positive-lookarounds&quot;&gt;Positive lookarounds&lt;a class=&quot;zola-anchor&quot; href=&quot;#positive-lookarounds&quot; aria-label=&quot;Anchor link for: positive-lookarounds&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In this example, need to surround fields with &lt;code&gt;[]&lt;&#x2F;code&gt; except first and last fields for csv input (assuming no embedded comma, newline characters, etc). With positive lookaround emulation, the modified string may continue to satisfy the matching condition, resulting in infinite looping. In this example, the fields themselves may contain &lt;code&gt;[]&lt;&#x2F;code&gt; characters, so you cannot use them to prevent infinite loop. The newline character trick comes in handy again.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,t[w]o,[3],f[ou]r,5&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;(?&amp;lt;=,)[^,]+(?=,)&#x2F;[$&amp;amp;]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:a s&#x2F;,([^,\n]+),&#x2F;,\n[\1],&#x2F;g; ta; s&#x2F;\n&#x2F;&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,[t[w]o],[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]],[f[ou]r],&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add space at word boundaries, but not at the start or end of string. Also, don&#x27;t add space if it is already present. Here, negated character class on space character is enough to emulate the assertion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;total= num1+35*42&#x2F;num2&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -lpe &amp;#39;s&#x2F;(?&amp;lt;=[^ ])\b(?=[^ ])&#x2F; &#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:a s&#x2F;([^ ])\b([^ ])&#x2F;\1 \2&#x2F;; ta;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;35 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; num2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace &lt;code&gt;par&lt;&#x2F;code&gt; with &lt;code&gt;[xyz]&lt;&#x2F;code&gt; as long as &lt;code&gt;part&lt;&#x2F;code&gt; occurs as a whole word later in the line. Here, the nature of the modified string itself prevents the possibility of infinite loop.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spare part party&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;par(?=.*\bpart\b)&#x2F;[xyz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:a s&#x2F;par(.*\bpart\b)&#x2F;[xyz]\1&#x2F;; ta&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;[xyz] s[xyz]e part party
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Branching commands and some creative preprocessing of the input can be combined to emulate lookaround assertions in &lt;code&gt;sed&lt;&#x2F;code&gt;. Given that &lt;a href=&quot;https:&#x2F;&#x2F;catonmat.net&#x2F;proof-that-sed-is-turing-complete&quot;&gt;Unix utility sed is Turing complete&lt;&#x2F;a&gt;, it&#x27;s perhaps not a big surprise. Now, please excuse me, I&#x27;ll be busy reaping points on stackoverflow&#x2F;unix.stackexchange for this edge case ;)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Search and replace tricks with ripgrep</title>
		<published>2020-09-16T00:00:00+00:00</published>
		<updated>2023-02-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/substitution-with-ripgrep/" type="text/html"/>
		<id>https://learnbyexample.github.io/substitution-with-ripgrep/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt; (command name &lt;code&gt;rg&lt;&#x2F;code&gt;) is a &lt;code&gt;grep&lt;&#x2F;code&gt; tool, but supports search and replace as well. &lt;code&gt;rg&lt;&#x2F;code&gt; is far from a like-for-like alternate for &lt;code&gt;sed&lt;&#x2F;code&gt;, but it has nifty features like multiline replacement, fixed string matching, &lt;code&gt;PCRE2&lt;&#x2F;code&gt; support, etc. This post gives an overview of syntax for substitution and highlights some of the cases where &lt;code&gt;rg&lt;&#x2F;code&gt; is a handy replacement for &lt;code&gt;sed&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;global-search-and-replace&quot;&gt;Global search and replace&lt;a class=&quot;zola-anchor&quot; href=&quot;#global-search-and-replace&quot; aria-label=&quot;Anchor link for: global-search-and-replace&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;dark blue, light blue
&lt;&#x2F;span&gt;&lt;span&gt;light orange
&lt;&#x2F;span&gt;&lt;span&gt;blue sky
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# by default, line number is displayed if output destination is stdout
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# by default, only lines that matched the given pattern is displayed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;blue&amp;#39; is search pattern and -r &amp;#39;red&amp;#39; is replacement string
&lt;&#x2F;span&gt;&lt;span&gt;$ rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1:dark&lt;&#x2F;span&gt;&lt;span&gt; red, light red
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3:red&lt;&#x2F;span&gt;&lt;span&gt; sky
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# --passthru option is useful to print all lines, whether or not it matched
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# -N will disable line number prefix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this command is similar to: sed &amp;#39;s&#x2F;blue&#x2F;red&#x2F;g&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;dark red, light red
&lt;&#x2F;span&gt;&lt;span&gt;light orange
&lt;&#x2F;span&gt;&lt;span&gt;red sky
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;matching-nth-occurrence&quot;&gt;Matching Nth occurrence&lt;a class=&quot;zola-anchor&quot; href=&quot;#matching-nth-occurrence&quot; aria-label=&quot;Anchor link for: matching-nth-occurrence&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As seen in previous example, &lt;code&gt;rg&lt;&#x2F;code&gt; will search and replace all occurrences. So, you&#x27;ll have to be creative with regexp to replace only a specific occurrence per input line.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;see bat hot at but at go gate at sat at but at&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace first occurrence only
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: sed &amp;#39;s&#x2F;\bat\b&#x2F;[xyz]&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\bat\b(.*)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[xyz]$1&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;see bat hot [xyz] but at go gate at sat at but at
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: sed &amp;#39;s&#x2F;\bat\b&#x2F;[xyz]&#x2F;3&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# the number within {} is N-1 to replace Nth occurrence, for N&amp;gt;1
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;^((.*?\bat\b){2}.*?)\bat\b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1[xyz]&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;see bat hot at but at go gate [xyz] sat at but at
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace last but Nth occurrence, for N&amp;gt;=0
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;^(.*)\bat\b((.*\bat\b){3})&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1[xyz]$2&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;see bat hot at but [xyz] go gate at sat at but at
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;in-place-workaround&quot;&gt;In-place workaround&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-place-workaround&quot; aria-label=&quot;Anchor link for: in-place-workaround&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;rg&lt;&#x2F;code&gt; doesn&#x27;t support in-place option, so you&#x27;ll have to do it yourself.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# -N isn&amp;#39;t needed here as output destination is a file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: sed -i &amp;#39;s&#x2F;blue&#x2F;red&#x2F;g&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;$ rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; tmp.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; mv tmp.txt ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat ip.txt
&lt;&#x2F;span&gt;&lt;span&gt;dark red, light red
&lt;&#x2F;span&gt;&lt;span&gt;light orange
&lt;&#x2F;span&gt;&lt;span&gt;red sky
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you have &lt;a href=&quot;https:&#x2F;&#x2F;joeyh.name&#x2F;code&#x2F;moreutils&#x2F;&quot;&gt;moreutils installed&lt;&#x2F;a&gt;, then you could use &lt;code&gt;sponge&lt;&#x2F;code&gt; as well.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ip.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sponge ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;rust-regex-and-pcre2&quot;&gt;Rust regex and PCRE2&lt;a class=&quot;zola-anchor&quot; href=&quot;#rust-regex-and-pcre2&quot; aria-label=&quot;Anchor link for: rust-regex-and-pcre2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;By default, &lt;code&gt;rg&lt;&#x2F;code&gt; uses Rust regular expressions, which is much more featured compared to &lt;code&gt;GNU sed&lt;&#x2F;code&gt;. The main feature not supported is backreference within regexp definition (for performance reasons). See &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;regex&#x2F;1.3.9&#x2F;regex&#x2F;index.html&quot;&gt;Rust regex documentation&lt;&#x2F;a&gt; for regular expression syntax and features. &lt;code&gt;rg&lt;&#x2F;code&gt; supports Unicode by default.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# non-greedy quantifier is supported
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;food land bark sand band cue combat&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;foo.*?ba&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[xyz]&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;[xyz]rk sand band cue combat
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# unicode support
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox:αλεπού,eagle:αετός&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\p{L}+&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;($0)&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;(fox)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(αλεπού),(eagle)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;(αετός)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# set operator example, remove all punctuation characters except . ! and ?
&lt;&#x2F;span&gt;&lt;span&gt;$ para=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;hi&amp;quot;, there! how *are* you? all fine here.&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$para&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[[:punct:]--[.!?]]+&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;hi there! how are you? all fine here.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;-P&lt;&#x2F;code&gt; switch will enable &lt;a href=&quot;https:&#x2F;&#x2F;www.pcre.org&#x2F;current&#x2F;doc&#x2F;html&#x2F;index.html&quot;&gt;PCRE2&lt;&#x2F;a&gt; flavor, which has even more tricks. You can also use &lt;code&gt;--engine=auto&lt;&#x2F;code&gt; to allow &lt;code&gt;rg&lt;&#x2F;code&gt; to automatically use &lt;code&gt;PCRE2&lt;&#x2F;code&gt; when needed (for example: useful as an alias for &lt;code&gt;rg&lt;&#x2F;code&gt; command so that it gives performance of Rust engine by default and use &lt;code&gt;PCRE2&lt;&#x2F;code&gt; only when needed).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# backreference within regexp definition
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cocoa appleseed tool speechless&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;wP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;([a-z]*([a-z])\2[a-z]*){2}&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$0}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;cocoa {appleseed} tool {speechless}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace all whole words except &amp;#39;imp&amp;#39; and &amp;#39;ant&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tiger imp goat eagle ant important&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\b(imp|ant)\b(*SKIP)(*F)|\w+&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[$0]&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;[tiger] imp [goat] [eagle] ant [important]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# recursively match parentheses
&lt;&#x2F;span&gt;&lt;span&gt;$ eqn=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(3+a)x * y((r-2)*(t+2)&#x2F;6) + z(a(b(c(d(e)))))&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$eqn&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\((?:[^()]++|(?0))++\)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; z
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# all lowercase letters and optional hyphen combo from start of string
&lt;&#x2F;span&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple-fig-mango guava grape&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\G([a-z]+)(-)?&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;($1)$2&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;(apple)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;(fig)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;(mango) guava grape
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;extract-and-modify&quot;&gt;Extract and modify&lt;a class=&quot;zola-anchor&quot; href=&quot;#extract-and-modify&quot; aria-label=&quot;Anchor link for: extract-and-modify&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;-r&lt;&#x2F;code&gt; option can be used when &lt;code&gt;-o&lt;&#x2F;code&gt; option is active too. The example shown below is not easy to do with &lt;code&gt;sed&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0501 035 154 12 26 98234&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# numbers &amp;gt;= 100 and ignore leading zeros
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;woP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0*+(\d{3,})&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;$1&amp;quot;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;sd,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;501&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;154&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;98234&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;fixed-string-matching&quot;&gt;Fixed string matching&lt;a class=&quot;zola-anchor&quot; href=&quot;#fixed-string-matching&quot; aria-label=&quot;Anchor link for: fixed-string-matching&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Like &lt;code&gt;grep&lt;&#x2F;code&gt;, the &lt;code&gt;-F&lt;&#x2F;code&gt; option will allow fixed strings to be matched, a handy option that I feel every search and replace tool should provide.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2.3&#x2F;[4]*6\nfoo\n5.3-[4]*9\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[4]*&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2.3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;26
&lt;&#x2F;span&gt;&lt;span&gt;foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5.3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;29
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;-F&lt;&#x2F;code&gt; doesn&#x27;t extend to replacement section though, so you need &lt;code&gt;$$&lt;&#x2F;code&gt; instead of &lt;code&gt;$&lt;&#x2F;code&gt; character to represent it literally.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.*{2}-b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;.*{2}&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;+$x\tc&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;\tc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;b
&lt;&#x2F;span&gt;&lt;span&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.*{2}-b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;.*{2}&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;+$$x\tc&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;\tc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;multiline-matching&quot;&gt;Multiline matching&lt;a class=&quot;zola-anchor&quot; href=&quot;#multiline-matching&quot; aria-label=&quot;Anchor link for: multiline-matching&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Another handy option is &lt;code&gt;-U&lt;&#x2F;code&gt; which enables multiline matching.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi there\nhave a nice day\nbye&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# (?s) flag will allow . to match newline characters as well
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(?s)the.*ice&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;hi  day
&lt;&#x2F;span&gt;&lt;span&gt;bye
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;multiline-search-and-replace&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; for a detailed discussion on multiline fixed string search and replace operations from the command line.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;handling-dos-style-input&quot;&gt;Handling dos-style input&lt;a class=&quot;zola-anchor&quot; href=&quot;#handling-dos-style-input&quot; aria-label=&quot;Anchor link for: handling-dos-style-input&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;rg&lt;&#x2F;code&gt; provides support for dos-style files with &lt;code&gt;--crlf&lt;&#x2F;code&gt; option.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: sed -E &amp;#39;s&#x2F;\w+(\r?)$&#x2F;xyz\1&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that output will retain CR+LF as line ending
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# similar to the sed solution, this will work for unix-style input too
&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi there\r\ngood day\r\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;crlf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\w+$&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xyz&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;hi xyz
&lt;&#x2F;span&gt;&lt;span&gt;good xyz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;speed-comparison-with-gnu-sed&quot;&gt;Speed comparison with GNU sed&lt;a class=&quot;zola-anchor&quot; href=&quot;#speed-comparison-with-gnu-sed&quot; aria-label=&quot;Anchor link for: speed-comparison-with-gnu-sed&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Another advantage of &lt;code&gt;rg&lt;&#x2F;code&gt; is that it is likely to be faster than &lt;code&gt;sed&lt;&#x2F;code&gt;. See &lt;a href=&quot;https:&#x2F;&#x2F;blog.burntsushi.net&#x2F;ripgrep&#x2F;&quot;&gt;ripgrep benchmark with other grep implementations&lt;&#x2F;a&gt; by the author for a methodological detailed analysis and insights.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# for small files, initial processing time of rg is a large component
&lt;&#x2F;span&gt;&lt;span&gt;$ time echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aba&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;a&#x2F;b&#x2F;g&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; f1
&lt;&#x2F;span&gt;&lt;span&gt;real	0m0.002s
&lt;&#x2F;span&gt;&lt;span&gt;$ time echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aba&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; f2
&lt;&#x2F;span&gt;&lt;span&gt;real	0m0.007s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# for larger files, rg is likely to be faster
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# 6.2M sample ASCII file
&lt;&#x2F;span&gt;&lt;span&gt;$ wget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;norvig.com&#x2F;big.txt&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;$ time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;LC_ALL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;\bcat\b&#x2F;dog&#x2F;g&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; big.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; f1
&lt;&#x2F;span&gt;&lt;span&gt;real	0m0.060s
&lt;&#x2F;span&gt;&lt;span&gt;$ time rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\bcat\b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; big.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; f2
&lt;&#x2F;span&gt;&lt;span&gt;real	0m0.048s
&lt;&#x2F;span&gt;&lt;span&gt;$ diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s f1 f2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt; f1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; f2 are identical
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# nearly 8 times faster!!
&lt;&#x2F;span&gt;&lt;span&gt;$ time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;LC_ALL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;\b(\w+)(\s+\1)+\b&#x2F;\1&#x2F;g&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; big.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; f1
&lt;&#x2F;span&gt;&lt;span&gt;real	0m0.725s
&lt;&#x2F;span&gt;&lt;span&gt;$ time rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;no&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;unicode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;wP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\w+)(\s+\1)+&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; big.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; f2
&lt;&#x2F;span&gt;&lt;span&gt;real	0m0.093s
&lt;&#x2F;span&gt;&lt;span&gt;$ diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;s f1 f2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt; f1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; f2 are identical
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;other-alternatives-for-sed&quot;&gt;Other alternatives for sed&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-alternatives-for-sed&quot; aria-label=&quot;Anchor link for: other-alternatives-for-sed&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;112023&#x2F;how-can-i-replace-a-string-in-a-files&#x2F;251742#251742&quot;&gt;rpl&lt;&#x2F;a&gt; — search and replace tool, has interesting options like interactive mode and recursive mode&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chmln&#x2F;sd&quot;&gt;sd&lt;&#x2F;a&gt; — simple search and replace, implemented in Rust&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.perl.org&#x2F;&quot;&gt;perl&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.ruby-lang.org&#x2F;en&#x2F;&quot;&gt;ruby&lt;&#x2F;a&gt; — programming languages with excellent command line support&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>I know Python basics, what next?</title>
		<published>2020-07-25T00:00:00+00:00</published>
		<updated>2024-10-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/python-intermediate/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-intermediate/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_what_next.png&quot; alt=&quot;Python what next&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Poster created using &lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;&quot;&gt;Canva&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;next-step&quot;&gt;Next step&lt;a class=&quot;zola-anchor&quot; href=&quot;#next-step&quot; aria-label=&quot;Anchor link for: next-step&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Programmers often wonder what to do after learning the basics. &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;learnpython&#x2F;search?q=what+next&amp;amp;restrict_sr=on&quot;&gt;Searching for &lt;code&gt;what next&lt;&#x2F;code&gt; on &#x2F;r&#x2F;learnpython&lt;&#x2F;a&gt; will give you too many results. And here are some wonderful articles related to this topic:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.devdungeon.com&#x2F;content&#x2F;i-know-how-program-i-dont-know-what-program&quot;&gt;I know how to program, but I don&#x27;t know what to program&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flyingmachinestudios.com&#x2F;programming&#x2F;learn-programming-languages-efficiently&#x2F;&quot;&gt;Techniques for Efficiently Learning Programming Languages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.techinasia.com&#x2F;talk&#x2F;27-things-started-programming&quot;&gt;Things you might encounter in your programming journey&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I do not have a simple answer to this question. However, I&#x27;ll list a few topics along with resources that might help you take the next step in your Python learning journey.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;exercises-and-projects&quot;&gt;Exercises and Projects&lt;a class=&quot;zola-anchor&quot; href=&quot;#exercises-and-projects&quot; aria-label=&quot;Anchor link for: exercises-and-projects&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you feel comfortable with programming basics and Python syntax, then exercises are a good way to test your knowledge. The resource you used to learn Python will typically have some sort of exercises, so those would be ideal as a first choice. I&#x27;d also suggest using the below resources to improve your skills. If you get stuck, reread the material related to those topics, search online, ask for clarifications, etc  — in short, make an effort to solve it. It is okay to skip some troublesome problems (and come back to it later if you have the time), but you should be able to solve most of the beginner problems. Maintaining notes and cheatsheets will help too, especially for common mistakes.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;exercism.org&#x2F;tracks&#x2F;python&#x2F;exercises&quot;&gt;Exercism&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.hackinscience.org&#x2F;exercises&#x2F;&quot;&gt;Hackinscience&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.practicepython.org&#x2F;&quot;&gt;Practicepython&lt;&#x2F;a&gt; — these are all beginner friendly and difficulty levels are marked&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PythonExercises&quot;&gt;Python Exercises&lt;&#x2F;a&gt; — my interactive TUI app, suited for beginner to intermediate level Python learners&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;inventwithpython.com&#x2F;pythongently&#x2F;&quot;&gt;Python Programming Exercises, Gently Explained&lt;&#x2F;a&gt; — includes gentle explanations of the problem, the prerequisite coding concepts you&#x27;ll need to understand the solution, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;&quot;&gt;Adventofcode&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.codewars.com&#x2F;&quot;&gt;Codewars&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.pythonmorsels.com&#x2F;&quot;&gt;Python Morsels&lt;&#x2F;a&gt; — includes more challenging exercises for intermediate to advanced level users&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;py.checkio.org&#x2F;&quot;&gt;Checkio&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.codingame.com&#x2F;start&quot;&gt;Codingame&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;codecombat.com&#x2F;&quot;&gt;Codecombat&lt;&#x2F;a&gt; — gaming based challenges&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;dailyprogrammer&#x2F;&quot;&gt;&#x2F;r&#x2F;dailyprogrammer&lt;&#x2F;a&gt; — not active currently, but there are plenty of past challenges with discussions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also this article on &lt;a href=&quot;https:&#x2F;&#x2F;www.pythonmorsels.com&#x2F;programming-exercise-tips&#x2F;&quot;&gt;solving programming exercises&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once you are comfortable with basics and syntax, the next step is projects. I wrote a 10-line program that solved a common problem for me — adding &lt;code&gt;body { text-align: justify }&lt;&#x2F;code&gt; to &lt;code&gt;epub&lt;&#x2F;code&gt; files that are not justify aligned. I didn&#x27;t know that this line would help beforehand. Found a solution online and then automated the process of unzipping &lt;code&gt;epub&lt;&#x2F;code&gt;, adding the line and then packing it again. That will likely need you to lookup documentation and go through some stackoverflow Q&amp;amp;A as well. And once you have written the solution and use it regularly, you&#x27;ll likely encounter corner cases and features to be added. I feel this is a great way to learn and understand programming.&lt;&#x2F;p&gt;
&lt;p&gt;These days, I use a better EPUB reader that allows me to customize alignments. Here&#x27;s another real world example. I&#x27;m on Linux and use the terminal for many things. I wanted a CLI tool to do simple calculations. There&#x27;s &lt;code&gt;bc&lt;&#x2F;code&gt; command, but it doesn&#x27;t accept direct string argument and you need to set &lt;code&gt;scale&lt;&#x2F;code&gt; and so on. So, I looked up how to write a CLI tool in Python and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;calculator&#x2F;calculator.html&quot;&gt;wrote one using the built-in &lt;code&gt;argparse&lt;&#x2F;code&gt; module&lt;&#x2F;a&gt; that works for my particular use cases.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some resources to help you get started on projects:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;&quot;&gt;Practice Python Projects&lt;&#x2F;a&gt; — my book on beginner to intermediate level projects&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;karan&#x2F;Projects-Solutions&quot;&gt;Projects with solutions&lt;&#x2F;a&gt; — algorithms, data structures, networking, security, databases, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;practical-tutorials&#x2F;project-based-learning#python&quot;&gt;Project based learning&lt;&#x2F;a&gt; — web applications, bots, data science, machine learning, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;norvig&#x2F;pytudes&quot;&gt;Pytudes by Peter Norvig&lt;&#x2F;a&gt; — Python programs, usually short, of considerable difficulty&lt;&#x2F;li&gt;
&lt;li&gt;Books:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;inventwithpython.com&#x2F;bigbookpython&#x2F;&quot;&gt;The Big Book of Small Python Projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;tiny-python-projects&quot;&gt;Tiny Python Projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;practicalpython.yasoob.me&#x2F;toc.html&quot;&gt;Practical Python Projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;impracticalpythonprojects&quot;&gt;Impractical Python Projects&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;real-world-python&quot;&gt;Real world Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;learnpython&#x2F;comments&#x2F;k5k1h0&#x2F;what_do_you_automate_with_python_at_home&#x2F;&quot;&gt;&#x2F;r&#x2F;learnpython: What do you automate with Python at home?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;projectbook.code.brettchalupa.com&#x2F;&quot;&gt;Projectbook&lt;&#x2F;a&gt; — collection of over 100 software project ideas for people looking to learn a given language or technology&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;goodresearch.dev&#x2F;&quot;&gt;The Good Research Code Handbook&lt;&#x2F;a&gt; to learn how to organize your code so that it is easy to understand and works reliably.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging&quot; aria-label=&quot;Anchor link for: debugging&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Knowing how to debug your programs is crucial and should be ideally taught right from the beginning instead of a chapter at the end of the book. &lt;a href=&quot;https:&#x2F;&#x2F;greenteapress.com&#x2F;wp&#x2F;think-python-2e&#x2F;&quot;&gt;Think Python&lt;&#x2F;a&gt; is an awesome example for such a resource material.&lt;&#x2F;p&gt;
&lt;p&gt;Sites like &lt;a href=&quot;https:&#x2F;&#x2F;www.pythontutor.com&#x2F;visualize.html#mode=edit&quot;&gt;Pythontutor&lt;&#x2F;a&gt; allow you to visually debug a program — you can execute a program step by step and see the current value of variables. Similar feature is typically provided by IDEs like &lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;pycharm&#x2F;&quot;&gt;Pycharm&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;thonny.org&#x2F;&quot;&gt;Thonny&lt;&#x2F;a&gt;. Under the hood, these visualizations are using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;pdb.html&quot;&gt;pdb module&lt;&#x2F;a&gt;. See also &lt;a href=&quot;https:&#x2F;&#x2F;realpython.com&#x2F;python-debugging-pdb&#x2F;&quot;&gt;Python debugging with pdb&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Debugging is often a frustrating experience. Taking a break helps (and sometimes I find the solution or spot a problem in my dreams). Try to reduce the code as much as possible so that you are left with minimal code necessary to reproduce the issue. Talking about the problem to a friend&#x2F;colleague&#x2F;inanimate-objects&#x2F;etc can help too — known as &lt;a href=&quot;https:&#x2F;&#x2F;rubberduckdebugging.com&#x2F;&quot;&gt;Rubber duck debugging&lt;&#x2F;a&gt;. I have often found the issue while formulating a question to be asked on forums like stackoverflow&#x2F;reddit because writing down your problem is another way to bring clarity than just having a vague idea in your mind. Here&#x27;s some more articles on this challenging topic:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2019&#x2F;06&#x2F;23&#x2F;a-few-debugging-resources&#x2F;&quot;&gt;What does debugging a program look like?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thepythoncodingbook.com&#x2F;2022&#x2F;04&#x2F;17&#x2F;debugging-python-code-is-like-detective-work-lets-investigate&#x2F;&quot;&gt;Debugging Python code is like detective work&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ericlippert.com&#x2F;2014&#x2F;03&#x2F;05&#x2F;how-to-debug-small-programs&#x2F;&quot;&gt;How to debug small programs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uchicago-cs.github.io&#x2F;debugging-guide&#x2F;&quot;&gt;Debugging guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ryanstutorials.net&#x2F;problem-solving-skills&#x2F;&quot;&gt;Problem solving skills&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s an interesting snippet (paraphrased) from a collection of &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;169713&#x2F;4082052&quot;&gt;interesting bug stories&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A jpeg parser choked whenever the CEO came into the room, because he always had a shirt with a square pattern on it, which triggered some special case of contrast and block boundary algorithms.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also &lt;a href=&quot;https:&#x2F;&#x2F;500mile.email&#x2F;&quot;&gt;this curated list of absurd software bug stories&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing&quot; aria-label=&quot;Anchor link for: testing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Another crucial aspect in the programming journey is knowing how to write tests. In bigger projects, usually there are separate engineers (often in much larger number than code developers) to test the code. Even in those cases, writing a few sanity test cases yourself can help you develop faster knowing that the changes aren&#x27;t breaking basic functionality.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s no single consensus on test methodologies. There is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unit_testing&quot;&gt;Unit testing&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Integration_testing&quot;&gt;Integration testing&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Test-driven_development&quot;&gt;Test-driven development&lt;&#x2F;a&gt; and so on. Often, a combination of these is used. These days, machine learning is also being considered to reduce the testing time, see &lt;a href=&quot;https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2020&#x2F;07&#x2F;testing-firefox-more-efficiently-with-machine-learning&#x2F;&quot;&gt;Testing Firefox more efficiently with machine learning&lt;&#x2F;a&gt; for example.&lt;&#x2F;p&gt;
&lt;p&gt;When I start a project, I usually try to write the programs incrementally. Say I need to iterate over files from a directory. I will make sure that portion is working (usually with &lt;code&gt;print&lt;&#x2F;code&gt; statements), then add another feature — say file reading and test that and so on. This reduces the burden of testing a large program at once at the end. And depending upon the nature of the program, I&#x27;ll add a few sanity tests at the end. For example, for my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;command_help&quot;&gt;command_help&lt;&#x2F;a&gt; project, I copy pasted a few test runs of the program with different options and arguments into a separate file and wrote a program to perform these tests programmatically whenever the source code is modified.&lt;&#x2F;p&gt;
&lt;p&gt;For non-trivial projects, you&#x27;ll usually end up needing frameworks like built-in module &lt;code&gt;unittest&lt;&#x2F;code&gt; or third-party modules like &lt;code&gt;pytest&lt;&#x2F;code&gt;. Here&#x27;s some learning resources.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;realpython.com&#x2F;python-testing&#x2F;&quot;&gt;Getting started with testing in Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.thea.codes&#x2F;my-python-testing-style-guide&#x2F;&quot;&gt;Python testing style guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.thedigitalcatonline.com&#x2F;blog&#x2F;2020&#x2F;09&#x2F;10&#x2F;tdd-in-python-with-pytest-part-1&#x2F;&quot;&gt;TDD in Python with pytest&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.obeythetestinggoat.com&#x2F;&quot;&gt;obeythetestinggoat&lt;&#x2F;a&gt; — TDD for the Web, with Python, Selenium, Django, JavaScript and pals&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testdriven.io&#x2F;blog&#x2F;modern-tdd&#x2F;&quot;&gt;Modern Test-Driven Development in Python&lt;&#x2F;a&gt; — TDD guide, has a real world application example&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;intermediate-to-advanced-python-resources&quot;&gt;Intermediate to Advanced Python resources&lt;a class=&quot;zola-anchor&quot; href=&quot;#intermediate-to-advanced-python-resources&quot; aria-label=&quot;Anchor link for: intermediate-to-advanced-python-resources&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Intermediate&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;index.html&quot;&gt;Official Python docs&lt;&#x2F;a&gt; — Python docs are a treasure trove of information&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathspp.gumroad.com&#x2F;l&#x2F;pydonts&quot;&gt;Pydon&#x27;ts&lt;&#x2F;a&gt; — Write elegant Python code, make the best use of the core Python features&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;calmcode.io&#x2F;&quot;&gt;Calmcode&lt;&#x2F;a&gt; — videos on testing, code style, args kwargs, data science, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dabeaz-course.github.io&#x2F;practical-python&#x2F;Notes&#x2F;Contents.html&quot;&gt;Practical Python Programming&lt;&#x2F;a&gt; — covers foundational aspects of Python programming with an emphasis on script writing, data manipulation, and program organization&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;inventwithpython.com&#x2F;beyond&#x2F;chapter0.html&quot;&gt;Beyond the Basic Stuff with Python&lt;&#x2F;a&gt; — Best Practices, Tools, and Techniques, OOP, Practice Projects&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;python-distilled&#x2F;9780134173399&#x2F;&quot;&gt;Python Distilled&lt;&#x2F;a&gt; — this pragmatic guide provides a concise narrative related to fundamental programming topics such as data abstraction, control flow, program structure, functions, objects, and modules&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;python-in-a&#x2F;9781098113544&#x2F;&quot;&gt;Python in a Nutshell&lt;&#x2F;a&gt; — use modern Python idiomatically, structure Python projects, how to debug&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Algorithms and Design patterns&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;runestone.academy&#x2F;ns&#x2F;books&#x2F;published&#x2F;pythonds3&#x2F;index.html&quot;&gt;Problem solving with algorithms and data structures&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;faif&#x2F;python-patterns&quot;&gt;GitHub: Collection of design patterns and idioms&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.thedigitalcatbooks.com&#x2F;pycabook-introduction&#x2F;&quot;&gt;Clean Architectures in Python&lt;&#x2F;a&gt; — software design methodology&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Advanced&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;fluent-python-2nd&#x2F;9781492056348&#x2F;&quot;&gt;Fluent Python&lt;&#x2F;a&gt; — takes you through Python&#x27;s core language features and libraries, and shows you how to make your code shorter, faster, and more readable at the same time&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;seriouspython&quot;&gt;Serious Python&lt;&#x2F;a&gt; — deployment, scalability, testing, and more&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;practices-of-the-python-pro&quot;&gt;Practices of the Python Pro&lt;&#x2F;a&gt; — learn to design professional-level, clean, easily maintainable software at scale, includes examples for software development best practices&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dabeaz-course&#x2F;python-mastery&quot;&gt;Advanced Python Mastery&lt;&#x2F;a&gt; — exercise-driven course on Advanced Python Programming that was battle-tested several hundred times on the corporate-training circuit for more than a decade&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;handy-cheatsheets&quot;&gt;Handy cheatsheets&lt;a class=&quot;zola-anchor&quot; href=&quot;#handy-cheatsheets&quot; aria-label=&quot;Anchor link for: handy-cheatsheets&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ehmatthes.github.io&#x2F;pcc_3e&#x2F;cheat_sheets&#x2F;&quot;&gt;Python Crash Course cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gto76.github.io&#x2F;python-cheatsheet&#x2F;&quot;&gt;Comprehensive Python cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ipgp.github.io&#x2F;scientific_python_cheat_sheet&#x2F;&quot;&gt;Scientific Python cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pythonforbiologists.com&#x2F;29-common-beginner-errors-on-one-page.html&quot;&gt;Common beginner errors&lt;&#x2F;a&gt; — use the pdf link&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;python-regex-cheatsheet&#x2F;&quot;&gt;Python regular expression cheatsheet&lt;&#x2F;a&gt; — my blog post, includes examples as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;more-python-resources&quot;&gt;More Python resources&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-python-resources&quot; aria-label=&quot;Anchor link for: more-python-resources&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Inspired by this post, I made a &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_resources&#x2F;&quot;&gt;Python learning resources repository&lt;&#x2F;a&gt; which is categorized (beginner, intermediate, advanced, domains like web&#x2F;ML&#x2F;data science, etc) and includes a handy search feature.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;I hope these resources will help you take that crucial next step and continue your Python journey. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Customizing pandoc to generate beautiful pdf and epub from markdown</title>
		<published>2020-07-21T00:00:00+00:00</published>
		<updated>2022-11-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/customizing-pandoc/" type="text/html"/>
		<id>https://learnbyexample.github.io/customizing-pandoc/</id>
		<content type="html">&lt;p&gt;Either you&#x27;ve already heard of &lt;code&gt;pandoc&lt;&#x2F;code&gt; or if you have searched online for &lt;code&gt;markdown&lt;&#x2F;code&gt; to &lt;code&gt;pdf&lt;&#x2F;code&gt; or similar, you are sure to come across &lt;code&gt;pandoc&lt;&#x2F;code&gt;. This tutorial will help you use &lt;code&gt;pandoc&lt;&#x2F;code&gt; to generate &lt;code&gt;pdf&lt;&#x2F;code&gt; and &lt;code&gt;epub&lt;&#x2F;code&gt; from a &lt;a href=&quot;https:&#x2F;&#x2F;github.github.com&#x2F;gfm&#x2F;&quot;&gt;GitHub style markdown&lt;&#x2F;a&gt; file. The main motivation for this blog post is to highlight what customizations I did to generate &lt;code&gt;pdf&lt;&#x2F;code&gt; and &lt;code&gt;epub&lt;&#x2F;code&gt; versions for &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&#x2F;&quot;&gt;self-publishing my ebooks&lt;&#x2F;a&gt;. It wasn&#x27;t easy to arrive at the setup I ended up with, so I hope this will be useful for those looking to use &lt;code&gt;pandoc&lt;&#x2F;code&gt; to generate &lt;code&gt;pdf&lt;&#x2F;code&gt; and &lt;code&gt;epub&lt;&#x2F;code&gt; formats. This guide is specifically aimed at technical books that has code snippets.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;customizing_pandoc.png&quot; alt=&quot;Customizing pandoc&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Poster created using &lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;&quot;&gt;Canva&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you use a debian based distro like Ubuntu, the below steps are enough for the demos in this tutorial. If you get an error or warning, search that issue online and you&#x27;ll likely find what else has to be installed.&lt;&#x2F;p&gt;
&lt;p&gt;I first downloaded &lt;code&gt;deb&lt;&#x2F;code&gt; file from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jgm&#x2F;pandoc&#x2F;releases&quot;&gt;pandoc: releases&lt;&#x2F;a&gt; and installed it. Followed by packages needed for &lt;code&gt;pdf&lt;&#x2F;code&gt; generation.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# latest pandoc version as of 27 Aug 2021 is 2.14.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo gdebi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;Downloads&#x2F;pandoc-2.14.2-1-amd64.deb
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that download size is hundreds of MB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt install texlive-xetex
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt install librsvg2-bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt install texlive-science
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more details and guide for other OS, refer to &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;installing.html&quot;&gt;pandoc: installation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;minimal-example&quot;&gt;Minimal example&lt;a class=&quot;zola-anchor&quot; href=&quot;#minimal-example&quot; aria-label=&quot;Anchor link for: minimal-example&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Once &lt;code&gt;pandoc&lt;&#x2F;code&gt; is working on your system, try generating a sample &lt;code&gt;pdf&lt;&#x2F;code&gt; without any customization.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learnbyexample.github.io&#x2F;tree&#x2F;master&#x2F;files&#x2F;pandoc_pdf&quot;&gt;learnbyexample.github.io repo&lt;&#x2F;a&gt; for all the input and output files referred in this tutorial.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pandoc sample_1.md&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; gfm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; sample_1.pdf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;sample_1.md&lt;&#x2F;code&gt; is input markdown file and &lt;code&gt;-f&lt;&#x2F;code&gt; is used to specify that the input format is GitHub style markdown. The &lt;code&gt;-o&lt;&#x2F;code&gt; option specifies the output file type based on extension. The default output is probably good enough. But I wished to customize hyperlinks, inline code style, add page breaks between chapters, etc. This blog post will discuss these customizations one by one.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;code&gt;pandoc&lt;&#x2F;code&gt; has its own flavor of &lt;code&gt;markdown&lt;&#x2F;code&gt; with many useful extensions — see &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#pandocs-markdown&quot;&gt;pandoc: pandocs-markdown&lt;&#x2F;a&gt; for details. GitHub style markdown is recommended if you wish to use the same source (or with minor changes) in multiple places.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; It is advised to use &lt;code&gt;markdown&lt;&#x2F;code&gt; headers in order without skipping — for example, &lt;code&gt;H1&lt;&#x2F;code&gt; for chapter heading and &lt;code&gt;H2&lt;&#x2F;code&gt; for chapter sub-section, etc is fine. &lt;code&gt;H1&lt;&#x2F;code&gt; for chapter heading and &lt;code&gt;H3&lt;&#x2F;code&gt; for sub-section is not. Using the former can give automatic index navigation on ebook readers.&lt;&#x2F;p&gt;
&lt;p&gt;On &lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Apps&#x2F;Evince&quot;&gt;Evince&lt;&#x2F;a&gt; reader, the index navigation for above sample looks like this:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;chapter_index.png&quot; alt=&quot;index navigation&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;chapter-breaks&quot;&gt;Chapter breaks&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-breaks&quot; aria-label=&quot;Anchor link for: chapter-breaks&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As observed from previous demo, by default there are no chapter breaks. Searching for a &lt;a href=&quot;https:&#x2F;&#x2F;superuser.com&#x2F;questions&#x2F;601469&#x2F;getting-chapters-to-start-on-a-new-page-in-a-pandoc-generated-pdf&quot;&gt;solution online&lt;&#x2F;a&gt;, I got this piece of &lt;code&gt;tex&lt;&#x2F;code&gt; code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;sectsty&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\sectionfont&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\clearpage&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be added using &lt;code&gt;-H&lt;&#x2F;code&gt; option. From &lt;code&gt;pandoc&lt;&#x2F;code&gt; manual,&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;-H FILE, --include-in-header=FILE&lt;&#x2F;p&gt;
&lt;p&gt;Include  contents  of FILE, verbatim, at the end of the header.  This
can be used, for example, to include special  CSS  or  JavaScript  in
HTML documents.  This option can be used repeatedly to include multiple
files in the header.  They will be included in the  order  specified.
Implies --standalone.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;pandoc&lt;&#x2F;code&gt; invocation now looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pandoc sample_1.md&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; gfm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -H&lt;&#x2F;span&gt;&lt;span&gt; chapter_break.tex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; sample_1_chapter_break.pdf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can add further customization to headings, for example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\sectionfont{\underline\clearpage}&lt;&#x2F;code&gt; to underline chapter names&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\sectionfont{\LARGE\clearpage}&lt;&#x2F;code&gt; to allow chapter names to get even bigger&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some more links to read about various customizations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;1455&#x2F;how-to-set-the-font-for-a-section-title-and-chapter-etc&quot;&gt;tex.stackexchange: section fonts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;230730&#x2F;section-coming-up-as-undefined-when-using-sectsty&quot;&gt;tex.stackexchange: section colors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;10138&#x2F;change-section-fonts&quot;&gt;tex.stackexchange: change section fonts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;changing-settings-via-v-option&quot;&gt;Changing settings via -V option&lt;a class=&quot;zola-anchor&quot; href=&quot;#changing-settings-via-v-option&quot; aria-label=&quot;Anchor link for: changing-settings-via-v-option&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;-V KEY[=VAL], --variable=KEY[:VAL]&lt;&#x2F;p&gt;
&lt;p&gt;Set the template variable KEY to the value  VAL  when  rendering  the
document  in standalone mode.  This is generally only useful when the
--template option is used to specify a custom template, since  pandoc
automatically  sets  the variables used in the default templates.  If
no VAL is specified, the key will be given the value true.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;-V&lt;&#x2F;code&gt; option allows to change variable values to customize settings like page size, font, link color, etc. As more settings are changed, better to use a simple script to call &lt;code&gt;pandoc&lt;&#x2F;code&gt; instead of typing the whole command on terminal.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;pandoc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -f&lt;&#x2F;span&gt;&lt;span&gt; gfm \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    --include-in-header&lt;&#x2F;span&gt;&lt;span&gt; chapter_break.tex \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span&gt; linkcolor:blue \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span&gt; geometry:a4paper \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span&gt; geometry:margin=2cm \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span&gt; mainfont=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;DejaVu Serif&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span&gt; monofont=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;DejaVu Sans Mono&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    --pdf-engine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;xelatex \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mainfont&lt;&#x2F;code&gt; is for normal text&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;monofont&lt;&#x2F;code&gt; is for code snippets&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;geometry&lt;&#x2F;code&gt; for page size and margins&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;linkcolor&lt;&#x2F;code&gt; to set hyperlink color&lt;&#x2F;li&gt;
&lt;li&gt;to increase default &lt;strong&gt;font size&lt;&#x2F;strong&gt;, use &lt;code&gt;-V fontsize=12pt&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;23811002&#x2F;4082052&quot;&gt;stackoverflow: change font size&lt;&#x2F;a&gt; if you need even bigger size options&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Using &lt;code&gt;xelatex&lt;&#x2F;code&gt; as the &lt;code&gt;pdf-engine&lt;&#x2F;code&gt; allows to use any font installed in the system. One reason I chose &lt;code&gt;DejaVu&lt;&#x2F;code&gt; was because it supported &lt;strong&gt;Greek&lt;&#x2F;strong&gt; and other Unicode characters that were causing error with other fonts. See &lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;21736&#x2F;using-xelatex-instead-of-pdflatex&quot;&gt;tex.stackexchange: Using XeLaTeX instead of pdfLaTeX&lt;&#x2F;a&gt; for some more details.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;pandoc&lt;&#x2F;code&gt; invocation is now through a script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; chmod +x md2pdf.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;md2pdf.sh sample_1.md sample_1_settings.pdf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Do compare the pdf generated side by side with previous output before proceeding.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; On my system, &lt;code&gt;DejaVu Serif&lt;&#x2F;code&gt; did not have &lt;em&gt;italic&lt;&#x2F;em&gt; variation installed, so I had to use &lt;code&gt;sudo apt install ttf-dejavu-extra&lt;&#x2F;code&gt; to get it.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;syntax-highlighting&quot;&gt;Syntax highlighting&lt;a class=&quot;zola-anchor&quot; href=&quot;#syntax-highlighting&quot; aria-label=&quot;Anchor link for: syntax-highlighting&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;One option to customize syntax highlighting for code snippets is to save one of the &lt;code&gt;pandoc&lt;&#x2F;code&gt; themes and editing it. See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;47876166&#x2F;4082052&quot;&gt;stackoverflow: What are the available syntax highlighters?&lt;&#x2F;a&gt; for available themes and more details (as a good practice on stackoverflow, go through all answers and comments — the linked&#x2F;related sections on sidebar are useful as well).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pandoc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; --print-highlight-style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;pygments &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; pygments.theme
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Edit the above file to customize the theme. Use sites like &lt;a href=&quot;https:&#x2F;&#x2F;www.colorhexa.com&#x2F;&quot;&gt;colorhexa&lt;&#x2F;a&gt; to help with color choices, hex values, etc. For this demo, the below settings are changed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;# by default, background is same as normal text
&lt;&#x2F;span&gt;&lt;span&gt;# change it to a shade of gray to easily distinguish code and text
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;background-color&amp;quot;: &amp;quot;#f8f8f8&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# change italic to false, messes up comments with slashes
&lt;&#x2F;span&gt;&lt;span&gt;# change comment text-color to yet another shade of gray
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Comment&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;text-color&amp;quot;: &amp;quot;#9c9c9c&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;background-color&amp;quot;: null,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;bold&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;italic&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;underline&amp;quot;: false
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Inline code&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Similar to changing background color for code snippets, I found a &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;40975004&#x2F;4082052&quot;&gt;solution online&lt;&#x2F;a&gt; to change background color for inline code snippets.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;fancyvrb&lt;&#x2F;span&gt;&lt;span&gt;,newverbs,xcolor}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\definecolor&lt;&#x2F;span&gt;&lt;span&gt;{Light}{HTML}{F4F4F4}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\let\oldtexttt\texttt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;\renewcommand&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;\texttt&lt;&#x2F;span&gt;&lt;span&gt;}[1]{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\colorbox&lt;&#x2F;span&gt;&lt;span&gt;{Light}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\oldtexttt&lt;&#x2F;span&gt;&lt;span&gt;{#1}}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add &lt;code&gt;--highlight-style pygments.theme&lt;&#x2F;code&gt; and &lt;code&gt;--include-in-header inline_code.tex&lt;&#x2F;code&gt; to the script and generate the &lt;code&gt;pdf&lt;&#x2F;code&gt; again.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;pandoc sample_2.md -f gfm -o sample_2.pdf&lt;&#x2F;code&gt; the output would be:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;default_syn.png&quot; alt=&quot;Default syntax highlighting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;.&#x2F;md2pdf_syn.sh sample_2.md sample_2_syn.pdf&lt;&#x2F;code&gt; the output is:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;customized_syn.png&quot; alt=&quot;Customized syntax highlighting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;For my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; book, by chance I found that using &lt;code&gt;ruby&lt;&#x2F;code&gt; instead of &lt;code&gt;python&lt;&#x2F;code&gt; for REPL code snippets syntax highlighting was better. Snapshot from &lt;code&gt;.&#x2F;md2pdf_syn.sh sample_3.md sample_3.pdf&lt;&#x2F;code&gt; result is shown below. For &lt;code&gt;python&lt;&#x2F;code&gt; directive, string output gets treated as a comment and color for boolean values isn&#x27;t easy to distinguish from string values. The &lt;code&gt;ruby&lt;&#x2F;code&gt; directive treats string value as expected and boolean values are easier to spot.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;python_vs_ruby_syn.png&quot; alt=&quot;REPL syntax highlighting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;bullet-styling&quot;&gt;Bullet styling&lt;a class=&quot;zola-anchor&quot; href=&quot;#bullet-styling&quot; aria-label=&quot;Anchor link for: bullet-styling&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;22156999&#x2F;4082052&quot;&gt;stackoverflow Q&amp;amp;A&lt;&#x2F;a&gt; helped for bullet styling.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;enumitem&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;amsfonts&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;% level one
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\setlist&lt;&#x2F;span&gt;&lt;span&gt;[itemize,1]{label=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\bullet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;% level two
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\setlist&lt;&#x2F;span&gt;&lt;span&gt;[itemize,2]{label=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\circ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;% level three
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\setlist&lt;&#x2F;span&gt;&lt;span&gt;[itemize,3]{label=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\star&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Comparing &lt;code&gt;pandoc sample_4.md -f gfm -o sample_4.pdf&lt;&#x2F;code&gt; vs &lt;code&gt;.&#x2F;md2pdf_syn_bullet.sh sample_4.md sample_4_bullet.pdf&lt;&#x2F;code&gt; gives:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;bullet_styling.png&quot; alt=&quot;Bullet styling&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;pdf-properties&quot;&gt;PDF properties&lt;a class=&quot;zola-anchor&quot; href=&quot;#pdf-properties&quot; aria-label=&quot;Anchor link for: pdf-properties&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;23235&#x2F;eliminate-edit-pdf-properties-added-by-pdflatex&quot;&gt;tex.stackexchange Q&amp;amp;A&lt;&#x2F;a&gt; helped to change metadata. See also &lt;a href=&quot;https:&#x2F;&#x2F;pspdfkit.com&#x2F;blog&#x2F;2018&#x2F;whats-hiding-in-your-pdf&#x2F;&quot;&gt;pspdfkit: What’s Hiding in Your PDF?&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=18381515&quot;&gt;discussion on HN&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;hyperref&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\hypersetup&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  pdftitle={My awesome book},
&lt;&#x2F;span&gt;&lt;span&gt;  pdfauthor={learnbyexample},
&lt;&#x2F;span&gt;&lt;span&gt;  pdfsubject={pandoc},
&lt;&#x2F;span&gt;&lt;span&gt;  pdfkeywords={pandoc,pdf,xelatex}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;md2pdf_syn_bullet_prop.sh sample_4.md sample_4_bullet_prop.pdf&lt;&#x2F;code&gt; gives:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;pdf_properties.png&quot; alt=&quot;pdf properties&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;adding-table-of-contents&quot;&gt;Adding table of contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#adding-table-of-contents&quot; aria-label=&quot;Anchor link for: adding-table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s a handy option &lt;code&gt;--toc&lt;&#x2F;code&gt; to automatically include table of contents at top of the generated &lt;code&gt;pdf&lt;&#x2F;code&gt;. You can control number of levels using &lt;code&gt;--toc-depth&lt;&#x2F;code&gt; option, the default is 3 levels. You can also change the default string &lt;code&gt;Contents&lt;&#x2F;code&gt; to something else using &lt;code&gt;-V toc-title&lt;&#x2F;code&gt; option.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;md2pdf_syn_bullet_prop_toc.sh sample_1.md sample_1_toc.pdf&lt;&#x2F;code&gt; gives:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;table_of_contents.png&quot; alt=&quot;table of contents&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;adding-cover-image&quot;&gt;Adding cover image&lt;a class=&quot;zola-anchor&quot; href=&quot;#adding-cover-image&quot; aria-label=&quot;Anchor link for: adding-cover-image&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To add something prior to table of contents, cover image for example, you can use a &lt;code&gt;tex&lt;&#x2F;code&gt; file and include it verbatim. Create a &lt;code&gt;tex&lt;&#x2F;code&gt; file (named as &lt;code&gt;cover.tex&lt;&#x2F;code&gt; here) with content as shown below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tex&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-tex &quot;&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\includegraphics&lt;&#x2F;span&gt;&lt;span&gt;{cover.png}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\thispagestyle&lt;&#x2F;span&gt;&lt;span&gt;{empty}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, modify the previous script &lt;code&gt;md2pdf_syn_bullet_prop_toc.sh&lt;&#x2F;code&gt; by adding &lt;code&gt;--include-before-body cover.tex&lt;&#x2F;code&gt; and tada — you get the cover image before table of contents. &lt;code&gt;\thispagestyle{empty}&lt;&#x2F;code&gt; helps to avoid page number on the cover page, see also &lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;360739&#x2F;what-is-the-use-of-clearpage-thispagestyleempty-cleardoublepage&quot;&gt;tex.stackexchange: clear page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;bash&lt;&#x2F;code&gt; script invocation is now &lt;code&gt;.&#x2F;md2pdf_syn_bullet_prop_toc_cover.sh sample_5.md sample_5.pdf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; You&#x27;ll need at least one image in input markdown file, otherwise settings won&#x27;t apply to the cover image and you may end up with weird output. &lt;code&gt;sample_5.md&lt;&#x2F;code&gt; used in the command above includes an image. And be careful to use escapes if the image path can contain &lt;code&gt;tex&lt;&#x2F;code&gt; metacharacters.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;stylish-blockquote&quot;&gt;Stylish blockquote&lt;a class=&quot;zola-anchor&quot; href=&quot;#stylish-blockquote&quot; aria-label=&quot;Anchor link for: stylish-blockquote&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;By default, blockquotes (lines starting with &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; in markdown) are just indented in the &lt;code&gt;pdf&lt;&#x2F;code&gt; output. To make them standout, &lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;154528&#x2F;how-to-change-the-background-color-and-border-of-a-pandoc-generated-blockquote&quot;&gt;tex.stackexchange: change the background color and border of blockquote&lt;&#x2F;a&gt; helped.&lt;&#x2F;p&gt;
&lt;p&gt;Create &lt;code&gt;quote.tex&lt;&#x2F;code&gt; with the contents as shown below. You can change the colors to suit your own preferred style.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tex&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-tex &quot;&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;tcolorbox&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\newtcolorbox&lt;&#x2F;span&gt;&lt;span&gt;{myquote}{colback=red!5!white, colframe=red!75!black}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\renewenvironment&lt;&#x2F;span&gt;&lt;span&gt;{quote}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;myquote&lt;&#x2F;span&gt;&lt;span&gt;}}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;myquote&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;bash&lt;&#x2F;code&gt; script invocation is now &lt;code&gt;.&#x2F;md2pdf_syn_bullet_prop_toc_cover_quote.sh sample_5.md sample_5_quote.pdf&lt;&#x2F;code&gt;. The difference between default and styled blockquote is shown below.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;styled_blockquote.png&quot; alt=&quot;styling blockquotes&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;customizing-epub&quot;&gt;Customizing epub&lt;a class=&quot;zola-anchor&quot; href=&quot;#customizing-epub&quot; aria-label=&quot;Anchor link for: customizing-epub&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For a long time, I thought &lt;code&gt;epub&lt;&#x2F;code&gt; didn&#x27;t make sense for programming books. Turned out, I wasn&#x27;t using the right ebook readers. &lt;strong&gt;FBReader&lt;&#x2F;strong&gt; is good for novels but not ebooks with code snippets. When I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mate-desktop&#x2F;atril&quot;&gt;atril&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;calibre-ebook.com&#x2F;&quot;&gt;calibre ebook-viewer&lt;&#x2F;a&gt;, the results were good.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t know how to use &lt;code&gt;css&lt;&#x2F;code&gt; before trying to generate the &lt;code&gt;epub&lt;&#x2F;code&gt; version. Somehow, I managed to take the default &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jgm&#x2F;pandoc&#x2F;blob&#x2F;master&#x2F;data&#x2F;epub.css&quot;&gt;epub.css&lt;&#x2F;a&gt; provided by &lt;code&gt;pandoc&lt;&#x2F;code&gt; and customize it as close as possible to the &lt;code&gt;pdf&lt;&#x2F;code&gt; version. The modified &lt;code&gt;epub.css&lt;&#x2F;code&gt; is available from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learnbyexample.github.io&#x2F;tree&#x2F;master&#x2F;files&#x2F;pandoc_pdf&quot;&gt;learnbyexample.github.io repo&lt;&#x2F;a&gt;. The &lt;code&gt;bash&lt;&#x2F;code&gt; script to generate the &lt;code&gt;epub&lt;&#x2F;code&gt; is shown below and invoked as &lt;code&gt;.&#x2F;md2epub.sh sample_5.md sample_5.epub&lt;&#x2F;code&gt;. Note that &lt;code&gt;pygments.theme&lt;&#x2F;code&gt; is same as the &lt;code&gt;pdf&lt;&#x2F;code&gt; customization discussed before.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;pandoc  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        -f&lt;&#x2F;span&gt;&lt;span&gt; gfm \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --toc &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --standalone &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --top-level-division&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;chapter \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --highlight-style&lt;&#x2F;span&gt;&lt;span&gt; pygments.theme \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --css&lt;&#x2F;span&gt;&lt;span&gt; epub.css \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;title:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;My awesome book&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;author:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;learnbyexample&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;lang:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;en-US&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;cover-image:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;cover.png&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;resource-links&quot;&gt;Resource links&lt;a class=&quot;zola-anchor&quot; href=&quot;#resource-links&quot; aria-label=&quot;Anchor link for: resource-links&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html&quot;&gt;pandoc: manual&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;demos.html&quot;&gt;pandoc: demos&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jgm&#x2F;pandoc&#x2F;wiki&#x2F;Pandoc-Tricks&quot;&gt;pandoc: tips and tricks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;More options and workflows for generating ebooks&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Wandmalfarbe&#x2F;pandoc-latex-template&quot;&gt;pandoc-latex-template&lt;&#x2F;a&gt; — a clean pandoc LaTeX template to convert your markdown files to PDF or LaTeX&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;keleshev.com&#x2F;my-book-writing-setup&#x2F;&quot;&gt;Writing a book with pandoc, make, and vim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;quarto.org&#x2F;&quot;&gt;Quarto&lt;&#x2F;a&gt; — open source scientific and technical publishing system built on Pandoc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jupyterbook.org&#x2F;intro.html&quot;&gt;Jupyter Book&lt;&#x2F;a&gt; — open source project for building beautiful, publication-quality books and documents from computational material
&lt;ul&gt;
&lt;li&gt;See also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fastai&#x2F;fastdoc&quot;&gt;fastdoc&lt;&#x2F;a&gt; — the output of fastdoc is an asciidoc file for each input notebook. You can then use asciidoctor to convert that to HTML, DocBook, epub, mobi, and so forth&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.thedigitalcatbooks.com&#x2F;maubook-introduction&#x2F;&quot;&gt;Mau&lt;&#x2F;a&gt; — template-based markup language, heavily inspired by AsciiDoc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;asciidoctor.org&#x2F;docs&#x2F;what-is-asciidoc&#x2F;&quot;&gt;Asciidoctor&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;daneah&#x2F;asciidoc-book-template&quot;&gt;Asciidoc book template&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shape-of-code.coding-guidelines.com&#x2F;2019&#x2F;08&#x2F;11&#x2F;my-books-pdf-generation-workflow&#x2F;&quot;&gt;pdf generation workflow with Asciidoc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sphinx-doc.org&#x2F;en&#x2F;stable&#x2F;index.html&quot;&gt;Sphinx&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;digitalsuperpowers.com&#x2F;blog&#x2F;2019-02-16-publishing-ebook.html&quot;&gt;Self-publishing a book with reStructuredText, Sphinx, Calibre, and vim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bookdown.org&#x2F;home&#x2F;&quot;&gt;Bookdown&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;&quot;&gt;Emacs orgmode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;casual-effects.com&#x2F;markdeep&#x2F;&quot;&gt;Markdeep&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Miscellaneous&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nickjanetakis.com&#x2F;blog&#x2F;vim-is-saving-me-hours-of-work-when-writing-books-and-courses&quot;&gt;Vim is saving me hours of work when writing books &amp;amp; courses&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;joecmarshall.com&#x2F;posts&#x2F;book-writing-environment&#x2F;&quot;&gt;Writing a Book with Unix&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;3697&#x2F;how-do-i-install-fonts&quot;&gt;askubuntu: How do I install fonts?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;9533&#x2F;what-best-combination-of-fonts-for-serif-sans-and-mono-do-you-recommend&quot;&gt;tex.stackexchange: What best combination of fonts for Serif, Sans, and Mono do you recommend?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tug.org&#x2F;FontCatalogue&#x2F;&quot;&gt;LaTeX font catalogue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;karthik&#x2F;markdown_science&#x2F;wiki&#x2F;Tools-to-support-your-markdown-authoring&quot;&gt;Tools to support markdown authoring&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;picular.co&#x2F;&quot;&gt;picular: search engine for colors&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.colorhexa.com&#x2F;&quot;&gt;colorhexa&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ebooks.stackexchange.com&#x2F;questions?sort=votes&quot;&gt;ebooks.stackexchange&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>JavaScript regular expressions cheatsheet and examples</title>
		<published>2020-07-20T00:00:00+00:00</published>
		<updated>2023-10-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/javascript-regexp-cheatsheet/" type="text/html"/>
		<id>https://learnbyexample.github.io/javascript-regexp-cheatsheet/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;js_regexp_example.png&quot; alt=&quot;sample railroad diagram of a regexp&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Above diagram created using &lt;a href=&quot;https:&#x2F;&#x2F;jex.im&#x2F;regulex&quot;&gt;Regulex&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p&gt;This blog post gives an overview of regular expression syntax and features supported by JavaScript. Examples have been tested on the Chrome&#x2F;Chromium console and includes features not available in other browsers and platforms. This post is an excerpt from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&quot;&gt;Understanding JavaScript RegExp&lt;&#x2F;a&gt; book.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;elements-that-define-a-regular-expression&quot;&gt;Elements that define a regular expression&lt;a class=&quot;zola-anchor&quot; href=&quot;#elements-that-define-a-regular-expression&quot; aria-label=&quot;Anchor link for: elements-that-define-a-regular-expression&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Note&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Regular_expressions&quot;&gt;MDN: Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;MDN reference for JavaScript regular expressions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;pat&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;a RegExp object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;const pet = &#x2F;dog&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;save regexp in a variable for reuse, clarity, etc&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;pat&#x2F;.test(s)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;check if the pattern is present anywhere in the input string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns &lt;code&gt;true&lt;&#x2F;code&gt; or &lt;code&gt;false&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;i&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to ignore case when matching alphabets&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;g&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to match all occurrences&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;new RegExp(&#x27;pat&#x27;, &#x27;i&#x27;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;construct RegExp from a string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;optional second argument specifies flags&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use backtick strings with &lt;code&gt;${}&lt;&#x2F;code&gt; for interpolation&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;source&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;property to convert a RegExp object to a string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;helps to insert a RegExp inside another RegExp&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;flags&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;property to get flags of a RegExp object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.replace(&#x2F;pat&#x2F;, &#x27;repl&#x27;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;method for search and replace&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.search(&#x2F;pat&#x2F;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;gives the starting location of the match or &lt;code&gt;-1&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.split(&#x2F;pat&#x2F;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;split a string based on regexp&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Anchors&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start of string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the end of string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to match the start&#x2F;end of line with &lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; anchors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;\r&lt;&#x2F;code&gt;, &lt;code&gt;\n&lt;&#x2F;code&gt;, &lt;code&gt;\u2028&lt;&#x2F;code&gt; and &lt;code&gt;\u2029&lt;&#x2F;code&gt; are line separators&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;DOS-style files use &lt;code&gt;\r\n&lt;&#x2F;code&gt;, may need special attention&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start and end of words&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;word characters: alphabets, digits, underscore&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\B&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matches wherever &lt;code&gt;\b&lt;&#x2F;code&gt; doesn&#x27;t match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;code&gt;^&lt;&#x2F;code&gt;, &lt;code&gt;$&lt;&#x2F;code&gt; and &lt;code&gt;\&lt;&#x2F;code&gt; are &lt;strong&gt;metacharacters&lt;&#x2F;strong&gt; in the above table, as these characters have a special meaning. Prefix a &lt;code&gt;\&lt;&#x2F;code&gt; character to remove the special meaning and match such characters literally. For example, &lt;code&gt;\^&lt;&#x2F;code&gt; will match a &lt;code&gt;^&lt;&#x2F;code&gt; character instead of acting as an anchor.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Feature&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1|pat2|pat3&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple regexp combined as conditional OR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;each alternative can have independent anchors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;group pattern(s), also a capturing group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;a(b|c)d&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;same as &lt;code&gt;abd|acd&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?:pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;non-capturing group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;name&amp;gt;pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;named capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match any character except line separators&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to match line separators as well&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;character class, matches one character among many&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Alternation precedence: pattern which matches earliest in the input gets higher priority. Tie-breaker is left-to-right if matches have the same starting location.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Greedy Quantifiers&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;?&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;0&lt;&#x2F;code&gt; or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;1&lt;&#x2F;code&gt; or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;m&lt;&#x2F;code&gt; to &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match at least &lt;code&gt;m&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match exactly &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;any number of characters between &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2|pat2.*pat1&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match both &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt; in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Greedy&lt;&#x2F;strong&gt; here means that the above quantifiers will match as much as possible that&#x27;ll also honor the overall regexp. Appending a &lt;code&gt;?&lt;&#x2F;code&gt; to greedy quantifiers makes them &lt;strong&gt;non-greedy&lt;&#x2F;strong&gt;, i.e. match as &lt;em&gt;minimally&lt;&#x2F;em&gt; as possible. Quantifiers can be applied to literal characters, groups, backreferences and character classes.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Character class&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[ae;o]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match any of these characters once&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[3-7]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;range of characters from &lt;code&gt;3&lt;&#x2F;code&gt; to &lt;code&gt;7&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[^=b2]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negated set, match other than &lt;code&gt;=&lt;&#x2F;code&gt; or &lt;code&gt;b&lt;&#x2F;code&gt; or &lt;code&gt;2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-z-]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;-&lt;&#x2F;code&gt; should be the first&#x2F;last or escaped using &lt;code&gt;\&lt;&#x2F;code&gt; to match literally&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[+^]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt; shouldn&#x27;t be the first character or escaped using &lt;code&gt;\&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[\]\\]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;]&lt;&#x2F;code&gt; and &lt;code&gt;\&lt;&#x2F;code&gt; should be escaped using &lt;code&gt;\&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[&lt;&#x2F;code&gt; doesn&#x27;t need escaping, but &lt;code&gt;\[&lt;&#x2F;code&gt; can also be used&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\w&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[A-Za-z0-9_]&lt;&#x2F;code&gt; for matching word characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\d&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[0-9]&lt;&#x2F;code&gt; for matching digit characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[ \t\n\r\f\v]&lt;&#x2F;code&gt; for matching whitespace characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\W&lt;&#x2F;code&gt;, &lt;code&gt;\D&lt;&#x2F;code&gt;, and &lt;code&gt;\S&lt;&#x2F;code&gt; for their opposites respectively&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;u&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to enable unicode matching&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;v&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;superset of &lt;code&gt;u&lt;&#x2F;code&gt; flag, enables additional features&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\p{}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Unicode character sets&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\P{}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negated Unicode character sets&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;see &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Regular_expressions&#x2F;Unicode_character_class_escape&quot;&gt;MDN: Unicode character class escape&lt;&#x2F;a&gt; for details&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\u{}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;specify Unicode characters using codepoints&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Lookarounds&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;lookarounds&lt;&#x2F;td&gt;&lt;td&gt;create custom positive&#x2F;negative assertions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;zero-width like anchors and not part of matching portions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negative lookahead assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;!pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negative lookbehind assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?=pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;positive lookahead assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;=pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;positive lookbehind assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;variable length lookbehind is allowed&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!pat1)(?=pat2)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple assertions can be specified next to each other in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;as they mark a matching location without consuming characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;((?!pat).)*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Negates a regexp pattern&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Matched portion&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m = s.match(&#x2F;pat&#x2F;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;assuming the &lt;code&gt;g&lt;&#x2F;code&gt; flag isn&#x27;t used and regexp succeeds,&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns an array with the matched portion and 3 properties&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;index&lt;&#x2F;code&gt; property gives the starting location of the match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;input&lt;&#x2F;code&gt; property gives the input string &lt;code&gt;s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;groups&lt;&#x2F;code&gt; property gives dictionary of named capture groups&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m[0]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;for the above case, gives the entire matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m[N]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matched portion of the Nth capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;d&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to get the starting and ending locations of the matching portions via the &lt;code&gt;indices&lt;&#x2F;code&gt; property&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.match(&#x2F;pat&#x2F;g)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns only the matched portions, no properties&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.matchAll(&#x2F;pat&#x2F;g)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns an iterator containing details for each matched portion and its properties&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Backreference&lt;&#x2F;td&gt;&lt;td&gt;gives the matched portion of the Nth capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;$1&lt;&#x2F;code&gt;, &lt;code&gt;$2&lt;&#x2F;code&gt;, &lt;code&gt;$3&lt;&#x2F;code&gt;, etc in the replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;$&amp;amp;&lt;&#x2F;code&gt; gives the entire matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;$`&lt;&#x2F;code&gt; gives the string before the matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;$&#x27;&lt;&#x2F;code&gt; gives the string after the matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\1&lt;&#x2F;code&gt;, &lt;code&gt;\2&lt;&#x2F;code&gt;, &lt;code&gt;\3&lt;&#x2F;code&gt;, etc within the regexp definition&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$$&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;insert &lt;code&gt;$&lt;&#x2F;code&gt; literally in the replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$0N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;same as &lt;code&gt;$N&lt;&#x2F;code&gt;, allows to separate backreference and other digits&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\N\xhh&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;allows to separate backreference and digits in the regexp definition&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;name&amp;gt;pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;named capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\k&amp;lt;name&amp;gt;&lt;&#x2F;code&gt; for backreferencing in the regexp definition&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;$&amp;lt;name&amp;gt;&lt;&#x2F;code&gt; for backreferencing in the replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;h2 id=&quot;regular-expression-examples&quot;&gt;Regular expression examples&lt;a class=&quot;zola-anchor&quot; href=&quot;#regular-expression-examples&quot; aria-label=&quot;Anchor link for: regular-expression-examples&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test()&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sentence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This is a sample string&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;is&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sentence&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;xyz&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sentence&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;ring&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sentence&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mission success&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mission success
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new RegExp()&lt;&#x2F;code&gt; constructor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RegExp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;i&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;dog&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;i
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RegExp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;tabc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;abc&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;greeting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RegExp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;`${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;greeting&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;()} there`&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;HI there&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;string and line anchors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; string anchors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;cat&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cater&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;surrender&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;newer&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;door&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;er&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;surrender&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;newer&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; use &amp;#39;m&amp;#39; flag to match at the start&#x2F;end of each line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;era&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;dare&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; escape metacharacters to match them literally
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;2&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a^2 + b^2 - C*3&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;&#x2F;code&gt; method and word boundaries&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;catapults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;concatenate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;cat&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;gm&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;* &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;catapults
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;concatenate
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;cat
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spar apparent spare part&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; replace &amp;#39;par&amp;#39; only at the start of word
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X spar apparent spare Xt&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; replace &amp;#39;par&amp;#39; at the end of word but not whole word &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par sX apparent spare part&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;alternations and grouping&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; replace either &amp;#39;cat&amp;#39; at the start of string or &amp;#39;cat&amp;#39; at the end of word
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;catapults concatenate cat scat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Xapults concatenate X sX&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; same as: &#x2F;\bpark\b|\bpart\b&#x2F;g
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;park parked part party&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par(k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;t)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X parked X party&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Guide&#x2F;Regular_Expressions#escaping&quot;&gt;MDN: Regular Expressions Guide&lt;&#x2F;a&gt; provides the &lt;code&gt;escapeRegExp()&lt;&#x2F;code&gt; function, useful to automatically escape metacharacters.
&lt;ul&gt;
&lt;li&gt;See also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;slevithan&#x2F;xregexp&quot;&gt;XRegExp&lt;&#x2F;a&gt;, provides handy methods like &lt;a href=&quot;https:&#x2F;&#x2F;xregexp.com&#x2F;api&#x2F;#escape&quot;&gt;XRegExp.escape()&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;xregexp.com&#x2F;api&#x2F;#union&quot;&gt;XRegExp.union()&lt;&#x2F;a&gt;. The union method has additional functionality of allowing a mix of string and RegExp literals and also takes care of renumbering backreferences.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;escapeRegExp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;*+?^${}()|[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\]\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&amp;amp;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;unionRegExp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;escapeRegExp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RegExp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;unionRegExp&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c^t&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog$&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;f|x&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;g&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;dog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;x&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;dot metacharacter and quantifiers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; matches character &amp;#39;2&amp;#39;, any character and then character &amp;#39;3&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;35&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;3&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;8&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;485&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; &amp;#39;s&amp;#39; flag will allow line separators to be matched as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi there&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;Have a Nice Day&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;the&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;ice&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi X Day&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; same as: &#x2F;part|parrot|parent&#x2F;g
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par part parrot parent&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;par(en&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;ro)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;t&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par X X X&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ac&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abbc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xabbbcz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;ab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{1,4}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;c&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abbc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xabbbcz&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match()&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; entire matched portion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;too soon a song snatch&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;so&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;n&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;soon&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; matched portion of the second capture group
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;purchase &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coffee:100g tea:250g sugar:75g chocolate:50g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;purchase&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;chocolate:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)g&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;250&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; starting location of the matching portion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat and dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;dog&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;index
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; start and end+1 location of the matching portion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;awesome&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;so&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;indices&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; get all matching portions with &amp;#39;g&amp;#39; flag
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; no properties or group portions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spar apparent spare part&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[et]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;part&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; useful for debugging purposes as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;green:3.14:teal::brown:oh!:blue&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;:&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:3.14:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;::&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:oh!:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;matchAll()&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; same as: match(&#x2F;so*n&#x2F;g)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;song too soon snatch&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;matchAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;so&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;n&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;son&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;soon&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sn&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; get the starting index for each match
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;song too soon snatch&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;matchAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;so&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;n&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; get only the capture group portions as an array for each match
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2023&#x2F;04,1986&#x2F;Mar,&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;matchAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;),&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2023&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;04&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1986&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;  [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Prototype&lt;&#x2F;span&gt;&lt;span&gt;]]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;function&#x2F;dictionary in the replacement section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;titleCase&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;toLowerCase&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aBc ac ADC aBbBC&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(a)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;c)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;ig&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;titleCase&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Abc Ac Adc Abbbc&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1 42 317&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2 84 634&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;swap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tiger&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tiger&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat tiger dog tiger cat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;tiger&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;swap&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tiger cat dog cat tiger&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split()&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; split based on one or more digit characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample123string42with777numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;string&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;with&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; include the portion that caused the split as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample123string42with777numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;string&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;with&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;777&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; split based on digit or whitespace characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;3star&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;7 77&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;**&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\d\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;star&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; use non-capturing group if capturing is not needed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123handed42handy777handful500&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;hand(?:y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;ful)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ed42&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;777&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;500&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;backreferencing with normal&#x2F;non-capturing&#x2F;named capture groups&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; remove any number of consecutive duplicate words separated by space
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; use \W+ instead of space to cover cases like &amp;#39;a;a&amp;lt;-;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa a a a 42 f_1 f_1 f_13.14&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa a 42 f_1 f_13.14&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; add something around the entire matched portion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;52 apples and 31 mangoes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;($&amp;amp;)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(52) apples and (31) mangoes&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; duplicate the first field and add it as the last field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fork,42,nice,3.14&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$&amp;amp;,$`&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fork,42,nice,3.14,fork&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; use non-capturing groups when backreferencing isn&amp;#39;t needed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2,3,4,5,6,7&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;((?:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;,)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1($2)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2,3,(4),5,6,7&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; named capture groups, same as: replace(&#x2F;(\w+),(\w+)&#x2F;g, &amp;#39;$2,$1&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;good,bad 42,24 x,y&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;fw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;),(?&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;sw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$&amp;lt;sw&amp;gt;,$&amp;lt;fw&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bad,good 24,42 y,x&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for lookarounds&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; change &amp;#39;cat&amp;#39; only if it is not followed by a digit character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; note that the end of string satisfies the given assertion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; &amp;#39;catcat&amp;#39; has two matches as the assertion doesn&amp;#39;t consume characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey cats! cat42 cat_5 catcat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;cat(?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey dogs! cat42 dog_5 dogdog&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; change whole word only if it is not preceded by : or --
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:cart apple --rest ;tea&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?&amp;lt;!:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;--)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:cart X --rest ;X&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; extract digits only if it is preceded by - and followed by ; or :
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 apple-5, fig3; x-83, y-20: f12&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?&amp;lt;=-)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[;:]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;20&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; words containing all lowercase vowels in any order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sequoia&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;questionable&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;exhibit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;equation&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;a)(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;e)(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;i)(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;o)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;u&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sequoia&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;questionable&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;equation&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; replace only the third occurrence of &amp;#39;cat&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat scatter cater scat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?&amp;lt;=(cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)cat&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat scatter Xer scat&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; match if &amp;#39;do&amp;#39; is not there between &amp;#39;at&amp;#39; and &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;at((?!do)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,parrot&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;u&lt;&#x2F;code&gt; and &lt;code&gt;v&lt;&#x2F;code&gt; flags&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; extract all consecutive letters, use \P{L} to invert the set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox:αλεπού,eagle:αετός&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;{L}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;gu&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;αλεπού&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;eagle&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;αετός&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; extract all consecutive Greek letters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox:αλεπού,eagle:αετός&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;{sc=Greek}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;gu&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;αλεπού&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;αετός&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; extract whole words not surrounded by punctuation marks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tie. ink east;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;{P})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;(?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;{P})&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;gu&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ink&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; remove all punctuation characters except . ! and ?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;para &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;Hi&amp;quot;, there! How *are* you? All fine here.&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;para&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;[\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;[.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;!?&lt;&#x2F;span&gt;&lt;span&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gv&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi there! How are you? All fine here.&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;debugging-and-visualization-tools&quot;&gt;Debugging and Visualization tools&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging-and-visualization-tools&quot; aria-label=&quot;Anchor link for: debugging-and-visualization-tools&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As your regexp gets complicated, it can get difficult to debug when you run into issues. Building your regexp step by step from scratch and testing against input strings will go a long way in correcting the problem. To aid in such a process, you could use &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20614847&quot;&gt;various online regexp tools&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;regex101.com&#x2F;r&#x2F;HSeO0z&#x2F;1&quot;&gt;regex101&lt;&#x2F;a&gt; is a popular site to test your regexp. You&#x27;ll have to first choose the flavor as JavaScript. Then you can add your regexp, input strings, choose flags and an optional replacement string. Matching portions will be highlighted and explanation is offered in separate panes. There&#x27;s also a quick reference and other features like link sharing, code generator, quiz, cheatsheet, etc.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;regex101.png&quot; alt=&quot;regex101 example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Another useful tool is &lt;a href=&quot;https:&#x2F;&#x2F;jex.im&#x2F;regulex&#x2F;#!flags=&amp;amp;re=%5Cbpar(en%7Cro)%3Ft%5Cb&quot;&gt;jex: regulex&lt;&#x2F;a&gt; which converts your regexp to a railroad diagram, thus providing a visual aid to understanding the pattern.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;regulex.png&quot; alt=&quot;regulex example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;understanding-javascript-regexp-book&quot;&gt;Understanding JavaScript RegExp book&lt;a class=&quot;zola-anchor&quot; href=&quot;#understanding-javascript-regexp-book&quot; aria-label=&quot;Anchor link for: understanding-javascript-regexp-book&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit my repo &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&quot;&gt;learn_js_regexp&lt;&#x2F;a&gt; for details about the book I wrote on JavaScript regular expressions. The ebook uses plenty of examples to explain the concepts from the basics and includes &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&#x2F;blob&#x2F;master&#x2F;Exercises.md&quot;&gt;exercises&lt;&#x2F;a&gt; to test your understanding. The cheatsheet and examples presented in this post are based on the contents of this book.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;learn_js_regexp&#x2F;master&#x2F;images&#x2F;js_regexp_ls.png&quot; width=&quot;640px&quot; height=&quot;360px&quot; alt=&quot;Understanding JavaScript RegExp cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python regular expression cheatsheet and examples</title>
		<published>2020-07-03T00:00:00+00:00</published>
		<updated>2023-10-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/python-regex-cheatsheet/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-regex-cheatsheet/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;pyregex_example.png&quot; alt=&quot;pyregex example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Above visualization created using&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.debuggex.com&quot;&gt;debuggex&lt;&#x2F;a&gt; &lt;em&gt;for the pattern&lt;&#x2F;em&gt; &lt;code&gt;r&#x27;\bpar(en|ro)?t\b&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;re.html&quot;&gt;docs.python: re&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A regular expression (or RE) specifies a set of strings that matches it; the functions in this module let you check if a particular string matches a given regular expression&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This blog post gives an overview and examples of regular expression syntax as implemented by the &lt;code&gt;re&lt;&#x2F;code&gt; built-in module (Python 3.11+). Assume ASCII character set unless otherwise specified. This post is an excerpt from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; book.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;elements-that-define-a-regular-expression&quot;&gt;Elements that define a regular expression&lt;a class=&quot;zola-anchor&quot; href=&quot;#elements-that-define-a-regular-expression&quot; aria-label=&quot;Anchor link for: elements-that-define-a-regular-expression&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Anchors&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\A&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start of string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\Z&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the end of string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start of line&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the end of line&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\n&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;newline character is used as line separator&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.MULTILINE&lt;&#x2F;code&gt; or &lt;code&gt;re.M&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to treat input as multiline string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start&#x2F;end of words&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;word characters: alphabets, digits, underscore&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\B&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matches wherever &lt;code&gt;\b&lt;&#x2F;code&gt; doesn&#x27;t match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;code&gt;^&lt;&#x2F;code&gt;, &lt;code&gt;$&lt;&#x2F;code&gt; and &lt;code&gt;\&lt;&#x2F;code&gt; are metacharacters in the above table, as these characters have special meaning. Prefix a &lt;code&gt;\&lt;&#x2F;code&gt; character to remove the special meaning and match such characters literally. For example, &lt;code&gt;\^&lt;&#x2F;code&gt; will match a &lt;code&gt;^&lt;&#x2F;code&gt; character instead of acting as an anchor.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Feature&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;|&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple RE combined as conditional OR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;each alternative can have independent anchors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;group pattern(s), also a capturing group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;a(b|c)d&lt;&#x2F;code&gt; is same as &lt;code&gt;abd|acd&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?:pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;non-capturing group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?P&amp;lt;name&amp;gt;pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;named capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match any character except the newline character &lt;code&gt;\n&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Character class, matches one character among many&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Greedy Quantifiers&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match zero or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match one or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;?&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match zero or one times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match &lt;code&gt;m&lt;&#x2F;code&gt; to &lt;code&gt;n&lt;&#x2F;code&gt; times (inclusive)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match at least &lt;code&gt;m&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match up to &lt;code&gt;n&lt;&#x2F;code&gt; times (including &lt;code&gt;0&lt;&#x2F;code&gt; times)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match exactly &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;any number of characters between &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2|pat2.*pat1&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match both &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt; in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Greedy here means that the above quantifiers will match as much as possible that&#x27;ll also honor the overall RE. Appending a &lt;code&gt;?&lt;&#x2F;code&gt; to greedy quantifiers makes them &lt;strong&gt;non-greedy&lt;&#x2F;strong&gt;, i.e. match as &lt;em&gt;minimally&lt;&#x2F;em&gt; as possible. Appending a &lt;code&gt;+&lt;&#x2F;code&gt; to greedy quantifiers makes them &lt;strong&gt;possessive&lt;&#x2F;strong&gt;, which prevents backtracking. You can also use &lt;code&gt;(?&amp;gt;pat)&lt;&#x2F;code&gt; &lt;strong&gt;atomic grouping&lt;&#x2F;strong&gt; to safeguard from backtracking. Quantifiers can be applied to literal characters, groups, backreferences and character classes.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Character class&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[aeiou]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match any vowel&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[^aeiou]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt; inverts selection, so this matches any consonant&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-f]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;-&lt;&#x2F;code&gt; defines a range, so this matches any of abcdef characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\d&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match a digit, same as &lt;code&gt;[0-9]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\D&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match non-digit, same as &lt;code&gt;[^0-9]&lt;&#x2F;code&gt; or &lt;code&gt;[^\d]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\w&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match word character, same as &lt;code&gt;[a-zA-Z0-9_]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\W&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match non-word character, same as &lt;code&gt;[^a-zA-Z0-9_]&lt;&#x2F;code&gt; or &lt;code&gt;[^\w]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match whitespace character, same as &lt;code&gt;[\ \t\n\r\f\v]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\S&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match non-whitespace character, same as &lt;code&gt;[^\ \t\n\r\f\v]&lt;&#x2F;code&gt; or &lt;code&gt;[^\s]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Lookarounds&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;lookarounds&lt;&#x2F;td&gt;&lt;td&gt;custom assertions, zero-width like anchors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negative lookahead assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;!pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negative lookbehind assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?=pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;positive lookahead assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;=pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;positive lookbehind assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!pat1)(?=pat2)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple assertions can be specified in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;as they mark a matching location without consuming characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;((?!pat).)*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Negate a grouping, similar to negated character class&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Flags&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.IGNORECASE&lt;&#x2F;code&gt; or &lt;code&gt;re.I&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to ignore case&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.DOTALL&lt;&#x2F;code&gt; or &lt;code&gt;re.S&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;allow &lt;code&gt;.&lt;&#x2F;code&gt; metacharacter to match newline character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;flags=re.S|re.I&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple flags can be combined using &lt;code&gt;|&lt;&#x2F;code&gt; operator&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.MULTILINE&lt;&#x2F;code&gt; or &lt;code&gt;re.M&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;allow &lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; anchors to match line wise&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.VERBOSE&lt;&#x2F;code&gt; or &lt;code&gt;re.X&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;allows to use literal whitespaces for aligning purposes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;and to add comments after the &lt;code&gt;#&lt;&#x2F;code&gt; character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;escape spaces and &lt;code&gt;#&lt;&#x2F;code&gt; if needed as part of actual RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.ASCII&lt;&#x2F;code&gt; or &lt;code&gt;re.A&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match only ASCII characters for &lt;code&gt;\b&lt;&#x2F;code&gt;, &lt;code&gt;\w&lt;&#x2F;code&gt;, &lt;code&gt;\d&lt;&#x2F;code&gt;, &lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;and their opposites, applicable only for Unicode patterns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.LOCALE&lt;&#x2F;code&gt; or &lt;code&gt;re.L&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;use locale settings for byte patterns and 8-bit locales&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?#comment)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;another way to add comments, not a flag&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?flags:pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;inline flags only for this &lt;code&gt;pat&lt;&#x2F;code&gt;, overrides &lt;code&gt;flags&lt;&#x2F;code&gt; argument&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;flags is &lt;code&gt;i&lt;&#x2F;code&gt; for &lt;code&gt;re.I&lt;&#x2F;code&gt;, &lt;code&gt;s&lt;&#x2F;code&gt; for &lt;code&gt;re.S&lt;&#x2F;code&gt;, etc, except &lt;code&gt;L&lt;&#x2F;code&gt; for &lt;code&gt;re.L&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?-flags:pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negate flags only for this &lt;code&gt;pat&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?flags-flags:pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;apply and negate particular flags only for this &lt;code&gt;pat&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?flags)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;apply flags for whole RE, can be used only at start of RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;anchors if any, should be specified after &lt;code&gt;(?flags)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Matched portion&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.Match&lt;&#x2F;code&gt; object&lt;&#x2F;td&gt;&lt;td&gt;details like matched portions, location, etc&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m[0]&lt;&#x2F;code&gt; or &lt;code&gt;m.group(0)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;entire matched portion of &lt;code&gt;re.Match&lt;&#x2F;code&gt; object &lt;code&gt;m&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m[n]&lt;&#x2F;code&gt; or &lt;code&gt;m.group(n)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matched portion of &lt;em&gt;n&lt;&#x2F;em&gt;th capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m.groups()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;tuple of all the capture groups&#x27; matched portions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m.span()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;start and end+1 index of entire matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;pass a number to get span of that particular capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;can also use &lt;code&gt;m.start()&lt;&#x2F;code&gt; and &lt;code&gt;m.end()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;backreference, gives matched portion of &lt;em&gt;N&lt;&#x2F;em&gt;th capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;applies to both search and replacement sections&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;possible values: &lt;code&gt;\1&lt;&#x2F;code&gt;, &lt;code&gt;\2&lt;&#x2F;code&gt; up to &lt;code&gt;\99&lt;&#x2F;code&gt; provided no more digits&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\g&amp;lt;N&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;backreference, gives matched portion of Nth capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;possible values: &lt;code&gt;\g&amp;lt;0&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;\g&amp;lt;1&amp;gt;&lt;&#x2F;code&gt;, etc (not limited to 99)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;\g&amp;lt;0&amp;gt;&lt;&#x2F;code&gt; refers to entire matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?P&amp;lt;name&amp;gt;pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;named capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;refer as &lt;code&gt;&#x27;name&#x27;&lt;&#x2F;code&gt; in &lt;code&gt;re.Match&lt;&#x2F;code&gt; object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;refer as &lt;code&gt;(?P=name)&lt;&#x2F;code&gt; in search section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;refer as &lt;code&gt;\g&amp;lt;name&amp;gt;&lt;&#x2F;code&gt; in replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;groupdict&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;method applied on a &lt;code&gt;re.Match&lt;&#x2F;code&gt; object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;gives named capture group portions as a &lt;code&gt;dict&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;code&gt;\0&lt;&#x2F;code&gt; and &lt;code&gt;\100&lt;&#x2F;code&gt; onwards are considered as octal values, hence cannot be used as backreferences.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;re-module-functions&quot;&gt;re module functions&lt;a class=&quot;zola-anchor&quot; href=&quot;#re-module-functions&quot; aria-label=&quot;Anchor link for: re-module-functions&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.search&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Check if given pattern is present anywhere in input string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Output is a &lt;code&gt;re.Match&lt;&#x2F;code&gt; object, usable in conditional expressions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;r-strings preferred to define RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Use byte pattern for byte input&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Python also maintains a small cache of recent RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.fullmatch&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;ensures pattern matches the entire input string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.compile&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Compile a pattern for reuse, outputs &lt;code&gt;re.Pattern&lt;&#x2F;code&gt; object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.sub&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;search and replace&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.sub(r&#x27;pat&#x27;, f, s)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;function &lt;code&gt;f&lt;&#x2F;code&gt; with &lt;code&gt;re.Match&lt;&#x2F;code&gt; object as argument&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.escape&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;automatically escape all metacharacters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.split&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;split a string based on RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;text matched by the groups will be part of the output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;portion matched by pattern outside group won&#x27;t be in output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.findall&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns all the matches as a list&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;if 1 capture group is used, only its matches are returned&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1+, each element will be tuple of capture groups&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;portion matched by pattern outside group won&#x27;t be in output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.finditer&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;iterator with &lt;code&gt;re.Match&lt;&#x2F;code&gt; object for each match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.subn&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;gives tuple of modified string and number of substitutions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The function definitions are given below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fullmatch&lt;&#x2F;span&gt;&lt;span&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(pattern, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(pattern, repl, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;escape&lt;&#x2F;span&gt;&lt;span&gt;(pattern)
&lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maxsplit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;finditer&lt;&#x2F;span&gt;&lt;span&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;subn&lt;&#x2F;span&gt;&lt;span&gt;(pattern, repl, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;regular-expression-examples&quot;&gt;Regular expression examples&lt;a class=&quot;zola-anchor&quot; href=&quot;#regular-expression-examples&quot; aria-label=&quot;Anchor link for: regular-expression-examples&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As a good practice, always use &lt;strong&gt;raw strings&lt;&#x2F;strong&gt; to construct RE, unless other formats are required. This will avoid conflict between special meaning of the backslash character in RE and string literals.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; I wrote an interactive TUI app to help you experiment with the examples presented below. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PyRegexPlayground&quot;&gt;PyRegexPlayground&lt;&#x2F;a&gt; repo for installation instructions and usage guide. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps&#x2F;tree&#x2F;main&#x2F;PyRegexExercises&quot;&gt;PyRegexExercises&lt;&#x2F;a&gt; repo for a TUI app with 100+ Python regex exercises.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.search()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;sentence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This is a sample string&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# need to load the re module before use
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# check if &amp;#39;sentence&amp;#39; contains the pattern described by RE argument
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, sentence))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# ignore case while searching for a match
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, sentence, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;re.I))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# example when pattern isn&amp;#39;t found in the input string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;xyz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, sentence))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# re.search output can be directly used in conditional expressions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;ring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, sentence):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mission success&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span&gt;mission success
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use raw byte strings for patterns if input is of byte data type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;rb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This is a sample string&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;string and line anchors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match the start of the input string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;top spot&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match the start of a line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;top spot&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;re.M))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match the end of strings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;surrender&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;up&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;newer&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;do&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;era&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;eel&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;pest&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;er&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, w)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;surrender&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;newer&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# check if there&amp;#39;s a whole line &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;dare&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;re.M))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.findall()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match &amp;#39;par&amp;#39; with optional &amp;#39;s&amp;#39; at start and optional &amp;#39;e&amp;#39; at end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;pare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spar apparent spare part pare&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;pare&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# numbers &amp;gt;= 100 with optional leading zeros
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use r&amp;#39;\b0*[1-9]\d{2,}\b&amp;#39; if possessive quantifiers isn&amp;#39;t supported
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3,}\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0501 035 154 12 26 98234&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0501&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;154&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;98234&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# if multiple capturing groups are used, each element of output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# will be a tuple of strings of all the capture groups
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;&#x2F;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;&#x2F;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2020&#x2F;04,1986&#x2F;Mar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2020&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;04&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1986&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# normal capture group will hinder ability to get whole match
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# non-capturing group to the rescue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(?:st&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;in)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cost akin more east run&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cost&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;akin&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;east&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# useful for debugging purposes as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;green:3.14:teal::brown:oh!:blue&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:3.14:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;::&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:oh!:&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.split()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# split based on one or more digit characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample123string42with777numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;string&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;with&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# split based on digit or whitespace characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\d\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;3star&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;7 77&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;**&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;star&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# to include the matching delimiter strings as well in the output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample123string42with777numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;string&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;with&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;777&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# multiple capture groups example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that the portion matched by b+ isn&amp;#39;t present in the output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;3.14aabccc42&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;3.14&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ccc&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use non-capturing group if capturing is not needed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;hand(?:y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;ful)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123handed42handy777handful500&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123handed42&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;777&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;500&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;backreferencing within the search pattern&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# whole words that have at least one consecutive repeated character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;effort&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;flee&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;facade&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;oddball&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;rat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tool&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, w)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;effort&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;flee&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;oddball&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tool&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;working with matched portions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# re.Match object
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;so&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;too soon a song snatch&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;re.Match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;; span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;), match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;soon&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# retrieving entire matched portion, note the use of [0]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;motivation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Doing is often better than thinking of doing.&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;ink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, motivation)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;often better than think&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# capture group example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;purchase &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coffee:100g tea:250g sugar:75g chocolate:50g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;chocolate:(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, purchase)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# to get the matched portion of the second capture group
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;m[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;250&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# to get a tuple of all the capture groups
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;m.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;100&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;250&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;50&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.finditer()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# numbers &amp;lt; 350
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;m_iter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;finditer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0-9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;45 349 651 593 4 204 350&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[m[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;m_iter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(m[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;350&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;45&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;349&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;4&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;204&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# start and end+1 index of each matching portion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;m_iter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;finditer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;so&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;song too soon snatch&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;m_iter:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(m.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.sub()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# add something to the start of every line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ip_lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;catapults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;concatenate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;cat&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;* &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ip_lines, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;re.M))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;catapults
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;concatenate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;cat
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace &amp;#39;par&amp;#39; only at the start of a word
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spar apparent spare part&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X spar apparent spare Xt&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: r&amp;#39;part|parrot|parent&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par(en&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;ro)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par part parrot parent&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par X X X&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove first two columns where : is delimiter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;:]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple:123:banana:cherry&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;banana:cherry&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;backreferencing in the replacement section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove any number of consecutive duplicate words separated by space
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use \W+ instead of space to cover cases like &amp;#39;a;a&amp;lt;-;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa a a a 42 f_1 f_1 f_13.14&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa a 42 f_1 f_13.14&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# add something around the matched strings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;0)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;52 apples and 31 mangoes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(520) apples and (310) mangoes&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# swap words that are separated by a comma
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;),(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;good,bad 42,24&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bad,good 24,42&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# example with both capturing and non-capturing groups
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)(?:abc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1000abcabc42 12abcd21&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42:1000 12abcd21&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;using functions in the replacement section of &lt;code&gt;re.sub()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from &lt;&#x2F;span&gt;&lt;span&gt;math &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;factorial
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1 2 3 4 5&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fact_num&lt;&#x2F;span&gt;&lt;span&gt;(n):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(n[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, fact_num, numbers)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1 2 6 24 120&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# using lambda
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(m[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]))), numbers)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1 2 6 24 120&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for lookarounds&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change &amp;#39;cat&amp;#39; only if it is not followed by a digit character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that the end of string satisfies the given assertion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# &amp;#39;catcat&amp;#39; has two matches as the assertion doesn&amp;#39;t consume characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;cat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey cats! cat42 cat_5 catcat&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey dogs! cat42 dog_5 dogdog&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change whole word only if it is not preceded by : or -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;![:-]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:cart &amp;lt;apple -rest ;tea&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:cart &amp;lt;X -rest ;X&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# extract digits only if it is preceded by - and followed by ; or :
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;-)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?=[:;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 apple-5, fig3; x-83, y-20: f12&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;20&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# words containing &amp;#39;b&amp;#39; and &amp;#39;e&amp;#39; and &amp;#39;t&amp;#39; in any order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sequoia&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;questionable&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;exhibit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;equation&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?=.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;b)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?=.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;e)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, w)]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;questionable&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;exhibit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match if &amp;#39;do&amp;#39; is not there between &amp;#39;at&amp;#39; and &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;at((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;do)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,parrot&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match if &amp;#39;go&amp;#39; is not there between &amp;#39;at&amp;#39; and &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;at((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;go)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,parrot&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.compile()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Regular expressions can be compiled using the &lt;code&gt;re.compile()&lt;&#x2F;code&gt; function, which gives back a &lt;code&gt;re.Pattern&lt;&#x2F;code&gt; object. The top level &lt;code&gt;re&lt;&#x2F;code&gt; module functions are all available as methods for this object. Compiling a regular expression helps if the RE has to be used in multiple places or called upon multiple times inside a loop (speed benefit). By default, Python maintains a small list of recently used RE, so the speed benefit doesn&#x27;t apply for trivial use cases.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;dog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(pet)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;re.Pattern&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(pet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;They bought a dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(pet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;A cat crossed their path&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a+b(addition) - foo() + c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;(#modulo)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a+b - foo + c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;pat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi there(greeting). Nice day(a(b)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi there. Nice day&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&gt;
&lt;h2 id=&quot;understanding-python-re-gex-book&quot;&gt;Understanding Python re(gex)? book&lt;a class=&quot;zola-anchor&quot; href=&quot;#understanding-python-re-gex-book&quot; aria-label=&quot;Anchor link for: understanding-python-re-gex-book&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit my GitHub repo &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Understanding Python re(gex)?&lt;&#x2F;a&gt; for details about the book I wrote on Python regular expressions. The book uses plenty of examples to explain the concepts from the basics and introduces more advanced concepts step-by-step. The book also covers the &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;third-party regex module&lt;&#x2F;a&gt;. The cheatsheet and examples presented in this post are based on the contents of this book.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;master&#x2F;images&#x2F;py_regex_ls.png&quot; width=&quot;640px&quot; height=&quot;360px&quot; alt=&quot;Understanding Python re(gex)? cover image&quot; loading=&quot;lazy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Example driven book on Python regular expressions</title>
		<published>2019-08-09T00:00:00+00:00</published>
		<updated>2023-02-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/python-regex-book-version2/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-regex-book-version2/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I recently updated my &lt;strong&gt;Python re(gex)?&lt;&#x2F;strong&gt; ebook.&lt;&#x2F;p&gt;
&lt;p&gt;Get the ebook using either of these sites:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For web version of the book, visit &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&lt;&#x2F;a&gt;. Code snippets, example files, sample chapters, markdown source, etc are available on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&lt;&#x2F;a&gt;. I&#x27;m generating the PDF&#x2F;EPUB versions using &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;pandoc&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This book covers both &lt;code&gt;re&lt;&#x2F;code&gt; module and the third-party &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;regex&lt;&#x2F;a&gt; module. Examples are used extensively, please follow along by typing them out. Exercises are included to test your understanding and chapters have cheatsheets for easy reference.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Why is it needed?&lt;&#x2F;li&gt;
&lt;li&gt;re introduction&lt;&#x2F;li&gt;
&lt;li&gt;Anchors&lt;&#x2F;li&gt;
&lt;li&gt;Alternation and Grouping&lt;&#x2F;li&gt;
&lt;li&gt;Escaping metacharacters&lt;&#x2F;li&gt;
&lt;li&gt;Dot metacharacter and Quantifiers&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Tools for debugging and visualization&lt;&#x2F;li&gt;
&lt;li&gt;Working with matched portions&lt;&#x2F;li&gt;
&lt;li&gt;Character class&lt;&#x2F;li&gt;
&lt;li&gt;Groupings and backreferences&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Common tasks&lt;&#x2F;li&gt;
&lt;li&gt;Lookarounds&lt;&#x2F;li&gt;
&lt;li&gt;Flags&lt;&#x2F;li&gt;
&lt;li&gt;Unicode&lt;&#x2F;li&gt;
&lt;li&gt;regex module&lt;&#x2F;li&gt;
&lt;li&gt;Gotchas&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hope you find the book useful. I would be grateful for your feedback and suggestions (via email or &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;twitter&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>GNU GREP and RIPGREP</title>
		<published>2019-05-16T00:00:00+00:00</published>
		<updated>2023-02-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/grep-book-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/grep-book-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I recently self-published my third book, this one is about &lt;strong&gt;GNU GREP and RIPGREP&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&#x2F;master&#x2F;images&#x2F;grep_ls.png&quot; alt=&quot;GNU GREP and RIPGREP cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Get the ebook using either of these sites:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnugrep_ripgrep&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnugrep_ripgrep&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;gnugrep_ripgrep&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;gnugrep_ripgrep&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; Please use a valid e-mail and save the mail you receive, you&#x27;ll get free updates for future versions.&lt;&#x2F;p&gt;
&lt;p&gt;Code snippets, example files, sample chapters, markdown source, etc are available on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This book covers features of &lt;code&gt;GNU grep&lt;&#x2F;code&gt; and &lt;code&gt;ripgrep&lt;&#x2F;code&gt; along with discussion on BRE&#x2F;ERE&#x2F;PCRE(2)&#x2F;Rust &lt;strong&gt;regular expressions&lt;&#x2F;strong&gt;. Examples are used extensively, please follow along by typing them out. Exercises are also included to test your understanding.&lt;&#x2F;p&gt;
&lt;p&gt;Some of you might be familiar with my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processing&quot;&gt;Command Line Text Processing&lt;&#x2F;a&gt; repo. This book is based on the &lt;code&gt;grep&lt;&#x2F;code&gt; chapter - edited to add more descriptions, better examples, exercises, etc. Also, I took the plunge and checked out &lt;code&gt;ripgrep&lt;&#x2F;code&gt; while working on this book. I&#x27;d assumed it would be similar to &lt;code&gt;gnu grep&lt;&#x2F;code&gt; and I just need simple changes to present it in the book. Well, it turned out lot more work and I had to settle for not covering all the options and customizations. In hindsight, would&#x27;ve been better if I did a separate book. Speed wise, &lt;code&gt;ripgrep&lt;&#x2F;code&gt; is very impressive and has plenty of additional nice features. For example: the multiline &lt;code&gt;-U&lt;&#x2F;code&gt; and replace &lt;code&gt;-r&lt;&#x2F;code&gt; options of &lt;code&gt;ripgrep&lt;&#x2F;code&gt; are quite handy - you can use this instead of &lt;code&gt;sed&lt;&#x2F;code&gt; for some cases with added advantage of speed, &lt;code&gt;-F&lt;&#x2F;code&gt; option and better regexp features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;Frequently used options&lt;&#x2F;li&gt;
&lt;li&gt;BRE&#x2F;ERE Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Context matching&lt;&#x2F;li&gt;
&lt;li&gt;Recursive search&lt;&#x2F;li&gt;
&lt;li&gt;Miscellaneous options&lt;&#x2F;li&gt;
&lt;li&gt;Perl Compatible Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Gotchas and Tricks&lt;&#x2F;li&gt;
&lt;li&gt;ripgrep&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hope you find the book useful. I would be grateful for your feedback and suggestions (via email or &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;twitter&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Creating GUI Applications with wxPython - book review</title>
		<published>2019-05-13T00:00:00+00:00</published>
		<updated>2023-02-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/python-gui-book-review/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-gui-book-review/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_gui&#x2F;GUI_example.jpg&quot; alt=&quot;GUI example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Photo Credit: &lt;a href=&quot;https:&#x2F;&#x2F;www.pexels.com&#x2F;photo&#x2F;apple-computer-desk-devices-326501&#x2F;&quot;&gt;Tranmautritam&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;www.pexels.com&#x2F;&quot;&gt;Pexels&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p&gt;I&#x27;ve always wanted to create nice looking, useful GUI applications over the years. And I&#x27;ve given up most of the time as the programming seemed too difficult for me and GUI requires at least some level of design skills. I only managed to grit through one Android app for over a year as it was a dream game from school days and I had loads of free time having quit my job. At the end of it though, I had a spaghetti mess of several 1000+ lines programs and a strong aversion to Java and object oriented programming. Part of the reason is that I didn&#x27;t try to learn in a formal way, just started from a tutorial closest to the game I wanted to do.&lt;&#x2F;p&gt;
&lt;p&gt;Several years later, here I am, trying my hand with GUI again. I have several small to medium scale apps in mind to implement and hopefully I&#x27;ll avoid previous mistakes, especially feature creep. When I saw &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;driscollis&#x2F;status&#x2F;1109106540160733184&quot;&gt;this tweet from Mike Driscoll&lt;&#x2F;a&gt;, I took up the offer. I got a free book in exchange for reviewing &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;2019&#x2F;05&#x2F;08&#x2F;creating-gui-applications-with-wxpython-now-available&#x2F;&quot;&gt;Creating GUI Applications with wxPython&lt;&#x2F;a&gt;. The book is currently on sale till May 15. Having to review has served as an extra incentive to read the book regularly, and so far I&#x27;m quite satisfied to have done so.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_gui&#x2F;wxPython_book_cover.png&quot; alt=&quot;book cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I hadn&#x27;t heard of &lt;a href=&quot;https:&#x2F;&#x2F;wxpython.org&quot;&gt;wxPython&lt;&#x2F;a&gt; before this book. When it comes to GUI in Python, I knew about &lt;code&gt;tkinter&lt;&#x2F;code&gt; which comes by default with standard libary, &lt;a href=&quot;https:&#x2F;&#x2F;kivy.org&quot;&gt;Kivy&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.pygame.org&quot;&gt;Pygame&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;PyQt5&#x2F;&quot;&gt;PyQt5&lt;&#x2F;a&gt;. This book starts with an introduction to &lt;code&gt;wxPython&lt;&#x2F;code&gt; and then dives into project-based approach. I&#x27;ve finished half the chapters so far, covering four project concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Image viewer&lt;&#x2F;li&gt;
&lt;li&gt;Database viewer and editor&lt;&#x2F;li&gt;
&lt;li&gt;Calculator&lt;&#x2F;li&gt;
&lt;li&gt;Archiver&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_gui&#x2F;calculator.png&quot; alt=&quot;calculator&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rest of the chapters cover these topics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MP3 tag editor&lt;&#x2F;li&gt;
&lt;li&gt;Image application using NASA&#x27;s API&lt;&#x2F;li&gt;
&lt;li&gt;PDF merger&#x2F;splitter&lt;&#x2F;li&gt;
&lt;li&gt;File search&lt;&#x2F;li&gt;
&lt;li&gt;FTP application&lt;&#x2F;li&gt;
&lt;li&gt;XML editor&lt;&#x2F;li&gt;
&lt;li&gt;Distributing your application&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also a couple of appendix chapters.&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned in book&#x27;s introduction, you definitely need to be comfortable with Python classes before you start this book. The code used in the book is also available from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;driscollis&#x2F;applications_with_wxpython&quot;&gt;GitHub repo&lt;&#x2F;a&gt;, but I highly recommend to type them manually.&lt;&#x2F;p&gt;
&lt;p&gt;The project nature also means that after chapter 3, you could probably skip chapters you are not interested in. For example, I didn&#x27;t pay too much attention to database chapters as I don&#x27;t have much experience with databases. Each project is described and shown step by step. The projects could be run at different stages as well - playing around with the GUI at those points helps in mapping code-to-output, as well as to experiment different settings.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, I would highly recommend this book for those wanting to start coding GUI applications in Python. And please do contact the author to let him know your feedback or if you have any clarifications. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python for maths</title>
		<published>2019-03-22T00:00:00+00:00</published>
		<updated>2023-02-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/python-for-maths/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-for-maths/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_for_maths&#x2F;gravitational_plot.png&quot; alt=&quot;sample plot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The above image was generated using &lt;code&gt;matplotlib&lt;&#x2F;code&gt; courtesy code provided by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;doingmathwithpython&#x2F;code&#x2F;blob&#x2F;master&#x2F;chapter2&#x2F;Chapter2.ipynb&quot;&gt;Doing Math with Python&lt;&#x2F;a&gt; book.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Last month, I had an opportunity to conduct beginner Python workshop for maths department students in an arts and science college. It was a great experience and I had my first taste of how Python could be applied for mathematical problems. Presented here are bunch of useful links that I gathered as resources for the students. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;documentation-links&quot;&gt;Documentation links&lt;a class=&quot;zola-anchor&quot; href=&quot;#documentation-links&quot; aria-label=&quot;Anchor link for: documentation-links&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;&quot;&gt;docs.python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.scipy.org&#x2F;doc&#x2F;&quot;&gt;numpy and scipy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matplotlib.org&#x2F;stable&#x2F;api&#x2F;index.html&quot;&gt;matplotlib&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;books-and-courses&quot;&gt;Books and courses&lt;a class=&quot;zola-anchor&quot; href=&quot;#books-and-courses&quot; aria-label=&quot;Anchor link for: books-and-courses&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doingmathwithpython.github.io&#x2F;&quot;&gt;Doing Math with Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;maths-with-python.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;Maths with Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;drvinceknight&#x2F;Python-Mathematics-Handbook&quot;&gt;Doing mathematics with Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jrjohansson&#x2F;scientific-python-lectures&quot;&gt;Lectures on scientific computing with Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;greenteapress.com&#x2F;thinkdsp&#x2F;html&#x2F;index.html&quot;&gt;Digital Signal Processing in Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;learn&#x2F;audio-signal-processing&quot;&gt;Audio Signal Processing for Music Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;learn&#x2F;what-is-a-proof&quot;&gt;Mathematical Thinking in Computer Science&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;python-for-beginners&quot;&gt;Python for beginners&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-for-beginners&quot; aria-label=&quot;Anchor link for: python-for-beginners&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;automatetheboringstuff.com&#x2F;&quot;&gt;Automate the Boring Stuff with Python&lt;&#x2F;a&gt; — teaches you programming concepts and then shows how to automate everyday problems&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;runestone.academy&#x2F;ns&#x2F;books&#x2F;published&#x2F;thinkcspy&#x2F;index.html&quot;&gt;How to Think Like a Computer Scientist: Interactive Edition&lt;&#x2F;a&gt; — inspired by Think Python&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thepythoncodingbook.com&#x2F;&quot;&gt;The Python Coding Book&lt;&#x2F;a&gt; — friendly, relaxed programming book for beginners&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gto76.github.io&#x2F;python-cheatsheet&#x2F;&quot;&gt;Comprehensive Python cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pythontutor.com&#x2F;visualize.html#mode=edit&quot;&gt;Pythontutor: Visualize code execution&lt;&#x2F;a&gt; — also has example codes and ability to share sessions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2019&#x2F;06&#x2F;23&#x2F;a-few-debugging-resources&#x2F;&quot;&gt;What does debugging a program look like?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ryanstutorials.net&#x2F;problem-solving-skills&#x2F;&quot;&gt;Problem solving skills&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_resources&#x2F;&quot;&gt;comprehensive Python learning resources&lt;&#x2F;a&gt; for more.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h1 id=&quot;numpy-scipy-matplotlib&quot;&gt;numpy, scipy, matplotlib&lt;a class=&quot;zola-anchor&quot; href=&quot;#numpy-scipy-matplotlib&quot; aria-label=&quot;Anchor link for: numpy-scipy-matplotlib&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.labri.fr&#x2F;perso&#x2F;nrougier&#x2F;from-python-to-numpy&#x2F;&quot;&gt;From Python to Numpy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nbviewer.org&#x2F;github&#x2F;vlad17&#x2F;np-learn&#x2F;blob&#x2F;master&#x2F;presentation.ipynb&quot;&gt;Advanced Numpy Techniques&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;donnemartin&#x2F;data-science-ipython-notebooks&quot;&gt;List of data science Python notebooks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;scipy-lectures.org&#x2F;&quot;&gt;Scipy Lecture Notes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rougier&#x2F;scientific-visualization-book&quot;&gt;Scientific Visualization: Python + Matplotlib&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.python-graph-gallery.com&#x2F;&quot;&gt;Collection of charts with Matplotlib, Seaborn, Plotly, etc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ipgp.github.io&#x2F;scientific_python_cheat_sheet&#x2F;&quot;&gt;Scientific Python Cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;animatplot.readthedocs.io&#x2F;en&#x2F;stable&#x2F;tutorial&#x2F;getting_started.html&quot;&gt;animatplot&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alimanfoo.github.io&#x2F;2017&#x2F;01&#x2F;23&#x2F;go-faster-python.html&quot;&gt;benchmarking, profiling and optimising Python code&lt;&#x2F;a&gt; - includes discussion on numpy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;more-resources&quot;&gt;More resources&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-resources&quot; aria-label=&quot;Anchor link for: more-resources&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathoverflow.net&#x2F;questions&#x2F;308797&#x2F;what-programming-language-should-a-professional-mathematician-know&quot;&gt;What programming language should a professional mathematician know?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.python.org&#x2F;moin&#x2F;BeginnersGuide&#x2F;Mathematics&quot;&gt;Python Beginners Guide for Mathematics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jupyter&#x2F;jupyter&#x2F;wiki#a-gallery-of-interesting-jupyter-notebooks&quot;&gt;Interesting Jupyter Notebooks on mathematics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;curated_resources&#x2F;blob&#x2F;master&#x2F;Education.md#maths&quot;&gt;Maths curated resource links&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sagemath.org&#x2F;&quot;&gt;Sagemath&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;octave.org&#x2F;&quot;&gt;GNU Octave&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A short and satisfying bug hunt</title>
		<published>2019-03-06T00:00:00+00:00</published>
		<updated>2023-02-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://learnbyexample.github.io/a-short-and-satisfying-bug-hunt/" type="text/html"/>
		<id>https://learnbyexample.github.io/a-short-and-satisfying-bug-hunt/</id>
		<content type="html">&lt;h2 id=&quot;the-surprise&quot;&gt;The surprise&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-surprise&quot; aria-label=&quot;Anchor link for: the-surprise&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So, a pleasant surprise awaited me last Sunday. As is my usual habit, I opened my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&quot;&gt;github&lt;&#x2F;a&gt; account after breakfast to see if I&#x27;ve got any sudden spurt in traffic. And as usual, things were normal. Except for the blue notification, which was rare. I hoped it wasn&#x27;t a silly pull request and thankfully it was a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processing&#x2F;issues&#x2F;24&quot;&gt;new issue&lt;&#x2F;a&gt; that was opened.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I gave the issue a cursory glance and wrongly guessed it was probably some line ending issue (user was on Windows OS). As someone who has seen plenty of bugs in previous job, I wasn&#x27;t ruling out anything though. I first cloned the repo so as to try to recreate the working environment without possible interference from my local working copy. As the user had provided detailed information while opening the issue, I was able to quickly replicate it. Sure enough, I was seeing the same problem. I only wondered why it wasn&#x27;t brought to my attention before. Either past users chose not to or things weren&#x27;t interesting enough to reach that far in the exercises.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-minimal-failing-case&quot;&gt;Creating minimal failing case&lt;a class=&quot;zola-anchor&quot; href=&quot;#creating-minimal-failing-case&quot; aria-label=&quot;Anchor link for: creating-minimal-failing-case&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As I had written the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processing&#x2F;blob&#x2F;master&#x2F;exercises&#x2F;GNU_grep&#x2F;solve&quot;&gt;solution checker script&lt;&#x2F;a&gt; about 2 years back, the script looked alien. Right from cloning the repo, I had to fight the urge to improve things. By the time I spotted the issue, all such fantasies were thrown out. Replaced by a todo note to &lt;em&gt;someday&lt;&#x2F;em&gt; write automated testing script to check that my script is indeed working properly for all the exercises.&lt;&#x2F;p&gt;
&lt;p&gt;To put it simply, the role of &lt;code&gt;solve&lt;&#x2F;code&gt; script is to check if the previous command executed by the user solves the current exercise question. To do so, the script gets the previous command from history and compares the output of that command and a reference solution present in the exercise directory. Sounds simple right? Yeah, I thought so too. I do remember testing few cases before I first published it and no one had submitted an issue so far. So, why was it failing now?&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned before, I thought it could be some weird line ending issue. But that was effectively ruled out as it was failing for me as well on Linux. Still, I did check for funny characters with &lt;code&gt;cat -A&lt;&#x2F;code&gt;. Nope, no issues there.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;^[^=]*&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; sample.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a[2]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;foo_bar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;appx_pi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;greeting
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;food[4]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b[0][1]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; source ..&#x2F;solve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;---------------------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Mismatch&lt;&#x2F;span&gt;&lt;span&gt; for question 1:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Expected&lt;&#x2F;span&gt;&lt;span&gt; output is:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a[2]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;foo_bar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;appx_pi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;greeting
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;food[4]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b[0][1]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;---------------------------------------------
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Expected output was same as output for submitted solution. So, why is the script failing? I remember passing the script through &lt;a href=&quot;https:&#x2F;&#x2F;www.shellcheck.net&#x2F;&quot;&gt;shellcheck&lt;&#x2F;a&gt; but still checked it again. No progress. So, then I started by trying to debug the most likely culprit from terminal before trying to debug the whole script. Luckily, that turned out well.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat sample.txt 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sample string&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;foo_bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;4232
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;appx_pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;greeting&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Hi  there		have a nice   day&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;food[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;dosa&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# say what??
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;[ $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;command grep -o &amp;#39;^[^=]*&amp;#39; sample.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) == \
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;    $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;command grep -o &amp;#39;^[^=]*&amp;#39; sample.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Not fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Not&lt;&#x2F;span&gt;&lt;span&gt; fine
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# after some attempts, I tried a command that won&amp;#39;t have
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# any [] characters in the output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# Eureka!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; [[ $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;command grep &amp;#39;bar&amp;#39; sample.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) == \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;    &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;command grep &amp;#39;bar&amp;#39; sample.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) ]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Not fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;[ foo == foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a[5]&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; == a[5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; ]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Not fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Not&lt;&#x2F;span&gt;&lt;span&gt; fine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a[5]&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a[5]&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fine
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Having a minimal failing case from terminal was a relief. I tried &lt;code&gt;set -x&lt;&#x2F;code&gt; but that didn&#x27;t light a bulb either. Finally, somehow I thought perhaps characters in the output was causing the issue and when &lt;code&gt;[]&lt;&#x2F;code&gt; characters were not present, the comparison worked as expected.&lt;&#x2F;p&gt;
&lt;p&gt;I did think quoting could be the issue, but dismissed it at first as both sides of comparison had the same command. Then my recent experience from reviewing &lt;a href=&quot;https:&#x2F;&#x2F;www.packtpub.com&#x2F;application-development&#x2F;command-line-fundamentals&quot;&gt;Command Line Fundamentals&lt;&#x2F;a&gt; book came in handy. I remembered that if quotes aren&#x27;t used on RHS of comparison operator, it is treated as &lt;code&gt;glob&lt;&#x2F;code&gt; matching instead of string matching. Phew.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;a class=&quot;zola-anchor&quot; href=&quot;#tl-dr&quot; aria-label=&quot;Anchor link for: tl-dr&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Always &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;131766&#x2F;why-does-my-shell-script-choke-on-whitespace-or-other-special-characters&quot;&gt;quote strings in bash&lt;&#x2F;a&gt; unless you have a very good reason for not using them.&lt;&#x2F;p&gt;
&lt;p&gt;After adding double quotes around the command substitution commands, the script worked as expected. I thanked the user for opening the issue. And then informed the author for cli fundamentals book as well.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
